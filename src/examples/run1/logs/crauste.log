┌ Warning: At t=8.323560145394397, dt was forced below floating point epsilon 1.7763568394002505e-15, and step error estimate = 1.0019366755942247. Aborting. There is either an error in your model specification or the true solution is unstable (or the true solution can not be represented in the precision of Float64).
└ @ SciMLBase ~/.julia/packages/SciMLBase/u2Ue2/src/integrator_interface.jl:623
Starting model: crauste
FAILURE
AssertionError: Input arrays must have same length
Stacktrace:
  [1] aaad_gpr_pivot(xs::Vector{Float64}, ys::Vector{Float64})
    @ ODEParameterEstimation ~/.julia/dev/ODEParameterEstimation/src/core/derivatives.jl:509
  [2] create_interpolants(measured_quantities::Vector{Equation}, data_sample::OrderedDict{Any, Vector{Float64}}, t_vector::Vector{Float64}, interp_func::typeof(aaad_gpr_pivot))
    @ ODEParameterEstimation ~/.julia/dev/ODEParameterEstimation/src/core/parameter_estimation.jl:145
  [3] setup_parameter_estimation(PEP::ParameterEstimationProblem; max_num_points::Int64, point_hint::Float64, nooutput::Bool, interpolator::Function)
    @ ODEParameterEstimation ~/.julia/dev/ODEParameterEstimation/src/core/parameter_estimation_helpers.jl:43
  [4] setup_parameter_estimation
    @ ~/.julia/dev/ODEParameterEstimation/src/core/parameter_estimation_helpers.jl:27 [inlined]
  [5] multipoint_parameter_estimation(PEP::ParameterEstimationProblem; system_solver::Function, max_num_points::Int64, interpolator::Function, nooutput::Bool, diagnostics::Bool, diagnostic_data::ParameterEstimationProblem, polish_solutions::Bool, polish_maxiters::Int64, polish_method::Type, point_hint::Float64)
    @ ODEParameterEstimation ~/.julia/dev/ODEParameterEstimation/src/core/multipoint_estimation.jl:50
  [6] multipoint_parameter_estimation
    @ ~/.julia/dev/ODEParameterEstimation/src/core/multipoint_estimation.jl:25 [inlined]
  [7] #multishot_parameter_estimation#158
    @ ~/.julia/dev/ODEParameterEstimation/src/core/multipoint_estimation.jl:131 [inlined]
  [8] multishot_parameter_estimation
    @ ~/.julia/dev/ODEParameterEstimation/src/core/multipoint_estimation.jl:107 [inlined]
  [9] analyze_parameter_estimation_problem(PEP::ParameterEstimationProblem; interpolator::Nothing, max_num_points::Int64, nooutput::Bool, system_solver::Nothing, abstol::Float64, reltol::Float64, trap_debug::Bool, diagnostics::Bool, polish_method::Type, polish_maxiters::Int64, try_more_methods::Bool, shooting_points::Int64)
    @ ODEParameterEstimation ~/.julia/dev/ODEParameterEstimation/src/core/analysis_utils.jl:365
 [10] analyze_parameter_estimation_problem
    @ ~/.julia/dev/ODEParameterEstimation/src/core/analysis_utils.jl:332 [inlined]
 [11] (::var"#5#9"{IOStream, Int64, Float64, Nothing, Nothing, Base.TTY, Base.TTY, Dict{Symbol, Function}, Dict{Symbol, Function}, Symbol, String})()
    @ Main ~/.julia/dev/ODEParameterEstimation/src/examples/load_examples.jl:200
 [12] (::Base.RedirectStdStream)(thunk::var"#5#9"{IOStream, Int64, Float64, Nothing, Nothing, Base.TTY, Base.TTY, Dict{Symbol, Function}, Dict{Symbol, Function}, Symbol, String}, stream::IOStream)
    @ Base ./stream.jl:1464
 [13] #4
    @ ~/.julia/dev/ODEParameterEstimation/src/examples/load_examples.jl:186 [inlined]
 [14] (::Base.RedirectStdStream)(thunk::var"#4#8"{IOStream, Int64, Float64, Nothing, Nothing, Base.TTY, Base.TTY, Dict{Symbol, Function}, Dict{Symbol, Function}, Symbol, String}, stream::IOStream)
    @ Base ./stream.jl:1464
 [15] #3
    @ ~/.julia/dev/ODEParameterEstimation/src/examples/load_examples.jl:185 [inlined]
 [16] with_logstate(f::var"#3#7"{IOStream, Int64, Float64, Nothing, Nothing, Base.TTY, Base.TTY, Dict{Symbol, Function}, Dict{Symbol, Function}, Symbol, String}, logstate::Base.CoreLogging.LogState)
    @ Base.CoreLogging ./logging/logging.jl:524
 [17] with_logger
    @ ./logging/logging.jl:635 [inlined]
 [18] #2
    @ ~/.julia/dev/ODEParameterEstimation/src/examples/load_examples.jl:184 [inlined]
 [19] open(::var"#2#6"{Int64, Float64, Nothing, Nothing, Base.TTY, Base.TTY, Dict{Symbol, Function}, Dict{Symbol, Function}, Symbol, String}, ::String, ::Vararg{String}; kwargs::@Kwargs{})
    @ Base ./io.jl:410
 [20] open(::Function, ::String, ::String)
    @ Base ./io.jl:407
 [21] run_parameter_estimation_examples(; models::Vector{Symbol}, datasize::Int64, noise_level::Float64, interpolator::Nothing, system_solver::Nothing, log_dir::String)
    @ Main ~/.julia/dev/ODEParameterEstimation/src/examples/load_examples.jl:183
 [22] top-level scope
    @ ~/.julia/dev/ODEParameterEstimation/src/examples/run_examples.jl:149
 [23] include(mod::Module, _path::String)
    @ Base ./Base.jl:562
 [24] exec_options(opts::Base.JLOptions)
    @ Base ./client.jl:323
 [25] _start()
    @ Base ./client.jl:531