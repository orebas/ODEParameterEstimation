               _
   _       _ _(_)_     |  Documentation: https://docs.julialang.org
  (_)     | (_) (_)    |
   _ _   _| |_  __ _   |  Type "?" for help, "]?" for Pkg help.
  | | | | | | |/ _` |  |
  | | |_| | | | (_| |  |  Version 1.11.2 (2024-12-01)
 _/ |\__'_|_|_|\__'_|  |  Official https://julialang.org/ release
|__/                   |

[?2004h[0Kjulia> [7C[7C[0K[0Kjulia> [7C[7C[0K[0Kjulia> [7C[7C[0K[0Kjulia> [7Cpwd[10C[0Kjulia> [7Cpwd[10C[0K[0Kjulia> [7C[7C[0K[0Kjulia> [7C@time varied_estimation_main()[37C[0Kjulia> [7C@time varied_estimation_main()[37C[0K[0Kjulia> [7C[7C[0K[0Kjulia> [7Cinclude("all_examples.jl")[33C[0Kjulia> [7Cinclude("all_examples.jl")[33C[0K[0Kjulia> [7Cinclude("all_examples.jl")[33C[0Kjulia> [7Cinclude("all_examples.jl")[33C
[?2004lPrecompiling ODEParameterEstimation...
  23597.9 ms  ✓ ODEParameterEstimation
  1 dependency successfully precompiled in 31 seconds. 539 already precompiled.
varied_estimation_main (generic function with 1 method)

[0K[0Kjulia> [7C[7C[?2004h[0Kjulia> [7C[7C@ti[0K[0Kjulia> [7C@ti[10Cme[2Dm[0K[0Kjulia> [7C@tim[11Ce[1De[0K[0Kjulia> [7C@time[12C vari[0Kjulia> [7C@time vari[17Ce[0K[0Kjulia> [7C@time varie[18Cd_estimation_main[17Dd[0K[0Kjulia> [7C@time varied[19C_estimation_main[16D[0K[0Kjulia> [7C@time varied_estimation_main[35C*[0Kjulia> [7C@time varied_estimation_main[35C()[0Kjulia> [7C@time varied_estimation_main()[37C
[?2004lStarting model: simple

DEBUG [MPHCPE]: Starting parameter estimation...
DEBUG [MPHCPE]: Analyzing identifiability with 2 points
DEBUG [MPHCPE]: Final analysis with 1 points
DEBUG [MPHCPE]: Final unidentifiable dict: Dict{Any, Any}()
DEBUG [MPHCPE]: Final varlist: Num[a, b, x1(t), x2(t)]
We are trying these points:[17]
Using these observations and their derivatives:
Dict{Int64, Int64} with 2 entries:
  2 => 1
  1 => 1
total degree: 1
1-element Vector{Vector{ComplexF64}}:
 [0.40000000000015445 + 0.0im, 0.7999999999994833 + 3.4211388289180104e-49im]

Unidentifiability Analysis from MPHCPE:
All unidentifiable variables: Set{Any}()
Unidentifiable variables substitution dictionary: Dict{Any, Any}()
Trivially solvable variables: Dict{Any, Any}(_t17_x1ˍt_t_ => -0.3223106284167257, _t17_x1_t_ => 0.0932499800551148, _t17_x2_t_ => 0.8057765710415031, _t17_x2ˍt_t_ => 0.07459998404404367)

DEBUG [ODEPEtestwrapper]: Processing solution 1

=== Model: simple ===

Found 1 distinct solution clusters:

Cluster 1: 1 similar solutions
Best solution (Error: 0.0):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
x1(t)        |   0.333000 |   0.333000 |   0.000000
x2(t)        |   0.667000 |   0.667000 |   0.000000
a            |   0.400000 |   0.400000 |   0.000000
b            |   0.800000 |   0.800000 |   0.000000

Best maximum relative error for simple (excluding ALL unidentifiable parameters): 0.0

Observables Statistics:
--------------------------------------------------
Variable      | Mean        | Std         | Min         | Max         | Range       | Turns
--------------------------------------------------
y1(t)        |  -0.286877 |   0.292707 |  -0.577333 |   0.333000 |   0.910333 |          1
y2(t)        |   0.394468 |   0.422582 |  -0.489478 |   0.816474 |   1.305952 |          1

Error Statistics for Best Solution:
--------------------------------------------------

Error Statistics by Observable:
--------------------------------------------------
Observable   | Error Type | Mean        | Std         | Min         | Max         | Range
--------------------------------------------------
y1(t)        | Absolute   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y1(t)        | Relative   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y2(t)        | Absolute   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y2(t)        | Relative   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000

Detailed Time Series Comparison:
------------------------------------------------------------------------------------------------------------------------
t | y1(t)_act    | y1(t)_pred   | abs_err      | rel_err      | y2(t)_act    | y2(t)_pred   | abs_err      | rel_err     
------------------------------------------------------------------------------------------------------------------------
  0.0000 |     0.333000 |     0.333000 |     0.000000 |     0.000000 |     0.667000 |     0.667000 |     0.000000 |     0.000000
  0.0500 |     0.319529 |     0.319529 |     0.000000 |     0.000000 |     0.680051 |     0.680051 |     0.000000 |     0.000000
  0.1000 |     0.305802 |     0.305802 |     0.000000 |     0.000000 |     0.692559 |     0.692559 |     0.000000 |     0.000000
  0.1500 |     0.291830 |     0.291830 |     0.000000 |     0.000000 |     0.704512 |     0.704512 |     0.000000 |     0.000000
  0.2000 |     0.277625 |     0.277625 |     0.000000 |     0.000000 |     0.715902 |     0.715902 |     0.000000 |     0.000000
  0.2500 |     0.263198 |     0.263198 |     0.000000 |     0.000000 |     0.726719 |     0.726719 |     0.000000 |     0.000000
  0.3000 |     0.248560 |     0.248560 |     0.000000 |     0.000000 |     0.736955 |     0.736955 |     0.000000 |     0.000000
  0.3500 |     0.233723 |     0.233723 |     0.000000 |     0.000000 |     0.746601 |     0.746601 |     0.000000 |     0.000000
  0.4000 |     0.218700 |     0.218700 |     0.000000 |     0.000000 |     0.755651 |     0.755651 |     0.000000 |     0.000000
  0.4500 |     0.203501 |     0.203501 |     0.000000 |     0.000000 |     0.764095 |     0.764095 |     0.000000 |     0.000000
  0.5000 |     0.188140 |     0.188140 |     0.000000 |     0.000000 |     0.771928 |     0.771928 |     0.000000 |     0.000000
  0.5500 |     0.172628 |     0.172628 |     0.000000 |     0.000000 |     0.779144 |     0.779144 |     0.000000 |     0.000000
  0.6000 |     0.156979 |     0.156979 |     0.000000 |     0.000000 |     0.785737 |     0.785737 |     0.000000 |     0.000000
  0.6500 |     0.141203 |     0.141203 |     0.000000 |     0.000000 |     0.791701 |     0.791701 |     0.000000 |     0.000000
  0.7000 |     0.125315 |     0.125315 |     0.000000 |     0.000000 |     0.797032 |     0.797032 |     0.000000 |     0.000000
  0.7500 |     0.109326 |     0.109326 |     0.000000 |     0.000000 |     0.801725 |     0.801725 |     0.000000 |     0.000000
  0.8000 |     0.093250 |     0.093250 |     0.000000 |     0.000000 |     0.805777 |     0.805777 |     0.000000 |     0.000000
  0.8500 |     0.077099 |     0.077099 |     0.000000 |     0.000000 |     0.809184 |     0.809184 |     0.000000 |     0.000000
  0.9000 |     0.060887 |     0.060887 |     0.000000 |     0.000000 |     0.811944 |     0.811944 |     0.000000 |     0.000000
  0.9500 |     0.044626 |     0.044626 |     0.000000 |     0.000000 |     0.814054 |     0.814054 |     0.000000 |     0.000000
  1.0000 |     0.028329 |     0.028329 |     0.000000 |     0.000000 |     0.815513 |     0.815513 |     0.000000 |     0.000000
  1.0500 |     0.012010 |     0.012010 |     0.000000 |     0.000000 |     0.816320 |     0.816320 |     0.000000 |     0.000000
  1.1000 |    -0.004319 |    -0.004319 |     0.000000 |     0.000000 |     0.816474 |     0.816474 |     0.000000 |     0.000000
  1.1500 |    -0.020645 |    -0.020645 |     0.000000 |     0.000000 |     0.815975 |     0.815975 |     0.000000 |     0.000000
  1.2000 |    -0.036954 |    -0.036954 |     0.000000 |     0.000000 |     0.814823 |     0.814823 |     0.000000 |     0.000000
  1.2500 |    -0.053233 |    -0.053233 |     0.000000 |     0.000000 |     0.813019 |     0.813019 |     0.000000 |     0.000000
  1.3000 |    -0.069470 |    -0.069470 |     0.000000 |     0.000000 |     0.810564 |     0.810564 |     0.000000 |     0.000000
  1.3500 |    -0.085652 |    -0.085652 |     0.000000 |     0.000000 |     0.807462 |     0.807462 |     0.000000 |     0.000000
  1.4000 |    -0.101765 |    -0.101765 |     0.000000 |     0.000000 |     0.803713 |     0.803713 |     0.000000 |     0.000000
  1.4500 |    -0.117796 |    -0.117796 |     0.000000 |     0.000000 |     0.799322 |     0.799322 |     0.000000 |     0.000000
  1.5000 |    -0.133733 |    -0.133733 |     0.000000 |     0.000000 |     0.794291 |     0.794291 |     0.000000 |     0.000000
  1.5500 |    -0.149563 |    -0.149563 |     0.000000 |     0.000000 |     0.788625 |     0.788625 |     0.000000 |     0.000000
  1.6000 |    -0.165274 |    -0.165274 |     0.000000 |     0.000000 |     0.782327 |     0.782327 |     0.000000 |     0.000000
  1.6500 |    -0.180852 |    -0.180852 |     0.000000 |     0.000000 |     0.775404 |     0.775404 |     0.000000 |     0.000000
  1.7000 |    -0.196286 |    -0.196286 |     0.000000 |     0.000000 |     0.767861 |     0.767861 |     0.000000 |     0.000000
  1.7500 |    -0.211563 |    -0.211563 |     0.000000 |     0.000000 |     0.759704 |     0.759704 |     0.000000 |     0.000000
  1.8000 |    -0.226670 |    -0.226670 |     0.000000 |     0.000000 |     0.750938 |     0.750938 |     0.000000 |     0.000000
  1.8500 |    -0.241596 |    -0.241596 |     0.000000 |     0.000000 |     0.741572 |     0.741572 |     0.000000 |     0.000000
  1.9000 |    -0.256329 |    -0.256329 |     0.000000 |     0.000000 |     0.731613 |     0.731613 |     0.000000 |     0.000000
  1.9500 |    -0.270857 |    -0.270857 |     0.000000 |     0.000000 |     0.721069 |     0.721069 |     0.000000 |     0.000000
  2.0000 |    -0.285168 |    -0.285168 |     0.000000 |     0.000000 |     0.709948 |     0.709948 |     0.000000 |     0.000000
  2.0500 |    -0.299251 |    -0.299251 |     0.000000 |     0.000000 |     0.698258 |     0.698258 |     0.000000 |     0.000000
  2.1000 |    -0.313095 |    -0.313095 |     0.000000 |     0.000000 |     0.686011 |     0.686011 |     0.000000 |     0.000000
  2.1500 |    -0.326688 |    -0.326688 |     0.000000 |     0.000000 |     0.673214 |     0.673214 |     0.000000 |     0.000000
  2.2000 |    -0.340019 |    -0.340019 |     0.000000 |     0.000000 |     0.659879 |     0.659879 |     0.000000 |     0.000000
  2.2500 |    -0.353079 |    -0.353079 |     0.000000 |     0.000000 |     0.646016 |     0.646016 |     0.000000 |     0.000000
  2.3000 |    -0.365857 |    -0.365857 |     0.000000 |     0.000000 |     0.631637 |     0.631637 |     0.000000 |     0.000000
  2.3500 |    -0.378341 |    -0.378341 |     0.000000 |     0.000000 |     0.616752 |     0.616752 |     0.000000 |     0.000000
  2.4000 |    -0.390523 |    -0.390523 |     0.000000 |     0.000000 |     0.601373 |     0.601373 |     0.000000 |     0.000000
  2.4500 |    -0.402393 |    -0.402393 |     0.000000 |     0.000000 |     0.585514 |     0.585514 |     0.000000 |     0.000000
  2.5000 |    -0.413941 |    -0.413941 |     0.000000 |     0.000000 |     0.569186 |     0.569186 |     0.000000 |     0.000000
  2.5500 |    -0.425158 |    -0.425158 |     0.000000 |     0.000000 |     0.552403 |     0.552403 |     0.000000 |     0.000000
  2.6000 |    -0.436034 |    -0.436034 |     0.000000 |     0.000000 |     0.535178 |     0.535178 |     0.000000 |     0.000000
  2.6500 |    -0.446562 |    -0.446562 |     0.000000 |     0.000000 |     0.517525 |     0.517525 |     0.000000 |     0.000000
  2.7000 |    -0.456732 |    -0.456732 |     0.000000 |     0.000000 |     0.499458 |     0.499458 |     0.000000 |     0.000000
  2.7500 |    -0.466537 |    -0.466537 |     0.000000 |     0.000000 |     0.480991 |     0.480991 |     0.000000 |     0.000000
  2.8000 |    -0.475969 |    -0.475969 |     0.000000 |     0.000000 |     0.462140 |     0.462140 |     0.000000 |     0.000000
  2.8500 |    -0.485021 |    -0.485021 |     0.000000 |     0.000000 |     0.442919 |     0.442919 |     0.000000 |     0.000000
  2.9000 |    -0.493684 |    -0.493684 |     0.000000 |     0.000000 |     0.423343 |     0.423343 |     0.000000 |     0.000000
  2.9500 |    -0.501952 |    -0.501952 |     0.000000 |     0.000000 |     0.403429 |     0.403429 |     0.000000 |     0.000000
  3.0000 |    -0.509819 |    -0.509819 |     0.000000 |     0.000000 |     0.383193 |     0.383193 |     0.000000 |     0.000000
  3.0500 |    -0.517278 |    -0.517278 |     0.000000 |     0.000000 |     0.362649 |     0.362649 |     0.000000 |     0.000000
  3.1000 |    -0.524323 |    -0.524323 |     0.000000 |     0.000000 |     0.341816 |     0.341816 |     0.000000 |     0.000000
  3.1500 |    -0.530949 |    -0.530949 |     0.000000 |     0.000000 |     0.320709 |     0.320709 |     0.000000 |     0.000000
  3.2000 |    -0.537150 |    -0.537150 |     0.000000 |     0.000000 |     0.299346 |     0.299346 |     0.000000 |     0.000000
  3.2500 |    -0.542921 |    -0.542921 |     0.000000 |     0.000000 |     0.277743 |     0.277743 |     0.000000 |     0.000000
  3.3000 |    -0.548258 |    -0.548258 |     0.000000 |     0.000000 |     0.255918 |     0.255918 |     0.000000 |     0.000000
  3.3500 |    -0.553156 |    -0.553156 |     0.000000 |     0.000000 |     0.233888 |     0.233888 |     0.000000 |     0.000000
  3.4000 |    -0.557612 |    -0.557612 |     0.000000 |     0.000000 |     0.211671 |     0.211671 |     0.000000 |     0.000000
  3.4500 |    -0.561622 |    -0.561622 |     0.000000 |     0.000000 |     0.189285 |     0.189285 |     0.000000 |     0.000000
  3.5000 |    -0.565182 |    -0.565182 |     0.000000 |     0.000000 |     0.166747 |     0.166747 |     0.000000 |     0.000000
  3.5500 |    -0.568291 |    -0.568291 |     0.000000 |     0.000000 |     0.144076 |     0.144076 |     0.000000 |     0.000000
  3.6000 |    -0.570945 |    -0.570945 |     0.000000 |     0.000000 |     0.121290 |     0.121290 |     0.000000 |     0.000000
  3.6500 |    -0.573142 |    -0.573142 |     0.000000 |     0.000000 |     0.098407 |     0.098407 |     0.000000 |     0.000000
  3.7000 |    -0.574880 |    -0.574880 |     0.000000 |     0.000000 |     0.075445 |     0.075445 |     0.000000 |     0.000000
  3.7500 |    -0.576159 |    -0.576159 |     0.000000 |     0.000000 |     0.052423 |     0.052423 |     0.000000 |     0.000000
  3.8000 |    -0.576977 |    -0.576977 |     0.000000 |     0.000000 |     0.029358 |     0.029358 |     0.000000 |     0.000000
  3.8500 |    -0.577333 |    -0.577333 |     0.000000 |     0.000000 |     0.006271 |     0.006271 |     0.000000 |     0.000000
  3.9000 |    -0.577228 |    -0.577228 |     0.000000 |     0.000000 |    -0.016822 |    -0.016822 |     0.000000 |     0.000000
  3.9500 |    -0.576661 |    -0.576661 |     0.000000 |     0.000000 |    -0.039901 |    -0.039901 |     0.000000 |     0.000000
  4.0000 |    -0.575632 |    -0.575632 |     0.000000 |     0.000000 |    -0.062949 |    -0.062949 |     0.000000 |     0.000000
  4.0500 |    -0.574143 |    -0.574143 |     0.000000 |     0.000000 |    -0.085946 |    -0.085946 |     0.000000 |     0.000000
  4.1000 |    -0.572195 |    -0.572195 |     0.000000 |     0.000000 |    -0.108874 |    -0.108874 |     0.000000 |     0.000000
  4.1500 |    -0.569789 |    -0.569789 |     0.000000 |     0.000000 |    -0.131715 |    -0.131715 |     0.000000 |     0.000000
  4.2000 |    -0.566927 |    -0.566927 |     0.000000 |     0.000000 |    -0.154451 |    -0.154451 |     0.000000 |     0.000000
  4.2500 |    -0.563611 |    -0.563611 |     0.000000 |     0.000000 |    -0.177063 |    -0.177063 |     0.000000 |     0.000000
  4.3000 |    -0.559845 |    -0.559845 |     0.000000 |     0.000000 |    -0.199534 |    -0.199534 |     0.000000 |     0.000000
  4.3500 |    -0.555631 |    -0.555631 |     0.000000 |     0.000000 |    -0.221845 |    -0.221845 |     0.000000 |     0.000000
  4.4000 |    -0.550973 |    -0.550973 |     0.000000 |     0.000000 |    -0.243979 |    -0.243979 |     0.000000 |     0.000000
  4.4500 |    -0.545873 |    -0.545873 |     0.000000 |     0.000000 |    -0.265917 |    -0.265917 |     0.000000 |     0.000000
  4.5000 |    -0.540337 |    -0.540337 |     0.000000 |     0.000000 |    -0.287643 |    -0.287643 |     0.000000 |     0.000000
  4.5500 |    -0.534369 |    -0.534369 |     0.000000 |     0.000000 |    -0.309138 |    -0.309138 |     0.000000 |     0.000000
  4.6000 |    -0.527973 |    -0.527973 |     0.000000 |     0.000000 |    -0.330386 |    -0.330386 |     0.000000 |     0.000000
  4.6500 |    -0.521155 |    -0.521155 |     0.000000 |     0.000000 |    -0.351370 |    -0.351370 |     0.000000 |     0.000000
  4.7000 |    -0.513920 |    -0.513920 |     0.000000 |     0.000000 |    -0.372073 |    -0.372073 |     0.000000 |     0.000000
  4.7500 |    -0.506274 |    -0.506274 |     0.000000 |     0.000000 |    -0.392479 |    -0.392479 |     0.000000 |     0.000000
  4.8000 |    -0.498223 |    -0.498223 |     0.000000 |     0.000000 |    -0.412570 |    -0.412570 |     0.000000 |     0.000000
  4.8500 |    -0.489774 |    -0.489774 |     0.000000 |     0.000000 |    -0.432331 |    -0.432331 |     0.000000 |     0.000000
  4.9000 |    -0.480932 |    -0.480932 |     0.000000 |     0.000000 |    -0.451747 |    -0.451747 |     0.000000 |     0.000000
  4.9500 |    -0.471706 |    -0.471706 |     0.000000 |     0.000000 |    -0.470801 |    -0.470801 |     0.000000 |     0.000000
  5.0000 |    -0.462103 |    -0.462103 |     0.000000 |     0.000000 |    -0.489478 |    -0.489478 |     0.000000 |     0.000000
------------------------------------------------------------------------------------------------------------------------
Starting model: simple_linear_combination

DEBUG [MPHCPE]: Starting parameter estimation...
DEBUG [MPHCPE]: Analyzing identifiability with 2 points
DEBUG [MPHCPE]: Final analysis with 1 points
DEBUG [MPHCPE]: Final unidentifiable dict: Dict{Any, Any}()
DEBUG [MPHCPE]: Final varlist: Num[a, b, x1(t), x2(t)]
We are trying these points:[33]
Using these observations and their derivatives:
Dict{Int64, Int64} with 2 entries:
  2 => 1
  1 => 1
total degree: 4
1-element Vector{Vector{ComplexF64}}:
 [0.40000000000000924 + 0.0im, 0.8000000000039703 + 0.0im, -0.49464802291183435 + 0.0im, 2.347476659491891 + 0.0im, -0.9389906637967782 + 0.0im, -0.3957184183314314 + 0.0im]

Unidentifiability Analysis from MPHCPE:
All unidentifiable variables: Set{Any}()
Unidentifiable variables substitution dictionary: Dict{Any, Any}()
Trivially solvable variables: Dict{Any, Any}()

DEBUG [ODEPEtestwrapper]: Processing solution 1

=== Model: simple_linear_combination ===

Found 1 distinct solution clusters:

Cluster 1: 1 similar solutions
Best solution (Error: 0.0):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
x1(t)        |   1.000000 |   1.000000 |   0.000000
x2(t)        |   2.000000 |   2.000000 |   0.000000
a            |   0.400000 |   0.400000 |   0.000000
b            |   0.800000 |   0.800000 |   0.000000

Best maximum relative error for simple_linear_combination (excluding ALL unidentifiable parameters): 0.0

Observables Statistics:
--------------------------------------------------
Variable      | Mean        | Std         | Min         | Max         | Range       | Turns
--------------------------------------------------
y1(t)        |  -1.127946 |   2.263837 |  -3.674092 |   3.000000 |   6.674092 |          1
y2(t)        |  -2.876182 |   2.412594 |  -5.232066 |   2.500000 |   7.732066 |          1

Error Statistics for Best Solution:
--------------------------------------------------

Error Statistics by Observable:
--------------------------------------------------
Observable   | Error Type | Mean        | Std         | Min         | Max         | Range
--------------------------------------------------
y1(t)        | Absolute   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y1(t)        | Relative   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y2(t)        | Absolute   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y2(t)        | Relative   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000

Detailed Time Series Comparison:
------------------------------------------------------------------------------------------------------------------------
t | y1(t)_act    | y1(t)_pred   | abs_err      | rel_err      | y2(t)_act    | y2(t)_pred   | abs_err      | rel_err     
------------------------------------------------------------------------------------------------------------------------
  0.0000 |     3.000000 |     3.000000 |     0.000000 |     0.000000 |     2.500000 |     2.500000 |     0.000000 |     0.000000
  0.0500 |     2.938808 |     2.938808 |     0.000000 |     0.000000 |     2.369017 |     2.369017 |     0.000000 |     0.000000
  0.1000 |     2.875265 |     2.875265 |     0.000000 |     0.000000 |     2.236140 |     2.236140 |     0.000000 |     0.000000
  0.1500 |     2.809422 |     2.809422 |     0.000000 |     0.000000 |     2.101473 |     2.101473 |     0.000000 |     0.000000
  0.2000 |     2.741332 |     2.741332 |     0.000000 |     0.000000 |     1.965126 |     1.965126 |     0.000000 |     0.000000
  0.2500 |     2.671049 |     2.671049 |     0.000000 |     0.000000 |     1.827206 |     1.827206 |     0.000000 |     0.000000
  0.3000 |     2.598629 |     2.598629 |     0.000000 |     0.000000 |     1.687825 |     1.687825 |     0.000000 |     0.000000
  0.3500 |     2.524130 |     2.524130 |     0.000000 |     0.000000 |     1.547094 |     1.547094 |     0.000000 |     0.000000
  0.4000 |     2.447613 |     2.447613 |     0.000000 |     0.000000 |     1.405125 |     1.405125 |     0.000000 |     0.000000
  0.4500 |     2.369137 |     2.369137 |     0.000000 |     0.000000 |     1.262032 |     1.262032 |     0.000000 |     0.000000
  0.5000 |     2.288766 |     2.288766 |     0.000000 |     0.000000 |     1.117929 |     1.117929 |     0.000000 |     0.000000
  0.5500 |     2.206564 |     2.206564 |     0.000000 |     0.000000 |     0.972932 |     0.972932 |     0.000000 |     0.000000
  0.6000 |     2.122597 |     2.122597 |     0.000000 |     0.000000 |     0.827157 |     0.827157 |     0.000000 |     0.000000
  0.6500 |     2.036932 |     2.036932 |     0.000000 |     0.000000 |     0.680720 |     0.680720 |     0.000000 |     0.000000
  0.7000 |     1.949638 |     1.949638 |     0.000000 |     0.000000 |     0.533739 |     0.533739 |     0.000000 |     0.000000
  0.7500 |     1.860784 |     1.860784 |     0.000000 |     0.000000 |     0.386331 |     0.386331 |     0.000000 |     0.000000
  0.8000 |     1.770441 |     1.770441 |     0.000000 |     0.000000 |     0.238613 |     0.238613 |     0.000000 |     0.000000
  0.8500 |     1.678683 |     1.678683 |     0.000000 |     0.000000 |     0.090705 |     0.090705 |     0.000000 |     0.000000
  0.9000 |     1.585581 |     1.585581 |     0.000000 |     0.000000 |    -0.057276 |    -0.057276 |     0.000000 |     0.000000
  0.9500 |     1.491211 |     1.491211 |     0.000000 |     0.000000 |    -0.205211 |    -0.205211 |     0.000000 |     0.000000
  1.0000 |     1.395648 |     1.395648 |     0.000000 |     0.000000 |    -0.352982 |    -0.352982 |     0.000000 |     0.000000
  1.0500 |     1.298969 |     1.298969 |     0.000000 |     0.000000 |    -0.500470 |    -0.500470 |     0.000000 |     0.000000
  1.1000 |     1.201250 |     1.201250 |     0.000000 |     0.000000 |    -0.647558 |    -0.647558 |     0.000000 |     0.000000
  1.1500 |     1.102571 |     1.102571 |     0.000000 |     0.000000 |    -0.794128 |    -0.794128 |     0.000000 |     0.000000
  1.2000 |     1.003009 |     1.003009 |     0.000000 |     0.000000 |    -0.940063 |    -0.940063 |     0.000000 |     0.000000
  1.2500 |     0.902646 |     0.902646 |     0.000000 |     0.000000 |    -1.085246 |    -1.085246 |     0.000000 |     0.000000
  1.3000 |     0.801560 |     0.801560 |     0.000000 |     0.000000 |    -1.229561 |    -1.229561 |     0.000000 |     0.000000
  1.3500 |     0.699833 |     0.699833 |     0.000000 |     0.000000 |    -1.372892 |    -1.372892 |     0.000000 |     0.000000
  1.4000 |     0.597546 |     0.597546 |     0.000000 |     0.000000 |    -1.515125 |    -1.515125 |     0.000000 |     0.000000
  1.4500 |     0.494781 |     0.494781 |     0.000000 |     0.000000 |    -1.656145 |    -1.656145 |     0.000000 |     0.000000
  1.5000 |     0.391621 |     0.391621 |     0.000000 |     0.000000 |    -1.795842 |    -1.795842 |     0.000000 |     0.000000
  1.5500 |     0.288147 |     0.288147 |     0.000000 |     0.000000 |    -1.934101 |    -1.934101 |     0.000000 |     0.000000
  1.6000 |     0.184442 |     0.184442 |     0.000000 |     0.000000 |    -2.070813 |    -2.070813 |     0.000000 |     0.000000
  1.6500 |     0.080590 |     0.080590 |     0.000000 |     0.000000 |    -2.205869 |    -2.205869 |     0.000000 |     0.000000
  1.7000 |    -0.023326 |    -0.023326 |     0.000000 |     0.000000 |    -2.339160 |    -2.339160 |     0.000000 |     0.000000
  1.7500 |    -0.127224 |    -0.127224 |     0.000000 |     0.000000 |    -2.470580 |    -2.470580 |     0.000000 |     0.000000
  1.8000 |    -0.231020 |    -0.231020 |     0.000000 |     0.000000 |    -2.600024 |    -2.600024 |     0.000000 |     0.000000
  1.8500 |    -0.334631 |    -0.334631 |     0.000000 |     0.000000 |    -2.727387 |    -2.727387 |     0.000000 |     0.000000
  1.9000 |    -0.437975 |    -0.437975 |     0.000000 |     0.000000 |    -2.852569 |    -2.852569 |     0.000000 |     0.000000
  1.9500 |    -0.540968 |    -0.540968 |     0.000000 |     0.000000 |    -2.975469 |    -2.975469 |     0.000000 |     0.000000
  2.0000 |    -0.643528 |    -0.643528 |     0.000000 |     0.000000 |    -3.095989 |    -3.095989 |     0.000000 |     0.000000
  2.0500 |    -0.745574 |    -0.745574 |     0.000000 |     0.000000 |    -3.214033 |    -3.214033 |     0.000000 |     0.000000
  2.1000 |    -0.847023 |    -0.847023 |     0.000000 |     0.000000 |    -3.329505 |    -3.329505 |     0.000000 |     0.000000
  2.1500 |    -0.947795 |    -0.947795 |     0.000000 |     0.000000 |    -3.442313 |    -3.442313 |     0.000000 |     0.000000
  2.2000 |    -1.047808 |    -1.047808 |     0.000000 |     0.000000 |    -3.552369 |    -3.552369 |     0.000000 |     0.000000
  2.2500 |    -1.146983 |    -1.146983 |     0.000000 |     0.000000 |    -3.659582 |    -3.659582 |     0.000000 |     0.000000
  2.3000 |    -1.245241 |    -1.245241 |     0.000000 |     0.000000 |    -3.763868 |    -3.763868 |     0.000000 |     0.000000
  2.3500 |    -1.342503 |    -1.342503 |     0.000000 |     0.000000 |    -3.865143 |    -3.865143 |     0.000000 |     0.000000
  2.4000 |    -1.438690 |    -1.438690 |     0.000000 |     0.000000 |    -3.963326 |    -3.963326 |     0.000000 |     0.000000
  2.4500 |    -1.533727 |    -1.533727 |     0.000000 |     0.000000 |    -4.058339 |    -4.058339 |     0.000000 |     0.000000
  2.5000 |    -1.627537 |    -1.627537 |     0.000000 |     0.000000 |    -4.150105 |    -4.150105 |     0.000000 |     0.000000
  2.5500 |    -1.720045 |    -1.720045 |     0.000000 |     0.000000 |    -4.238551 |    -4.238551 |     0.000000 |     0.000000
  2.6000 |    -1.811177 |    -1.811177 |     0.000000 |     0.000000 |    -4.323607 |    -4.323607 |     0.000000 |     0.000000
  2.6500 |    -1.900860 |    -1.900860 |     0.000000 |     0.000000 |    -4.405204 |    -4.405204 |     0.000000 |     0.000000
  2.7000 |    -1.989023 |    -1.989023 |     0.000000 |     0.000000 |    -4.483277 |    -4.483277 |     0.000000 |     0.000000
  2.7500 |    -2.075594 |    -2.075594 |     0.000000 |     0.000000 |    -4.557764 |    -4.557764 |     0.000000 |     0.000000
  2.8000 |    -2.160505 |    -2.160505 |     0.000000 |     0.000000 |    -4.628605 |    -4.628605 |     0.000000 |     0.000000
  2.8500 |    -2.243688 |    -2.243688 |     0.000000 |     0.000000 |    -4.695743 |    -4.695743 |     0.000000 |     0.000000
  2.9000 |    -2.325076 |    -2.325076 |     0.000000 |     0.000000 |    -4.759124 |    -4.759124 |     0.000000 |     0.000000
  2.9500 |    -2.404604 |    -2.404604 |     0.000000 |     0.000000 |    -4.818699 |    -4.818699 |     0.000000 |     0.000000
  3.0000 |    -2.482208 |    -2.482208 |     0.000000 |     0.000000 |    -4.874419 |    -4.874419 |     0.000000 |     0.000000
  3.0500 |    -2.557827 |    -2.557827 |     0.000000 |     0.000000 |    -4.926240 |    -4.926240 |     0.000000 |     0.000000
  3.1000 |    -2.631400 |    -2.631400 |     0.000000 |     0.000000 |    -4.974120 |    -4.974120 |     0.000000 |     0.000000
  3.1500 |    -2.702868 |    -2.702868 |     0.000000 |     0.000000 |    -5.018021 |    -5.018021 |     0.000000 |     0.000000
  3.2000 |    -2.772173 |    -2.772173 |     0.000000 |     0.000000 |    -5.057908 |    -5.057908 |     0.000000 |     0.000000
  3.2500 |    -2.839261 |    -2.839261 |     0.000000 |     0.000000 |    -5.093749 |    -5.093749 |     0.000000 |     0.000000
  3.3000 |    -2.904078 |    -2.904078 |     0.000000 |     0.000000 |    -5.125515 |    -5.125515 |     0.000000 |     0.000000
  3.3500 |    -2.966572 |    -2.966572 |     0.000000 |     0.000000 |    -5.153181 |    -5.153181 |     0.000000 |     0.000000
  3.4000 |    -3.026692 |    -3.026692 |     0.000000 |     0.000000 |    -5.176725 |    -5.176725 |     0.000000 |     0.000000
  3.4500 |    -3.084392 |    -3.084392 |     0.000000 |     0.000000 |    -5.196127 |    -5.196127 |     0.000000 |     0.000000
  3.5000 |    -3.139624 |    -3.139624 |     0.000000 |     0.000000 |    -5.211373 |    -5.211373 |     0.000000 |     0.000000
  3.5500 |    -3.192344 |    -3.192344 |     0.000000 |     0.000000 |    -5.222450 |    -5.222450 |     0.000000 |     0.000000
  3.6000 |    -3.242511 |    -3.242511 |     0.000000 |     0.000000 |    -5.229350 |    -5.229350 |     0.000000 |     0.000000
  3.6500 |    -3.290084 |    -3.290084 |     0.000000 |     0.000000 |    -5.232066 |    -5.232066 |     0.000000 |     0.000000
  3.7000 |    -3.335025 |    -3.335025 |     0.000000 |     0.000000 |    -5.230597 |    -5.230597 |     0.000000 |     0.000000
  3.7500 |    -3.377298 |    -3.377298 |     0.000000 |     0.000000 |    -5.224943 |    -5.224943 |     0.000000 |     0.000000
  3.8000 |    -3.416870 |    -3.416870 |     0.000000 |     0.000000 |    -5.215110 |    -5.215110 |     0.000000 |     0.000000
  3.8500 |    -3.453708 |    -3.453708 |     0.000000 |     0.000000 |    -5.201106 |    -5.201106 |     0.000000 |     0.000000
  3.9000 |    -3.487783 |    -3.487783 |     0.000000 |     0.000000 |    -5.182940 |    -5.182940 |     0.000000 |     0.000000
  3.9500 |    -3.519069 |    -3.519069 |     0.000000 |     0.000000 |    -5.160629 |    -5.160629 |     0.000000 |     0.000000
  4.0000 |    -3.547539 |    -3.547539 |     0.000000 |     0.000000 |    -5.134189 |    -5.134189 |     0.000000 |     0.000000
  4.0500 |    -3.573171 |    -3.573171 |     0.000000 |     0.000000 |    -5.103642 |    -5.103642 |     0.000000 |     0.000000
  4.1000 |    -3.595946 |    -3.595946 |     0.000000 |     0.000000 |    -5.069013 |    -5.069013 |     0.000000 |     0.000000
  4.1500 |    -3.615843 |    -3.615843 |     0.000000 |     0.000000 |    -5.030328 |    -5.030328 |     0.000000 |     0.000000
  4.2000 |    -3.632848 |    -3.632848 |     0.000000 |     0.000000 |    -4.987620 |    -4.987620 |     0.000000 |     0.000000
  4.2500 |    -3.646947 |    -3.646947 |     0.000000 |     0.000000 |    -4.940922 |    -4.940922 |     0.000000 |     0.000000
  4.3000 |    -3.658129 |    -3.658129 |     0.000000 |     0.000000 |    -4.890271 |    -4.890271 |     0.000000 |     0.000000
  4.3500 |    -3.666384 |    -3.666384 |     0.000000 |     0.000000 |    -4.835709 |    -4.835709 |     0.000000 |     0.000000
  4.4000 |    -3.671707 |    -3.671707 |     0.000000 |     0.000000 |    -4.777278 |    -4.777278 |     0.000000 |     0.000000
  4.4500 |    -3.674092 |    -3.674092 |     0.000000 |     0.000000 |    -4.715025 |    -4.715025 |     0.000000 |     0.000000
  4.5000 |    -3.673538 |    -3.673538 |     0.000000 |     0.000000 |    -4.649001 |    -4.649001 |     0.000000 |     0.000000
  4.5500 |    -3.670046 |    -3.670046 |     0.000000 |     0.000000 |    -4.579258 |    -4.579258 |     0.000000 |     0.000000
  4.6000 |    -3.663617 |    -3.663617 |     0.000000 |     0.000000 |    -4.505851 |    -4.505851 |     0.000000 |     0.000000
  4.6500 |    -3.654258 |    -3.654258 |     0.000000 |     0.000000 |    -4.428840 |    -4.428840 |     0.000000 |     0.000000
  4.7000 |    -3.641976 |    -3.641976 |     0.000000 |     0.000000 |    -4.348287 |    -4.348287 |     0.000000 |     0.000000
  4.7500 |    -3.626781 |    -3.626781 |     0.000000 |     0.000000 |    -4.264255 |    -4.264255 |     0.000000 |     0.000000
  4.8000 |    -3.608684 |    -3.608684 |     0.000000 |     0.000000 |    -4.176811 |    -4.176811 |     0.000000 |     0.000000
  4.8500 |    -3.587700 |    -3.587700 |     0.000000 |     0.000000 |    -4.086027 |    -4.086027 |     0.000000 |     0.000000
  4.9000 |    -3.563847 |    -3.563847 |     0.000000 |     0.000000 |    -3.991974 |    -3.991974 |     0.000000 |     0.000000
  4.9500 |    -3.537142 |    -3.537142 |     0.000000 |     0.000000 |    -3.894727 |    -3.894727 |     0.000000 |     0.000000
  5.0000 |    -3.507608 |    -3.507608 |     0.000000 |     0.000000 |    -3.794365 |    -3.794365 |     0.000000 |     0.000000
------------------------------------------------------------------------------------------------------------------------
Starting model: onesp_cubed

DEBUG [MPHCPE]: Starting parameter estimation...
DEBUG [MPHCPE]: Analyzing identifiability with 2 points
DEBUG [MPHCPE]: Final analysis with 1 points
DEBUG [MPHCPE]: Final unidentifiable dict: Dict{Any, Any}()
DEBUG [MPHCPE]: Final varlist: Num[a, x1(t)]
We are trying these points:[8]
Using these observations and their derivatives:
Dict{Int64, Int64} with 1 entry:
  1 => 1
total degree: 18
1-element Vector{Vector{ComplexF64}}:
 [0.09999999999999812 + 3.009265538105056e-36im, 1.9312108325151431 - 3.76158192263132e-37im, -0.19312108325151067 - 3.009265538105056e-36im]

Unidentifiability Analysis from MPHCPE:
All unidentifiable variables: Set{Any}()
Unidentifiable variables substitution dictionary: Dict{Any, Any}()
Trivially solvable variables: Dict{Any, Any}()

DEBUG [ODEPEtestwrapper]: Processing solution 1

=== Model: onesp_cubed ===

Found 1 distinct solution clusters:

Cluster 1: 1 similar solutions
Best solution (Error: 0.0):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
x1(t)        |   2.000000 |   2.000000 |   0.000000
a            |   0.100000 |   0.100000 |   0.000000

Best maximum relative error for onesp_cubed (excluding ALL unidentifiable parameters): 0.0

Observables Statistics:
--------------------------------------------------
Variable      | Mean        | Std         | Min         | Max         | Range       | Turns
--------------------------------------------------
y1(t)        |   4.150801 |   1.790872 |   1.785041 |   8.000000 |   6.214959 |          0

Error Statistics for Best Solution:
--------------------------------------------------

Error Statistics by Observable:
--------------------------------------------------
Observable   | Error Type | Mean        | Std         | Min         | Max         | Range
--------------------------------------------------
y1(t)        | Absolute   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y1(t)        | Relative   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000

Detailed Time Series Comparison:
------------------------------------------------------------------------------------------------------------------------
t | y1(t)_act    | y1(t)_pred   | abs_err      | rel_err     
------------------------------------------------------------------------------------------------------------------------
  0.0000 |     8.000000 |     8.000000 |     0.000000 |     0.000000
  0.0500 |     7.880896 |     7.880896 |     0.000000 |     0.000000
  0.1000 |     7.763564 |     7.763564 |     0.000000 |     0.000000
  0.1500 |     7.647980 |     7.647980 |     0.000000 |     0.000000
  0.2000 |     7.534116 |     7.534116 |     0.000000 |     0.000000
  0.2500 |     7.421948 |     7.421948 |     0.000000 |     0.000000
  0.3000 |     7.311449 |     7.311449 |     0.000000 |     0.000000
  0.3500 |     7.202596 |     7.202596 |     0.000000 |     0.000000
  0.4000 |     7.095363 |     7.095363 |     0.000000 |     0.000000
  0.4500 |     6.989727 |     6.989727 |     0.000000 |     0.000000
  0.5000 |     6.885664 |     6.885664 |     0.000000 |     0.000000
  0.5500 |     6.783150 |     6.783150 |     0.000000 |     0.000000
  0.6000 |     6.682162 |     6.682162 |     0.000000 |     0.000000
  0.6500 |     6.582677 |     6.582677 |     0.000000 |     0.000000
  0.7000 |     6.484674 |     6.484674 |     0.000000 |     0.000000
  0.7500 |     6.388130 |     6.388130 |     0.000000 |     0.000000
  0.8000 |     6.293023 |     6.293023 |     0.000000 |     0.000000
  0.8500 |     6.199332 |     6.199332 |     0.000000 |     0.000000
  0.9000 |     6.107036 |     6.107036 |     0.000000 |     0.000000
  0.9500 |     6.016114 |     6.016114 |     0.000000 |     0.000000
  1.0000 |     5.926546 |     5.926546 |     0.000000 |     0.000000
  1.0500 |     5.838311 |     5.838311 |     0.000000 |     0.000000
  1.1000 |     5.751390 |     5.751390 |     0.000000 |     0.000000
  1.1500 |     5.665763 |     5.665763 |     0.000000 |     0.000000
  1.2000 |     5.581411 |     5.581411 |     0.000000 |     0.000000
  1.2500 |     5.498314 |     5.498314 |     0.000000 |     0.000000
  1.3000 |     5.416455 |     5.416455 |     0.000000 |     0.000000
  1.3500 |     5.335814 |     5.335814 |     0.000000 |     0.000000
  1.4000 |     5.256375 |     5.256375 |     0.000000 |     0.000000
  1.4500 |     5.178117 |     5.178117 |     0.000000 |     0.000000
  1.5000 |     5.101025 |     5.101025 |     0.000000 |     0.000000
  1.5500 |     5.025081 |     5.025081 |     0.000000 |     0.000000
  1.6000 |     4.950267 |     4.950267 |     0.000000 |     0.000000
  1.6500 |     4.876567 |     4.876567 |     0.000000 |     0.000000
  1.7000 |     4.803965 |     4.803965 |     0.000000 |     0.000000
  1.7500 |     4.732443 |     4.732443 |     0.000000 |     0.000000
  1.8000 |     4.661986 |     4.661986 |     0.000000 |     0.000000
  1.8500 |     4.592578 |     4.592578 |     0.000000 |     0.000000
  1.9000 |     4.524204 |     4.524204 |     0.000000 |     0.000000
  1.9500 |     4.456847 |     4.456847 |     0.000000 |     0.000000
  2.0000 |     4.390493 |     4.390493 |     0.000000 |     0.000000
  2.0500 |     4.325127 |     4.325127 |     0.000000 |     0.000000
  2.1000 |     4.260734 |     4.260734 |     0.000000 |     0.000000
  2.1500 |     4.197300 |     4.197300 |     0.000000 |     0.000000
  2.2000 |     4.134811 |     4.134811 |     0.000000 |     0.000000
  2.2500 |     4.073251 |     4.073251 |     0.000000 |     0.000000
  2.3000 |     4.012609 |     4.012609 |     0.000000 |     0.000000
  2.3500 |     3.952869 |     3.952869 |     0.000000 |     0.000000
  2.4000 |     3.894018 |     3.894018 |     0.000000 |     0.000000
  2.4500 |     3.836044 |     3.836044 |     0.000000 |     0.000000
  2.5000 |     3.778932 |     3.778932 |     0.000000 |     0.000000
  2.5500 |     3.722671 |     3.722671 |     0.000000 |     0.000000
  2.6000 |     3.667248 |     3.667248 |     0.000000 |     0.000000
  2.6500 |     3.612650 |     3.612650 |     0.000000 |     0.000000
  2.7000 |     3.558865 |     3.558865 |     0.000000 |     0.000000
  2.7500 |     3.505880 |     3.505880 |     0.000000 |     0.000000
  2.8000 |     3.453684 |     3.453684 |     0.000000 |     0.000000
  2.8500 |     3.402266 |     3.402266 |     0.000000 |     0.000000
  2.9000 |     3.351612 |     3.351612 |     0.000000 |     0.000000
  2.9500 |     3.301713 |     3.301713 |     0.000000 |     0.000000
  3.0000 |     3.252557 |     3.252557 |     0.000000 |     0.000000
  3.0500 |     3.204133 |     3.204133 |     0.000000 |     0.000000
  3.1000 |     3.156430 |     3.156430 |     0.000000 |     0.000000
  3.1500 |     3.109437 |     3.109437 |     0.000000 |     0.000000
  3.2000 |     3.063143 |     3.063143 |     0.000000 |     0.000000
  3.2500 |     3.017539 |     3.017539 |     0.000000 |     0.000000
  3.3000 |     2.972614 |     2.972614 |     0.000000 |     0.000000
  3.3500 |     2.928357 |     2.928357 |     0.000000 |     0.000000
  3.4000 |     2.884760 |     2.884760 |     0.000000 |     0.000000
  3.4500 |     2.841811 |     2.841811 |     0.000000 |     0.000000
  3.5000 |     2.799502 |     2.799502 |     0.000000 |     0.000000
  3.5500 |     2.757823 |     2.757823 |     0.000000 |     0.000000
  3.6000 |     2.716764 |     2.716764 |     0.000000 |     0.000000
  3.6500 |     2.676317 |     2.676317 |     0.000000 |     0.000000
  3.7000 |     2.636472 |     2.636472 |     0.000000 |     0.000000
  3.7500 |     2.597220 |     2.597220 |     0.000000 |     0.000000
  3.8000 |     2.558552 |     2.558552 |     0.000000 |     0.000000
  3.8500 |     2.520460 |     2.520460 |     0.000000 |     0.000000
  3.9000 |     2.482936 |     2.482936 |     0.000000 |     0.000000
  3.9500 |     2.445969 |     2.445969 |     0.000000 |     0.000000
  4.0000 |     2.409554 |     2.409554 |     0.000000 |     0.000000
  4.0500 |     2.373680 |     2.373680 |     0.000000 |     0.000000
  4.1000 |     2.338341 |     2.338341 |     0.000000 |     0.000000
  4.1500 |     2.303527 |     2.303527 |     0.000000 |     0.000000
  4.2000 |     2.269232 |     2.269232 |     0.000000 |     0.000000
  4.2500 |     2.235448 |     2.235448 |     0.000000 |     0.000000
  4.3000 |     2.202166 |     2.202166 |     0.000000 |     0.000000
  4.3500 |     2.169380 |     2.169380 |     0.000000 |     0.000000
  4.4000 |     2.137082 |     2.137082 |     0.000000 |     0.000000
  4.4500 |     2.105265 |     2.105265 |     0.000000 |     0.000000
  4.5000 |     2.073922 |     2.073922 |     0.000000 |     0.000000
  4.5500 |     2.043045 |     2.043045 |     0.000000 |     0.000000
  4.6000 |     2.012628 |     2.012628 |     0.000000 |     0.000000
  4.6500 |     1.982664 |     1.982664 |     0.000000 |     0.000000
  4.7000 |     1.953146 |     1.953146 |     0.000000 |     0.000000
  4.7500 |     1.924068 |     1.924068 |     0.000000 |     0.000000
  4.8000 |     1.895422 |     1.895422 |     0.000000 |     0.000000
  4.8500 |     1.867203 |     1.867203 |     0.000000 |     0.000000
  4.9000 |     1.839404 |     1.839404 |     0.000000 |     0.000000
  4.9500 |     1.812019 |     1.812019 |     0.000000 |     0.000000
  5.0000 |     1.785041 |     1.785041 |     0.000000 |     0.000000
------------------------------------------------------------------------------------------------------------------------
Starting model: threesp_cubed

DEBUG [MPHCPE]: Starting parameter estimation...
DEBUG [MPHCPE]: Analyzing identifiability with 2 points
DEBUG [MPHCPE]: Final analysis with 1 points
DEBUG [MPHCPE]: Final unidentifiable dict: Dict{Any, Any}()
DEBUG [MPHCPE]: Final varlist: Num[a, b, c, x1(t), x2(t), x3(t)]
We are trying these points:[50]
Using these observations and their derivatives:
Dict{Int64, Int64} with 3 entries:
  2 => 1
  3 => 1
  1 => 1
total degree: 5832
using monodromy, line 917

Unidentifiability Analysis from MPHCPE:
All unidentifiable variables: Set{Any}()
Unidentifiable variables substitution dictionary: Dict{Any, Any}()
Trivially solvable variables: Dict{Any, Any}()

DEBUG [ODEPEtestwrapper]: Processing solution 1

DEBUG [ODEPEtestwrapper]: Processing solution 2

DEBUG [ODEPEtestwrapper]: Processing solution 3

DEBUG [ODEPEtestwrapper]: Processing solution 4

DEBUG [ODEPEtestwrapper]: Processing solution 5

DEBUG [ODEPEtestwrapper]: Processing solution 6

DEBUG [ODEPEtestwrapper]: Processing solution 7

DEBUG [ODEPEtestwrapper]: Processing solution 8

DEBUG [ODEPEtestwrapper]: Processing solution 9

DEBUG [ODEPEtestwrapper]: Processing solution 10

DEBUG [ODEPEtestwrapper]: Processing solution 11

DEBUG [ODEPEtestwrapper]: Processing solution 12

DEBUG [ODEPEtestwrapper]: Processing solution 13

DEBUG [ODEPEtestwrapper]: Processing solution 14

DEBUG [ODEPEtestwrapper]: Processing solution 15

DEBUG [ODEPEtestwrapper]: Processing solution 16

DEBUG [ODEPEtestwrapper]: Processing solution 17

DEBUG [ODEPEtestwrapper]: Processing solution 18

DEBUG [ODEPEtestwrapper]: Processing solution 19

DEBUG [ODEPEtestwrapper]: Processing solution 20

DEBUG [ODEPEtestwrapper]: Processing solution 21

DEBUG [ODEPEtestwrapper]: Processing solution 22

DEBUG [ODEPEtestwrapper]: Processing solution 23

DEBUG [ODEPEtestwrapper]: Processing solution 24

DEBUG [ODEPEtestwrapper]: Processing solution 25

DEBUG [ODEPEtestwrapper]: Processing solution 26

DEBUG [ODEPEtestwrapper]: Processing solution 27

=== Model: threesp_cubed ===

Found 2 distinct solution clusters:

Cluster 1: 2 similar solutions
Best solution (Error: 0.475501):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
x1(t)        |   2.000000 |   1.526420 |   0.236790
x2(t)        |   3.000000 |  -1.445184 |   1.481728
x3(t)        |   4.000000 |   3.835552 |   0.041112
a            |   0.100000 |  -0.050000 |   1.500000
b            |   0.200000 |  -0.100000 |   1.500000
c            |   0.300000 |   0.300000 |   0.000000

Cluster 2: 1 similar solutions
Best solution (Error: 0.0):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
x1(t)        |   2.000000 |   2.000000 |   0.000000
x2(t)        |   3.000000 |   3.000000 |   0.000000
x3(t)        |   4.000000 |   4.000000 |   0.000000
a            |   0.100000 |   0.100000 |   0.000000
b            |   0.200000 |   0.200000 |   0.000000
c            |   0.300000 |   0.300000 |   0.000000

Best maximum relative error for threesp_cubed (excluding ALL unidentifiable parameters): 0.0

Observables Statistics:
--------------------------------------------------
Variable      | Mean        | Std         | Min         | Max         | Range       | Turns
--------------------------------------------------
y1(t)        |   3.121225 |   2.066342 |   0.712173 |   8.000000 |   7.287827 |          0
y2(t)        |  11.967677 |   6.479010 |   4.180223 |  27.000000 |  22.819777 |          0
y3(t)        |  25.650435 |  16.099717 |   7.037470 |  64.000000 |  56.962530 |          0

Error Statistics for Best Solution:
--------------------------------------------------

Error Statistics by Observable:
--------------------------------------------------
Observable   | Error Type | Mean        | Std         | Min         | Max         | Range
--------------------------------------------------
y1(t)        | Absolute   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y1(t)        | Relative   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y2(t)        | Absolute   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y2(t)        | Relative   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y3(t)        | Absolute   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y3(t)        | Relative   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000

Detailed Time Series Comparison:
------------------------------------------------------------------------------------------------------------------------
t | y1(t)_act    | y1(t)_pred   | abs_err      | rel_err      | y2(t)_act    | y2(t)_pred   | abs_err      | rel_err      | y3(t)_act    | y3(t)_pred   | abs_err      | rel_err     
------------------------------------------------------------------------------------------------------------------------
  0.0000 |     8.000000 |     8.000000 |     0.000000 |     0.000000 |    27.000000 |    27.000000 |     0.000000 |     0.000000 |    64.000000 |    64.000000 |     0.000000 |     0.000000
  0.0500 |     7.821936 |     7.821936 |     0.000000 |     0.000000 |    26.465586 |    26.465586 |     0.000000 |     0.000000 |    62.576081 |    62.576081 |     0.000000 |     0.000000
  0.1000 |     7.647690 |     7.647690 |     0.000000 |     0.000000 |    25.942187 |    25.942187 |     0.000000 |     0.000000 |    61.183850 |    61.183850 |     0.000000 |     0.000000
  0.1500 |     7.477181 |     7.477181 |     0.000000 |     0.000000 |    25.429575 |    25.429575 |     0.000000 |     0.000000 |    59.822613 |    59.822613 |     0.000000 |     0.000000
  0.2000 |     7.310331 |     7.310331 |     0.000000 |     0.000000 |    24.927525 |    24.927525 |     0.000000 |     0.000000 |    58.491686 |    58.491686 |     0.000000 |     0.000000
  0.2500 |     7.147061 |     7.147061 |     0.000000 |     0.000000 |    24.435815 |    24.435815 |     0.000000 |     0.000000 |    57.190403 |    57.190403 |     0.000000 |     0.000000
  0.3000 |     6.987296 |     6.987296 |     0.000000 |     0.000000 |    23.954232 |    23.954232 |     0.000000 |     0.000000 |    55.918111 |    55.918111 |     0.000000 |     0.000000
  0.3500 |     6.830963 |     6.830963 |     0.000000 |     0.000000 |    23.482564 |    23.482564 |     0.000000 |     0.000000 |    54.674173 |    54.674173 |     0.000000 |     0.000000
  0.4000 |     6.677988 |     6.677988 |     0.000000 |     0.000000 |    23.020604 |    23.020604 |     0.000000 |     0.000000 |    53.457965 |    53.457965 |     0.000000 |     0.000000
  0.4500 |     6.528301 |     6.528301 |     0.000000 |     0.000000 |    22.568150 |    22.568150 |     0.000000 |     0.000000 |    52.268875 |    52.268875 |     0.000000 |     0.000000
  0.5000 |     6.381832 |     6.381832 |     0.000000 |     0.000000 |    22.125005 |    22.125005 |     0.000000 |     0.000000 |    51.106306 |    51.106306 |     0.000000 |     0.000000
  0.5500 |     6.238514 |     6.238514 |     0.000000 |     0.000000 |    21.690974 |    21.690974 |     0.000000 |     0.000000 |    49.969673 |    49.969673 |     0.000000 |     0.000000
  0.6000 |     6.098279 |     6.098279 |     0.000000 |     0.000000 |    21.265868 |    21.265868 |     0.000000 |     0.000000 |    48.858406 |    48.858406 |     0.000000 |     0.000000
  0.6500 |     5.961062 |     5.961062 |     0.000000 |     0.000000 |    20.849500 |    20.849500 |     0.000000 |     0.000000 |    47.771944 |    47.771944 |     0.000000 |     0.000000
  0.7000 |     5.826800 |     5.826800 |     0.000000 |     0.000000 |    20.441689 |    20.441689 |     0.000000 |     0.000000 |    46.709740 |    46.709740 |     0.000000 |     0.000000
  0.7500 |     5.695430 |     5.695430 |     0.000000 |     0.000000 |    20.042257 |    20.042257 |     0.000000 |     0.000000 |    45.671260 |    45.671260 |     0.000000 |     0.000000
  0.8000 |     5.566891 |     5.566891 |     0.000000 |     0.000000 |    19.651030 |    19.651030 |     0.000000 |     0.000000 |    44.655980 |    44.655980 |     0.000000 |     0.000000
  0.8500 |     5.441123 |     5.441123 |     0.000000 |     0.000000 |    19.267836 |    19.267836 |     0.000000 |     0.000000 |    43.663387 |    43.663387 |     0.000000 |     0.000000
  0.9000 |     5.318067 |     5.318067 |     0.000000 |     0.000000 |    18.892509 |    18.892509 |     0.000000 |     0.000000 |    42.692980 |    42.692980 |     0.000000 |     0.000000
  0.9500 |     5.197666 |     5.197666 |     0.000000 |     0.000000 |    18.524885 |    18.524885 |     0.000000 |     0.000000 |    41.744270 |    41.744270 |     0.000000 |     0.000000
  1.0000 |     5.079865 |     5.079865 |     0.000000 |     0.000000 |    18.164803 |    18.164803 |     0.000000 |     0.000000 |    40.816777 |    40.816777 |     0.000000 |     0.000000
  1.0500 |     4.964607 |     4.964607 |     0.000000 |     0.000000 |    17.812107 |    17.812107 |     0.000000 |     0.000000 |    39.910032 |    39.910032 |     0.000000 |     0.000000
  1.1000 |     4.851839 |     4.851839 |     0.000000 |     0.000000 |    17.466644 |    17.466644 |     0.000000 |     0.000000 |    39.023577 |    39.023577 |     0.000000 |     0.000000
  1.1500 |     4.741509 |     4.741509 |     0.000000 |     0.000000 |    17.128262 |    17.128262 |     0.000000 |     0.000000 |    38.156962 |    38.156962 |     0.000000 |     0.000000
  1.2000 |     4.633564 |     4.633564 |     0.000000 |     0.000000 |    16.796815 |    16.796815 |     0.000000 |     0.000000 |    37.309749 |    37.309749 |     0.000000 |     0.000000
  1.2500 |     4.527955 |     4.527955 |     0.000000 |     0.000000 |    16.472158 |    16.472158 |     0.000000 |     0.000000 |    36.481508 |    36.481508 |     0.000000 |     0.000000
  1.3000 |     4.424631 |     4.424631 |     0.000000 |     0.000000 |    16.154151 |    16.154151 |     0.000000 |     0.000000 |    35.671820 |    35.671820 |     0.000000 |     0.000000
  1.3500 |     4.323545 |     4.323545 |     0.000000 |     0.000000 |    15.842655 |    15.842655 |     0.000000 |     0.000000 |    34.880273 |    34.880273 |     0.000000 |     0.000000
  1.4000 |     4.224649 |     4.224649 |     0.000000 |     0.000000 |    15.537535 |    15.537535 |     0.000000 |     0.000000 |    34.106466 |    34.106466 |     0.000000 |     0.000000
  1.4500 |     4.127897 |     4.127897 |     0.000000 |     0.000000 |    15.238659 |    15.238659 |     0.000000 |     0.000000 |    33.350006 |    33.350006 |     0.000000 |     0.000000
  1.5000 |     4.033243 |     4.033243 |     0.000000 |     0.000000 |    14.945896 |    14.945896 |     0.000000 |     0.000000 |    32.610507 |    32.610507 |     0.000000 |     0.000000
  1.5500 |     3.940643 |     3.940643 |     0.000000 |     0.000000 |    14.659121 |    14.659121 |     0.000000 |     0.000000 |    31.887596 |    31.887596 |     0.000000 |     0.000000
  1.6000 |     3.850052 |     3.850052 |     0.000000 |     0.000000 |    14.378208 |    14.378208 |     0.000000 |     0.000000 |    31.180902 |    31.180902 |     0.000000 |     0.000000
  1.6500 |     3.761430 |     3.761430 |     0.000000 |     0.000000 |    14.103036 |    14.103036 |     0.000000 |     0.000000 |    30.490067 |    30.490067 |     0.000000 |     0.000000
  1.7000 |     3.674734 |     3.674734 |     0.000000 |     0.000000 |    13.833485 |    13.833485 |     0.000000 |     0.000000 |    29.814739 |    29.814739 |     0.000000 |     0.000000
  1.7500 |     3.589923 |     3.589923 |     0.000000 |     0.000000 |    13.569440 |    13.569440 |     0.000000 |     0.000000 |    29.154573 |    29.154573 |     0.000000 |     0.000000
  1.8000 |     3.506957 |     3.506957 |     0.000000 |     0.000000 |    13.310786 |    13.310786 |     0.000000 |     0.000000 |    28.509232 |    28.509232 |     0.000000 |     0.000000
  1.8500 |     3.425797 |     3.425797 |     0.000000 |     0.000000 |    13.057410 |    13.057410 |     0.000000 |     0.000000 |    27.878389 |    27.878389 |     0.000000 |     0.000000
  1.9000 |     3.346405 |     3.346405 |     0.000000 |     0.000000 |    12.809205 |    12.809205 |     0.000000 |     0.000000 |    27.261719 |    27.261719 |     0.000000 |     0.000000
  1.9500 |     3.268743 |     3.268743 |     0.000000 |     0.000000 |    12.566061 |    12.566061 |     0.000000 |     0.000000 |    26.658909 |    26.658909 |     0.000000 |     0.000000
  2.0000 |     3.192775 |     3.192775 |     0.000000 |     0.000000 |    12.327875 |    12.327875 |     0.000000 |     0.000000 |    26.069650 |    26.069650 |     0.000000 |     0.000000
  2.0500 |     3.118464 |     3.118464 |     0.000000 |     0.000000 |    12.094544 |    12.094544 |     0.000000 |     0.000000 |    25.493641 |    25.493641 |     0.000000 |     0.000000
  2.1000 |     3.045776 |     3.045776 |     0.000000 |     0.000000 |    11.865967 |    11.865967 |     0.000000 |     0.000000 |    24.930587 |    24.930587 |     0.000000 |     0.000000
  2.1500 |     2.974677 |     2.974677 |     0.000000 |     0.000000 |    11.642046 |    11.642046 |     0.000000 |     0.000000 |    24.380200 |    24.380200 |     0.000000 |     0.000000
  2.2000 |     2.905131 |     2.905131 |     0.000000 |     0.000000 |    11.422683 |    11.422683 |     0.000000 |     0.000000 |    23.842198 |    23.842198 |     0.000000 |     0.000000
  2.2500 |     2.837107 |     2.837107 |     0.000000 |     0.000000 |    11.207786 |    11.207786 |     0.000000 |     0.000000 |    23.316305 |    23.316305 |     0.000000 |     0.000000
  2.3000 |     2.770572 |     2.770572 |     0.000000 |     0.000000 |    10.997260 |    10.997260 |     0.000000 |     0.000000 |    22.802250 |    22.802250 |     0.000000 |     0.000000
  2.3500 |     2.705495 |     2.705495 |     0.000000 |     0.000000 |    10.791017 |    10.791017 |     0.000000 |     0.000000 |    22.299772 |    22.299772 |     0.000000 |     0.000000
  2.4000 |     2.641844 |     2.641844 |     0.000000 |     0.000000 |    10.588967 |    10.588967 |     0.000000 |     0.000000 |    21.808611 |    21.808611 |     0.000000 |     0.000000
  2.4500 |     2.579589 |     2.579589 |     0.000000 |     0.000000 |    10.391023 |    10.391023 |     0.000000 |     0.000000 |    21.328515 |    21.328515 |     0.000000 |     0.000000
  2.5000 |     2.518701 |     2.518701 |     0.000000 |     0.000000 |    10.197100 |    10.197100 |     0.000000 |     0.000000 |    20.859238 |    20.859238 |     0.000000 |     0.000000
  2.5500 |     2.459151 |     2.459151 |     0.000000 |     0.000000 |    10.007116 |    10.007116 |     0.000000 |     0.000000 |    20.400537 |    20.400537 |     0.000000 |     0.000000
  2.6000 |     2.400909 |     2.400909 |     0.000000 |     0.000000 |     9.820989 |     9.820989 |     0.000000 |     0.000000 |    19.952178 |    19.952178 |     0.000000 |     0.000000
  2.6500 |     2.343949 |     2.343949 |     0.000000 |     0.000000 |     9.638639 |     9.638639 |     0.000000 |     0.000000 |    19.513929 |    19.513929 |     0.000000 |     0.000000
  2.7000 |     2.288243 |     2.288243 |     0.000000 |     0.000000 |     9.459987 |     9.459987 |     0.000000 |     0.000000 |    19.085564 |    19.085564 |     0.000000 |     0.000000
  2.7500 |     2.233764 |     2.233764 |     0.000000 |     0.000000 |     9.284959 |     9.284959 |     0.000000 |     0.000000 |    18.666863 |    18.666863 |     0.000000 |     0.000000
  2.8000 |     2.180487 |     2.180487 |     0.000000 |     0.000000 |     9.113478 |     9.113478 |     0.000000 |     0.000000 |    18.257609 |    18.257609 |     0.000000 |     0.000000
  2.8500 |     2.128386 |     2.128386 |     0.000000 |     0.000000 |     8.945472 |     8.945472 |     0.000000 |     0.000000 |    17.857593 |    17.857593 |     0.000000 |     0.000000
  2.9000 |     2.077435 |     2.077435 |     0.000000 |     0.000000 |     8.780869 |     8.780869 |     0.000000 |     0.000000 |    17.466606 |    17.466606 |     0.000000 |     0.000000
  2.9500 |     2.027611 |     2.027611 |     0.000000 |     0.000000 |     8.619598 |     8.619598 |     0.000000 |     0.000000 |    17.084447 |    17.084447 |     0.000000 |     0.000000
  3.0000 |     1.978888 |     1.978888 |     0.000000 |     0.000000 |     8.461592 |     8.461592 |     0.000000 |     0.000000 |    16.710918 |    16.710918 |     0.000000 |     0.000000
  3.0500 |     1.931245 |     1.931245 |     0.000000 |     0.000000 |     8.306781 |     8.306781 |     0.000000 |     0.000000 |    16.345828 |    16.345828 |     0.000000 |     0.000000
  3.1000 |     1.884658 |     1.884658 |     0.000000 |     0.000000 |     8.155101 |     8.155101 |     0.000000 |     0.000000 |    15.988985 |    15.988985 |     0.000000 |     0.000000
  3.1500 |     1.839104 |     1.839104 |     0.000000 |     0.000000 |     8.006488 |     8.006488 |     0.000000 |     0.000000 |    15.640207 |    15.640207 |     0.000000 |     0.000000
  3.2000 |     1.794561 |     1.794561 |     0.000000 |     0.000000 |     7.860877 |     7.860877 |     0.000000 |     0.000000 |    15.299311 |    15.299311 |     0.000000 |     0.000000
  3.2500 |     1.751009 |     1.751009 |     0.000000 |     0.000000 |     7.718207 |     7.718207 |     0.000000 |     0.000000 |    14.966123 |    14.966123 |     0.000000 |     0.000000
  3.3000 |     1.708425 |     1.708425 |     0.000000 |     0.000000 |     7.578418 |     7.578418 |     0.000000 |     0.000000 |    14.640468 |    14.640468 |     0.000000 |     0.000000
  3.3500 |     1.666789 |     1.666789 |     0.000000 |     0.000000 |     7.441450 |     7.441450 |     0.000000 |     0.000000 |    14.322178 |    14.322178 |     0.000000 |     0.000000
  3.4000 |     1.626081 |     1.626081 |     0.000000 |     0.000000 |     7.307244 |     7.307244 |     0.000000 |     0.000000 |    14.011088 |    14.011088 |     0.000000 |     0.000000
  3.4500 |     1.586282 |     1.586282 |     0.000000 |     0.000000 |     7.175745 |     7.175745 |     0.000000 |     0.000000 |    13.707036 |    13.707036 |     0.000000 |     0.000000
  3.5000 |     1.547371 |     1.547371 |     0.000000 |     0.000000 |     7.046897 |     7.046897 |     0.000000 |     0.000000 |    13.409864 |    13.409864 |     0.000000 |     0.000000
  3.5500 |     1.509330 |     1.509330 |     0.000000 |     0.000000 |     6.920645 |     6.920645 |     0.000000 |     0.000000 |    13.119419 |    13.119419 |     0.000000 |     0.000000
  3.6000 |     1.472140 |     1.472140 |     0.000000 |     0.000000 |     6.796935 |     6.796935 |     0.000000 |     0.000000 |    12.835548 |    12.835548 |     0.000000 |     0.000000
  3.6500 |     1.435784 |     1.435784 |     0.000000 |     0.000000 |     6.675715 |     6.675715 |     0.000000 |     0.000000 |    12.558104 |    12.558104 |     0.000000 |     0.000000
  3.7000 |     1.400242 |     1.400242 |     0.000000 |     0.000000 |     6.556935 |     6.556935 |     0.000000 |     0.000000 |    12.286943 |    12.286943 |     0.000000 |     0.000000
  3.7500 |     1.365499 |     1.365499 |     0.000000 |     0.000000 |     6.440545 |     6.440545 |     0.000000 |     0.000000 |    12.021924 |    12.021924 |     0.000000 |     0.000000
  3.8000 |     1.331537 |     1.331537 |     0.000000 |     0.000000 |     6.326494 |     6.326494 |     0.000000 |     0.000000 |    11.762909 |    11.762909 |     0.000000 |     0.000000
  3.8500 |     1.298339 |     1.298339 |     0.000000 |     0.000000 |     6.214736 |     6.214736 |     0.000000 |     0.000000 |    11.509762 |    11.509762 |     0.000000 |     0.000000
  3.9000 |     1.265889 |     1.265889 |     0.000000 |     0.000000 |     6.105222 |     6.105222 |     0.000000 |     0.000000 |    11.262351 |    11.262351 |     0.000000 |     0.000000
  3.9500 |     1.234170 |     1.234170 |     0.000000 |     0.000000 |     5.997908 |     5.997908 |     0.000000 |     0.000000 |    11.020549 |    11.020549 |     0.000000 |     0.000000
  4.0000 |     1.203169 |     1.203169 |     0.000000 |     0.000000 |     5.892748 |     5.892748 |     0.000000 |     0.000000 |    10.784227 |    10.784227 |     0.000000 |     0.000000
  4.0500 |     1.172868 |     1.172868 |     0.000000 |     0.000000 |     5.789698 |     5.789698 |     0.000000 |     0.000000 |    10.553264 |    10.553264 |     0.000000 |     0.000000
  4.1000 |     1.143253 |     1.143253 |     0.000000 |     0.000000 |     5.688714 |     5.688714 |     0.000000 |     0.000000 |    10.327537 |    10.327537 |     0.000000 |     0.000000
  4.1500 |     1.114309 |     1.114309 |     0.000000 |     0.000000 |     5.589755 |     5.589755 |     0.000000 |     0.000000 |    10.106931 |    10.106931 |     0.000000 |     0.000000
  4.2000 |     1.086022 |     1.086022 |     0.000000 |     0.000000 |     5.492779 |     5.492779 |     0.000000 |     0.000000 |     9.891328 |     9.891328 |     0.000000 |     0.000000
  4.2500 |     1.058379 |     1.058379 |     0.000000 |     0.000000 |     5.397746 |     5.397746 |     0.000000 |     0.000000 |     9.680617 |     9.680617 |     0.000000 |     0.000000
  4.3000 |     1.031364 |     1.031364 |     0.000000 |     0.000000 |     5.304615 |     5.304615 |     0.000000 |     0.000000 |     9.474686 |     9.474686 |     0.000000 |     0.000000
  4.3500 |     1.004965 |     1.004965 |     0.000000 |     0.000000 |     5.213348 |     5.213348 |     0.000000 |     0.000000 |     9.273429 |     9.273429 |     0.000000 |     0.000000
  4.4000 |     0.979169 |     0.979169 |     0.000000 |     0.000000 |     5.123908 |     5.123908 |     0.000000 |     0.000000 |     9.076740 |     9.076740 |     0.000000 |     0.000000
  4.4500 |     0.953962 |     0.953962 |     0.000000 |     0.000000 |     5.036255 |     5.036255 |     0.000000 |     0.000000 |     8.884516 |     8.884516 |     0.000000 |     0.000000
  4.5000 |     0.929333 |     0.929333 |     0.000000 |     0.000000 |     4.950355 |     4.950355 |     0.000000 |     0.000000 |     8.696656 |     8.696656 |     0.000000 |     0.000000
  4.5500 |     0.905267 |     0.905267 |     0.000000 |     0.000000 |     4.866172 |     4.866172 |     0.000000 |     0.000000 |     8.513061 |     8.513061 |     0.000000 |     0.000000
  4.6000 |     0.881755 |     0.881755 |     0.000000 |     0.000000 |     4.783670 |     4.783670 |     0.000000 |     0.000000 |     8.333636 |     8.333636 |     0.000000 |     0.000000
  4.6500 |     0.858783 |     0.858783 |     0.000000 |     0.000000 |     4.702815 |     4.702815 |     0.000000 |     0.000000 |     8.158286 |     8.158286 |     0.000000 |     0.000000
  4.7000 |     0.836340 |     0.836340 |     0.000000 |     0.000000 |     4.623573 |     4.623573 |     0.000000 |     0.000000 |     7.986920 |     7.986920 |     0.000000 |     0.000000
  4.7500 |     0.814414 |     0.814414 |     0.000000 |     0.000000 |     4.545913 |     4.545913 |     0.000000 |     0.000000 |     7.819447 |     7.819447 |     0.000000 |     0.000000
  4.8000 |     0.792996 |     0.792996 |     0.000000 |     0.000000 |     4.469801 |     4.469801 |     0.000000 |     0.000000 |     7.655779 |     7.655779 |     0.000000 |     0.000000
  4.8500 |     0.772073 |     0.772073 |     0.000000 |     0.000000 |     4.395207 |     4.395207 |     0.000000 |     0.000000 |     7.495830 |     7.495830 |     0.000000 |     0.000000
  4.9000 |     0.751635 |     0.751635 |     0.000000 |     0.000000 |     4.322099 |     4.322099 |     0.000000 |     0.000000 |     7.339517 |     7.339517 |     0.000000 |     0.000000
  4.9500 |     0.731672 |     0.731672 |     0.000000 |     0.000000 |     4.250448 |     4.250448 |     0.000000 |     0.000000 |     7.186757 |     7.186757 |     0.000000 |     0.000000
  5.0000 |     0.712173 |     0.712173 |     0.000000 |     0.000000 |     4.180223 |     4.180223 |     0.000000 |     0.000000 |     7.037470 |     7.037470 |     0.000000 |     0.000000
------------------------------------------------------------------------------------------------------------------------
Starting model: substr_test

DEBUG [MPHCPE]: Starting parameter estimation...
DEBUG [MPHCPE]: Analyzing identifiability with 2 points
DEBUG [MPHCPE]: Final analysis with 1 points
DEBUG [MPHCPE]: Final unidentifiable dict: Dict{Any, Any}()
DEBUG [MPHCPE]: Final varlist: Num[a, b, beta, x1(t), x2(t), x3(t)]
We are trying these points:[66]
Using these observations and their derivatives:
Dict{Int64, Int64} with 3 entries:
  2 => 1
  3 => 1
  1 => 1
total degree: 5
1-element Vector{Vector{ComplexF64}}:
 [0.10000000000000094 + 0.0im, 0.20000000000007825 + 0.0im, 0.299999999998947 + 0.0im]

Unidentifiability Analysis from MPHCPE:
All unidentifiable variables: Set{Any}()
Unidentifiable variables substitution dictionary: Dict{Any, Any}()
Trivially solvable variables: Dict{Any, Any}(_t66_x3_t_ => 4.001560304239551, _t66_x1ˍt_t_ => -0.3943374384026397, _t66_x3ˍt_t_ => 0.00048018723650744555, _t66_x1_t_ => 0.8514101442327736, _t66_x2_t_ => 3.94337438402636, _t66_x2ˍt_t_ => 0.17028202884662136)

DEBUG [ODEPEtestwrapper]: Processing solution 1

=== Model: substr_test ===

Found 1 distinct solution clusters:

Cluster 1: 1 similar solutions
Best solution (Error: 0.0):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
x1(t)        |   2.000000 |   2.000000 |   0.000000
x2(t)        |   3.000000 |   3.000000 |   0.000000
x3(t)        |   4.000000 |   4.000000 |   0.000000
a            |   0.100000 |   0.100000 |   0.000000
b            |   0.200000 |   0.200000 |   0.000000
beta         |   0.300000 |   0.300000 |   0.000000

Best maximum relative error for substr_test (excluding ALL unidentifiable parameters): 0.0

Observables Statistics:
--------------------------------------------------
Variable      | Mean        | Std         | Min         | Max         | Range       | Turns
--------------------------------------------------
y1(t)        |   1.117715 |   0.549167 |   0.142401 |   2.000000 |   1.857599 |          0
y2(t)        |   3.713637 |   0.338029 |   3.000000 |   4.118185 |   1.118185 |          0
y3(t)        |   4.001200 |   0.000703 |   4.000000 |   4.002401 |   0.002401 |          0

Error Statistics for Best Solution:
--------------------------------------------------

Error Statistics by Observable:
--------------------------------------------------
Observable   | Error Type | Mean        | Std         | Min         | Max         | Range
--------------------------------------------------
y1(t)        | Absolute   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y1(t)        | Relative   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y2(t)        | Absolute   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y2(t)        | Relative   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y3(t)        | Absolute   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y3(t)        | Relative   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000

Detailed Time Series Comparison:
------------------------------------------------------------------------------------------------------------------------
t | y1(t)_act    | y1(t)_pred   | abs_err      | rel_err      | y2(t)_act    | y2(t)_pred   | abs_err      | rel_err      | y3(t)_act    | y3(t)_pred   | abs_err      | rel_err     
------------------------------------------------------------------------------------------------------------------------
  0.0000 |     2.000000 |     2.000000 |     0.000000 |     0.000000 |     3.000000 |     3.000000 |     0.000000 |     0.000000 |     4.000000 |     4.000000 |     0.000000 |     0.000000
  0.0500 |     1.984950 |     1.984950 |     0.000000 |     0.000000 |     3.019925 |     3.019925 |     0.000000 |     0.000000 |     4.000024 |     4.000024 |     0.000000 |     0.000000
  0.1000 |     1.969801 |     1.969801 |     0.000000 |     0.000000 |     3.039699 |     3.039699 |     0.000000 |     0.000000 |     4.000048 |     4.000048 |     0.000000 |     0.000000
  0.1500 |     1.954553 |     1.954553 |     0.000000 |     0.000000 |     3.059321 |     3.059321 |     0.000000 |     0.000000 |     4.000072 |     4.000072 |     0.000000 |     0.000000
  0.2000 |     1.939208 |     1.939208 |     0.000000 |     0.000000 |     3.078789 |     3.078789 |     0.000000 |     0.000000 |     4.000096 |     4.000096 |     0.000000 |     0.000000
  0.2500 |     1.923766 |     1.923766 |     0.000000 |     0.000000 |     3.098104 |     3.098104 |     0.000000 |     0.000000 |     4.000120 |     4.000120 |     0.000000 |     0.000000
  0.3000 |     1.908227 |     1.908227 |     0.000000 |     0.000000 |     3.117264 |     3.117264 |     0.000000 |     0.000000 |     4.000144 |     4.000144 |     0.000000 |     0.000000
  0.3500 |     1.892593 |     1.892593 |     0.000000 |     0.000000 |     3.136269 |     3.136269 |     0.000000 |     0.000000 |     4.000168 |     4.000168 |     0.000000 |     0.000000
  0.4000 |     1.876865 |     1.876865 |     0.000000 |     0.000000 |     3.155116 |     3.155116 |     0.000000 |     0.000000 |     4.000192 |     4.000192 |     0.000000 |     0.000000
  0.4500 |     1.861042 |     1.861042 |     0.000000 |     0.000000 |     3.173806 |     3.173806 |     0.000000 |     0.000000 |     4.000216 |     4.000216 |     0.000000 |     0.000000
  0.5000 |     1.845127 |     1.845127 |     0.000000 |     0.000000 |     3.192336 |     3.192336 |     0.000000 |     0.000000 |     4.000240 |     4.000240 |     0.000000 |     0.000000
  0.5500 |     1.829119 |     1.829119 |     0.000000 |     0.000000 |     3.210708 |     3.210708 |     0.000000 |     0.000000 |     4.000264 |     4.000264 |     0.000000 |     0.000000
  0.6000 |     1.813020 |     1.813020 |     0.000000 |     0.000000 |     3.228919 |     3.228919 |     0.000000 |     0.000000 |     4.000288 |     4.000288 |     0.000000 |     0.000000
  0.6500 |     1.796830 |     1.796830 |     0.000000 |     0.000000 |     3.246968 |     3.246968 |     0.000000 |     0.000000 |     4.000312 |     4.000312 |     0.000000 |     0.000000
  0.7000 |     1.780551 |     1.780551 |     0.000000 |     0.000000 |     3.264855 |     3.264855 |     0.000000 |     0.000000 |     4.000336 |     4.000336 |     0.000000 |     0.000000
  0.7500 |     1.764182 |     1.764182 |     0.000000 |     0.000000 |     3.282579 |     3.282579 |     0.000000 |     0.000000 |     4.000360 |     4.000360 |     0.000000 |     0.000000
  0.8000 |     1.747725 |     1.747725 |     0.000000 |     0.000000 |     3.300138 |     3.300138 |     0.000000 |     0.000000 |     4.000384 |     4.000384 |     0.000000 |     0.000000
  0.8500 |     1.731181 |     1.731181 |     0.000000 |     0.000000 |     3.317533 |     3.317533 |     0.000000 |     0.000000 |     4.000408 |     4.000408 |     0.000000 |     0.000000
  0.9000 |     1.714550 |     1.714550 |     0.000000 |     0.000000 |     3.334762 |     3.334762 |     0.000000 |     0.000000 |     4.000432 |     4.000432 |     0.000000 |     0.000000
  0.9500 |     1.697834 |     1.697834 |     0.000000 |     0.000000 |     3.351824 |     3.351824 |     0.000000 |     0.000000 |     4.000456 |     4.000456 |     0.000000 |     0.000000
  1.0000 |     1.681032 |     1.681032 |     0.000000 |     0.000000 |     3.368718 |     3.368718 |     0.000000 |     0.000000 |     4.000480 |     4.000480 |     0.000000 |     0.000000
  1.0500 |     1.664147 |     1.664147 |     0.000000 |     0.000000 |     3.385444 |     3.385444 |     0.000000 |     0.000000 |     4.000504 |     4.000504 |     0.000000 |     0.000000
  1.1000 |     1.647178 |     1.647178 |     0.000000 |     0.000000 |     3.402001 |     3.402001 |     0.000000 |     0.000000 |     4.000528 |     4.000528 |     0.000000 |     0.000000
  1.1500 |     1.630127 |     1.630127 |     0.000000 |     0.000000 |     3.418387 |     3.418387 |     0.000000 |     0.000000 |     4.000552 |     4.000552 |     0.000000 |     0.000000
  1.2000 |     1.612995 |     1.612995 |     0.000000 |     0.000000 |     3.434603 |     3.434603 |     0.000000 |     0.000000 |     4.000576 |     4.000576 |     0.000000 |     0.000000
  1.2500 |     1.595781 |     1.595781 |     0.000000 |     0.000000 |     3.450647 |     3.450647 |     0.000000 |     0.000000 |     4.000600 |     4.000600 |     0.000000 |     0.000000
  1.3000 |     1.578488 |     1.578488 |     0.000000 |     0.000000 |     3.466518 |     3.466518 |     0.000000 |     0.000000 |     4.000624 |     4.000624 |     0.000000 |     0.000000
  1.3500 |     1.561116 |     1.561116 |     0.000000 |     0.000000 |     3.482216 |     3.482216 |     0.000000 |     0.000000 |     4.000648 |     4.000648 |     0.000000 |     0.000000
  1.4000 |     1.543667 |     1.543667 |     0.000000 |     0.000000 |     3.497740 |     3.497740 |     0.000000 |     0.000000 |     4.000672 |     4.000672 |     0.000000 |     0.000000
  1.4500 |     1.526139 |     1.526139 |     0.000000 |     0.000000 |     3.513089 |     3.513089 |     0.000000 |     0.000000 |     4.000696 |     4.000696 |     0.000000 |     0.000000
  1.5000 |     1.508536 |     1.508536 |     0.000000 |     0.000000 |     3.528263 |     3.528263 |     0.000000 |     0.000000 |     4.000720 |     4.000720 |     0.000000 |     0.000000
  1.5500 |     1.490857 |     1.490857 |     0.000000 |     0.000000 |     3.543260 |     3.543260 |     0.000000 |     0.000000 |     4.000744 |     4.000744 |     0.000000 |     0.000000
  1.6000 |     1.473104 |     1.473104 |     0.000000 |     0.000000 |     3.558080 |     3.558080 |     0.000000 |     0.000000 |     4.000768 |     4.000768 |     0.000000 |     0.000000
  1.6500 |     1.455277 |     1.455277 |     0.000000 |     0.000000 |     3.572722 |     3.572722 |     0.000000 |     0.000000 |     4.000792 |     4.000792 |     0.000000 |     0.000000
  1.7000 |     1.437377 |     1.437377 |     0.000000 |     0.000000 |     3.587185 |     3.587185 |     0.000000 |     0.000000 |     4.000816 |     4.000816 |     0.000000 |     0.000000
  1.7500 |     1.419405 |     1.419405 |     0.000000 |     0.000000 |     3.601469 |     3.601469 |     0.000000 |     0.000000 |     4.000840 |     4.000840 |     0.000000 |     0.000000
  1.8000 |     1.401362 |     1.401362 |     0.000000 |     0.000000 |     3.615573 |     3.615573 |     0.000000 |     0.000000 |     4.000864 |     4.000864 |     0.000000 |     0.000000
  1.8500 |     1.383250 |     1.383250 |     0.000000 |     0.000000 |     3.629496 |     3.629496 |     0.000000 |     0.000000 |     4.000888 |     4.000888 |     0.000000 |     0.000000
  1.9000 |     1.365068 |     1.365068 |     0.000000 |     0.000000 |     3.643238 |     3.643238 |     0.000000 |     0.000000 |     4.000912 |     4.000912 |     0.000000 |     0.000000
  1.9500 |     1.346817 |     1.346817 |     0.000000 |     0.000000 |     3.656797 |     3.656797 |     0.000000 |     0.000000 |     4.000936 |     4.000936 |     0.000000 |     0.000000
  2.0000 |     1.328500 |     1.328500 |     0.000000 |     0.000000 |     3.670174 |     3.670174 |     0.000000 |     0.000000 |     4.000960 |     4.000960 |     0.000000 |     0.000000
  2.0500 |     1.310116 |     1.310116 |     0.000000 |     0.000000 |     3.683367 |     3.683367 |     0.000000 |     0.000000 |     4.000984 |     4.000984 |     0.000000 |     0.000000
  2.1000 |     1.291667 |     1.291667 |     0.000000 |     0.000000 |     3.696376 |     3.696376 |     0.000000 |     0.000000 |     4.001008 |     4.001008 |     0.000000 |     0.000000
  2.1500 |     1.273153 |     1.273153 |     0.000000 |     0.000000 |     3.709200 |     3.709200 |     0.000000 |     0.000000 |     4.001032 |     4.001032 |     0.000000 |     0.000000
  2.2000 |     1.254575 |     1.254575 |     0.000000 |     0.000000 |     3.721839 |     3.721839 |     0.000000 |     0.000000 |     4.001056 |     4.001056 |     0.000000 |     0.000000
  2.2500 |     1.235935 |     1.235935 |     0.000000 |     0.000000 |     3.734291 |     3.734291 |     0.000000 |     0.000000 |     4.001080 |     4.001080 |     0.000000 |     0.000000
  2.3000 |     1.217232 |     1.217232 |     0.000000 |     0.000000 |     3.746557 |     3.746557 |     0.000000 |     0.000000 |     4.001104 |     4.001104 |     0.000000 |     0.000000
  2.3500 |     1.198469 |     1.198469 |     0.000000 |     0.000000 |     3.758636 |     3.758636 |     0.000000 |     0.000000 |     4.001128 |     4.001128 |     0.000000 |     0.000000
  2.4000 |     1.179646 |     1.179646 |     0.000000 |     0.000000 |     3.770526 |     3.770526 |     0.000000 |     0.000000 |     4.001152 |     4.001152 |     0.000000 |     0.000000
  2.4500 |     1.160764 |     1.160764 |     0.000000 |     0.000000 |     3.782229 |     3.782229 |     0.000000 |     0.000000 |     4.001176 |     4.001176 |     0.000000 |     0.000000
  2.5000 |     1.141824 |     1.141824 |     0.000000 |     0.000000 |     3.793741 |     3.793741 |     0.000000 |     0.000000 |     4.001200 |     4.001200 |     0.000000 |     0.000000
  2.5500 |     1.122827 |     1.122827 |     0.000000 |     0.000000 |     3.805065 |     3.805065 |     0.000000 |     0.000000 |     4.001224 |     4.001224 |     0.000000 |     0.000000
  2.6000 |     1.103774 |     1.103774 |     0.000000 |     0.000000 |     3.816198 |     3.816198 |     0.000000 |     0.000000 |     4.001248 |     4.001248 |     0.000000 |     0.000000
  2.6500 |     1.084666 |     1.084666 |     0.000000 |     0.000000 |     3.827140 |     3.827140 |     0.000000 |     0.000000 |     4.001272 |     4.001272 |     0.000000 |     0.000000
  2.7000 |     1.065503 |     1.065503 |     0.000000 |     0.000000 |     3.837891 |     3.837891 |     0.000000 |     0.000000 |     4.001296 |     4.001296 |     0.000000 |     0.000000
  2.7500 |     1.046287 |     1.046287 |     0.000000 |     0.000000 |     3.848450 |     3.848450 |     0.000000 |     0.000000 |     4.001320 |     4.001320 |     0.000000 |     0.000000
  2.8000 |     1.027019 |     1.027019 |     0.000000 |     0.000000 |     3.858817 |     3.858817 |     0.000000 |     0.000000 |     4.001344 |     4.001344 |     0.000000 |     0.000000
  2.8500 |     1.007699 |     1.007699 |     0.000000 |     0.000000 |     3.868990 |     3.868990 |     0.000000 |     0.000000 |     4.001368 |     4.001368 |     0.000000 |     0.000000
  2.9000 |     0.988329 |     0.988329 |     0.000000 |     0.000000 |     3.878970 |     3.878970 |     0.000000 |     0.000000 |     4.001392 |     4.001392 |     0.000000 |     0.000000
  2.9500 |     0.968910 |     0.968910 |     0.000000 |     0.000000 |     3.888757 |     3.888757 |     0.000000 |     0.000000 |     4.001416 |     4.001416 |     0.000000 |     0.000000
  3.0000 |     0.949442 |     0.949442 |     0.000000 |     0.000000 |     3.898348 |     3.898348 |     0.000000 |     0.000000 |     4.001440 |     4.001440 |     0.000000 |     0.000000
  3.0500 |     0.929927 |     0.929927 |     0.000000 |     0.000000 |     3.907745 |     3.907745 |     0.000000 |     0.000000 |     4.001464 |     4.001464 |     0.000000 |     0.000000
  3.1000 |     0.910365 |     0.910365 |     0.000000 |     0.000000 |     3.916947 |     3.916947 |     0.000000 |     0.000000 |     4.001488 |     4.001488 |     0.000000 |     0.000000
  3.1500 |     0.890757 |     0.890757 |     0.000000 |     0.000000 |     3.925952 |     3.925952 |     0.000000 |     0.000000 |     4.001512 |     4.001512 |     0.000000 |     0.000000
  3.2000 |     0.871106 |     0.871106 |     0.000000 |     0.000000 |     3.934762 |     3.934762 |     0.000000 |     0.000000 |     4.001536 |     4.001536 |     0.000000 |     0.000000
  3.2500 |     0.851410 |     0.851410 |     0.000000 |     0.000000 |     3.943374 |     3.943374 |     0.000000 |     0.000000 |     4.001560 |     4.001560 |     0.000000 |     0.000000
  3.3000 |     0.831672 |     0.831672 |     0.000000 |     0.000000 |     3.951790 |     3.951790 |     0.000000 |     0.000000 |     4.001584 |     4.001584 |     0.000000 |     0.000000
  3.3500 |     0.811893 |     0.811893 |     0.000000 |     0.000000 |     3.960008 |     3.960008 |     0.000000 |     0.000000 |     4.001608 |     4.001608 |     0.000000 |     0.000000
  3.4000 |     0.792072 |     0.792072 |     0.000000 |     0.000000 |     3.968028 |     3.968028 |     0.000000 |     0.000000 |     4.001632 |     4.001632 |     0.000000 |     0.000000
  3.4500 |     0.772213 |     0.772213 |     0.000000 |     0.000000 |     3.975849 |     3.975849 |     0.000000 |     0.000000 |     4.001656 |     4.001656 |     0.000000 |     0.000000
  3.5000 |     0.752314 |     0.752314 |     0.000000 |     0.000000 |     3.983472 |     3.983472 |     0.000000 |     0.000000 |     4.001680 |     4.001680 |     0.000000 |     0.000000
  3.5500 |     0.732378 |     0.732378 |     0.000000 |     0.000000 |     3.990895 |     3.990895 |     0.000000 |     0.000000 |     4.001704 |     4.001704 |     0.000000 |     0.000000
  3.6000 |     0.712406 |     0.712406 |     0.000000 |     0.000000 |     3.998119 |     3.998119 |     0.000000 |     0.000000 |     4.001728 |     4.001728 |     0.000000 |     0.000000
  3.6500 |     0.692397 |     0.692397 |     0.000000 |     0.000000 |     4.005143 |     4.005143 |     0.000000 |     0.000000 |     4.001752 |     4.001752 |     0.000000 |     0.000000
  3.7000 |     0.672355 |     0.672355 |     0.000000 |     0.000000 |     4.011967 |     4.011967 |     0.000000 |     0.000000 |     4.001776 |     4.001776 |     0.000000 |     0.000000
  3.7500 |     0.652278 |     0.652278 |     0.000000 |     0.000000 |     4.018590 |     4.018590 |     0.000000 |     0.000000 |     4.001800 |     4.001800 |     0.000000 |     0.000000
  3.8000 |     0.632169 |     0.632169 |     0.000000 |     0.000000 |     4.025012 |     4.025012 |     0.000000 |     0.000000 |     4.001824 |     4.001824 |     0.000000 |     0.000000
  3.8500 |     0.612028 |     0.612028 |     0.000000 |     0.000000 |     4.031233 |     4.031233 |     0.000000 |     0.000000 |     4.001848 |     4.001848 |     0.000000 |     0.000000
  3.9000 |     0.591857 |     0.591857 |     0.000000 |     0.000000 |     4.037253 |     4.037253 |     0.000000 |     0.000000 |     4.001872 |     4.001872 |     0.000000 |     0.000000
  3.9500 |     0.571656 |     0.571656 |     0.000000 |     0.000000 |     4.043070 |     4.043070 |     0.000000 |     0.000000 |     4.001896 |     4.001896 |     0.000000 |     0.000000
  4.0000 |     0.551427 |     0.551427 |     0.000000 |     0.000000 |     4.048686 |     4.048686 |     0.000000 |     0.000000 |     4.001920 |     4.001920 |     0.000000 |     0.000000
  4.0500 |     0.531170 |     0.531170 |     0.000000 |     0.000000 |     4.054099 |     4.054099 |     0.000000 |     0.000000 |     4.001944 |     4.001944 |     0.000000 |     0.000000
  4.1000 |     0.510886 |     0.510886 |     0.000000 |     0.000000 |     4.059309 |     4.059309 |     0.000000 |     0.000000 |     4.001968 |     4.001968 |     0.000000 |     0.000000
  4.1500 |     0.490577 |     0.490577 |     0.000000 |     0.000000 |     4.064317 |     4.064317 |     0.000000 |     0.000000 |     4.001992 |     4.001992 |     0.000000 |     0.000000
  4.2000 |     0.470243 |     0.470243 |     0.000000 |     0.000000 |     4.069121 |     4.069121 |     0.000000 |     0.000000 |     4.002017 |     4.002017 |     0.000000 |     0.000000
  4.2500 |     0.449886 |     0.449886 |     0.000000 |     0.000000 |     4.073721 |     4.073721 |     0.000000 |     0.000000 |     4.002041 |     4.002041 |     0.000000 |     0.000000
  4.3000 |     0.429506 |     0.429506 |     0.000000 |     0.000000 |     4.078118 |     4.078118 |     0.000000 |     0.000000 |     4.002065 |     4.002065 |     0.000000 |     0.000000
  4.3500 |     0.409105 |     0.409105 |     0.000000 |     0.000000 |     4.082311 |     4.082311 |     0.000000 |     0.000000 |     4.002089 |     4.002089 |     0.000000 |     0.000000
  4.4000 |     0.388683 |     0.388683 |     0.000000 |     0.000000 |     4.086300 |     4.086300 |     0.000000 |     0.000000 |     4.002113 |     4.002113 |     0.000000 |     0.000000
  4.4500 |     0.368242 |     0.368242 |     0.000000 |     0.000000 |     4.090085 |     4.090085 |     0.000000 |     0.000000 |     4.002137 |     4.002137 |     0.000000 |     0.000000
  4.5000 |     0.347783 |     0.347783 |     0.000000 |     0.000000 |     4.093665 |     4.093665 |     0.000000 |     0.000000 |     4.002161 |     4.002161 |     0.000000 |     0.000000
  4.5500 |     0.327306 |     0.327306 |     0.000000 |     0.000000 |     4.097041 |     4.097041 |     0.000000 |     0.000000 |     4.002185 |     4.002185 |     0.000000 |     0.000000
  4.6000 |     0.306813 |     0.306813 |     0.000000 |     0.000000 |     4.100211 |     4.100211 |     0.000000 |     0.000000 |     4.002209 |     4.002209 |     0.000000 |     0.000000
  4.6500 |     0.286304 |     0.286304 |     0.000000 |     0.000000 |     4.103177 |     4.103177 |     0.000000 |     0.000000 |     4.002233 |     4.002233 |     0.000000 |     0.000000
  4.7000 |     0.265781 |     0.265781 |     0.000000 |     0.000000 |     4.105937 |     4.105937 |     0.000000 |     0.000000 |     4.002257 |     4.002257 |     0.000000 |     0.000000
  4.7500 |     0.245245 |     0.245245 |     0.000000 |     0.000000 |     4.108492 |     4.108492 |     0.000000 |     0.000000 |     4.002281 |     4.002281 |     0.000000 |     0.000000
  4.8000 |     0.224697 |     0.224697 |     0.000000 |     0.000000 |     4.110842 |     4.110842 |     0.000000 |     0.000000 |     4.002305 |     4.002305 |     0.000000 |     0.000000
  4.8500 |     0.204137 |     0.204137 |     0.000000 |     0.000000 |     4.112986 |     4.112986 |     0.000000 |     0.000000 |     4.002329 |     4.002329 |     0.000000 |     0.000000
  4.9000 |     0.183567 |     0.183567 |     0.000000 |     0.000000 |     4.114925 |     4.114925 |     0.000000 |     0.000000 |     4.002353 |     4.002353 |     0.000000 |     0.000000
  4.9500 |     0.162988 |     0.162988 |     0.000000 |     0.000000 |     4.116658 |     4.116658 |     0.000000 |     0.000000 |     4.002377 |     4.002377 |     0.000000 |     0.000000
  5.0000 |     0.142401 |     0.142401 |     0.000000 |     0.000000 |     4.118185 |     4.118185 |     0.000000 |     0.000000 |     4.002401 |     4.002401 |     0.000000 |     0.000000
------------------------------------------------------------------------------------------------------------------------
Starting model: sum_test

DEBUG [MPHCPE]: Starting parameter estimation...
DEBUG [MPHCPE]: Analyzing identifiability with 2 points
DEBUG [MPHCPE]: Final analysis with 1 points
DEBUG [MPHCPE]: Final unidentifiable dict: Dict{Any, Any}(c => 0.37745157644525973)
DEBUG [MPHCPE]: Final varlist: Num[a, b, x1(t), x2(t), x3(t)]
We are trying these points:[44]
Using these observations and their derivatives:
Dict{Int64, Int64} with 1 entry:
  1 => 4
total degree: 64
using monodromy, line 917

Unidentifiability Analysis from MPHCPE:
All unidentifiable variables: Set(Any[x1(t), x2(t), c])
Unidentifiable variables substitution dictionary: Dict{Any, Any}(c => 0.37745157644525973)
Trivially solvable variables: Dict{Any, Any}(_t44_x3ˍt_t_ => 1.867456635298666, _t44_x3ˍtttt_t_ => 0.010584329604171216, _t44_x3_t_ => 7.578410214903192, _t44_x3ˍttt_t_ => 0.06018051950013614, _t44_x3ˍtt_t_ => 0.2283138678275236)

DEBUG [ODEPEtestwrapper]: Processing solution 1

DEBUG [ODEPEtestwrapper]: Processing solution 2

=== Model: sum_test ===

All structurally unidentifiable parameters:
--------------------------------------------------
These parameters cannot be uniquely determined from the data:
  • x1(t)
  • x2(t)
  • c


Minimal set of fixed values to make remaining parameters identifiable:
--------------------------------------------------
These parameters were fixed to make the system identifiable:
  • c = 0.377452


Found 2 distinct solution clusters:

Cluster 1: 1 similar solutions
Best solution (Error: 0.0):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
x1(t)        |   2.000000 |   2.384412 |   0.192206
x2(t)        |   3.000000 |   1.589608 |   0.470131
x3(t)        |   4.000000 |   4.000000 |   0.000000
a            |   0.100000 |  -0.200000 |   3.000000
b            |   0.200000 |  -0.100000 |   1.500000
c            |   0.300000 |   0.377452 |   0.258172

Cluster 2: 1 similar solutions
Best solution (Error: 0.0):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
x1(t)        |   2.000000 |   1.589608 |   0.205196
x2(t)        |   3.000000 |   2.384412 |   0.205196
x3(t)        |   4.000000 |   4.000000 |   0.000000
a            |   0.100000 |   0.100000 |   0.000000
b            |   0.200000 |   0.200000 |   0.000000
c            |   0.300000 |   0.377452 |   0.258172

Best maximum relative error for sum_test (excluding ALL unidentifiable parameters): 0.0

Observables Statistics:
--------------------------------------------------
Variable      | Mean        | Std         | Min         | Max         | Range       | Turns
--------------------------------------------------
y1(t)        |   8.515996 |   2.929009 |   4.000000 |  14.093084 |  10.093084 |          0

Error Statistics for Best Solution:
--------------------------------------------------

Error Statistics by Observable:
--------------------------------------------------
Observable   | Error Type | Mean        | Std         | Min         | Max         | Range
--------------------------------------------------
y1(t)        | Absolute   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y1(t)        | Relative   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000

Detailed Time Series Comparison:
------------------------------------------------------------------------------------------------------------------------
t | y1(t)_act    | y1(t)_pred   | abs_err      | rel_err     
------------------------------------------------------------------------------------------------------------------------
  0.0000 |     4.000000 |     4.000000 |     0.000000 |     0.000000
  0.0500 |     4.075151 |     4.075151 |     0.000000 |     0.000000
  0.1000 |     4.150607 |     4.150607 |     0.000000 |     0.000000
  0.1500 |     4.226374 |     4.226374 |     0.000000 |     0.000000
  0.2000 |     4.302456 |     4.302456 |     0.000000 |     0.000000
  0.2500 |     4.378860 |     4.378860 |     0.000000 |     0.000000
  0.3000 |     4.455591 |     4.455591 |     0.000000 |     0.000000
  0.3500 |     4.532654 |     4.532654 |     0.000000 |     0.000000
  0.4000 |     4.610055 |     4.610055 |     0.000000 |     0.000000
  0.4500 |     4.687799 |     4.687799 |     0.000000 |     0.000000
  0.5000 |     4.765893 |     4.765893 |     0.000000 |     0.000000
  0.5500 |     4.844340 |     4.844340 |     0.000000 |     0.000000
  0.6000 |     4.923149 |     4.923149 |     0.000000 |     0.000000
  0.6500 |     5.002323 |     5.002323 |     0.000000 |     0.000000
  0.7000 |     5.081869 |     5.081869 |     0.000000 |     0.000000
  0.7500 |     5.161793 |     5.161793 |     0.000000 |     0.000000
  0.8000 |     5.242101 |     5.242101 |     0.000000 |     0.000000
  0.8500 |     5.322798 |     5.322798 |     0.000000 |     0.000000
  0.9000 |     5.403891 |     5.403891 |     0.000000 |     0.000000
  0.9500 |     5.485386 |     5.485386 |     0.000000 |     0.000000
  1.0000 |     5.567288 |     5.567288 |     0.000000 |     0.000000
  1.0500 |     5.649604 |     5.649604 |     0.000000 |     0.000000
  1.1000 |     5.732340 |     5.732340 |     0.000000 |     0.000000
  1.1500 |     5.815503 |     5.815503 |     0.000000 |     0.000000
  1.2000 |     5.899099 |     5.899099 |     0.000000 |     0.000000
  1.2500 |     5.983133 |     5.983133 |     0.000000 |     0.000000
  1.3000 |     6.067613 |     6.067613 |     0.000000 |     0.000000
  1.3500 |     6.152545 |     6.152545 |     0.000000 |     0.000000
  1.4000 |     6.237935 |     6.237935 |     0.000000 |     0.000000
  1.4500 |     6.323790 |     6.323790 |     0.000000 |     0.000000
  1.5000 |     6.410117 |     6.410117 |     0.000000 |     0.000000
  1.5500 |     6.496922 |     6.496922 |     0.000000 |     0.000000
  1.6000 |     6.584212 |     6.584212 |     0.000000 |     0.000000
  1.6500 |     6.671994 |     6.671994 |     0.000000 |     0.000000
  1.7000 |     6.760275 |     6.760275 |     0.000000 |     0.000000
  1.7500 |     6.849062 |     6.849062 |     0.000000 |     0.000000
  1.8000 |     6.938361 |     6.938361 |     0.000000 |     0.000000
  1.8500 |     7.028180 |     7.028180 |     0.000000 |     0.000000
  1.9000 |     7.118526 |     7.118526 |     0.000000 |     0.000000
  1.9500 |     7.209406 |     7.209406 |     0.000000 |     0.000000
  2.0000 |     7.300827 |     7.300827 |     0.000000 |     0.000000
  2.0500 |     7.392796 |     7.392796 |     0.000000 |     0.000000
  2.1000 |     7.485322 |     7.485322 |     0.000000 |     0.000000
  2.1500 |     7.578410 |     7.578410 |     0.000000 |     0.000000
  2.2000 |     7.672070 |     7.672070 |     0.000000 |     0.000000
  2.2500 |     7.766308 |     7.766308 |     0.000000 |     0.000000
  2.3000 |     7.861131 |     7.861131 |     0.000000 |     0.000000
  2.3500 |     7.956549 |     7.956549 |     0.000000 |     0.000000
  2.4000 |     8.052568 |     8.052568 |     0.000000 |     0.000000
  2.4500 |     8.149196 |     8.149196 |     0.000000 |     0.000000
  2.5000 |     8.246441 |     8.246441 |     0.000000 |     0.000000
  2.5500 |     8.344311 |     8.344311 |     0.000000 |     0.000000
  2.6000 |     8.442815 |     8.442815 |     0.000000 |     0.000000
  2.6500 |     8.541960 |     8.541960 |     0.000000 |     0.000000
  2.7000 |     8.641754 |     8.641754 |     0.000000 |     0.000000
  2.7500 |     8.742206 |     8.742206 |     0.000000 |     0.000000
  2.8000 |     8.843324 |     8.843324 |     0.000000 |     0.000000
  2.8500 |     8.945116 |     8.945116 |     0.000000 |     0.000000
  2.9000 |     9.047592 |     9.047592 |     0.000000 |     0.000000
  2.9500 |     9.150758 |     9.150758 |     0.000000 |     0.000000
  3.0000 |     9.254625 |     9.254625 |     0.000000 |     0.000000
  3.0500 |     9.359201 |     9.359201 |     0.000000 |     0.000000
  3.1000 |     9.464494 |     9.464494 |     0.000000 |     0.000000
  3.1500 |     9.570514 |     9.570514 |     0.000000 |     0.000000
  3.2000 |     9.677270 |     9.677270 |     0.000000 |     0.000000
  3.2500 |     9.784770 |     9.784770 |     0.000000 |     0.000000
  3.3000 |     9.893023 |     9.893023 |     0.000000 |     0.000000
  3.3500 |    10.002039 |    10.002039 |     0.000000 |     0.000000
  3.4000 |    10.111828 |    10.111828 |     0.000000 |     0.000000
  3.4500 |    10.222398 |    10.222398 |     0.000000 |     0.000000
  3.5000 |    10.333759 |    10.333759 |     0.000000 |     0.000000
  3.5500 |    10.445920 |    10.445920 |     0.000000 |     0.000000
  3.6000 |    10.558891 |    10.558891 |     0.000000 |     0.000000
  3.6500 |    10.672683 |    10.672683 |     0.000000 |     0.000000
  3.7000 |    10.787304 |    10.787304 |     0.000000 |     0.000000
  3.7500 |    10.902764 |    10.902764 |     0.000000 |     0.000000
  3.8000 |    11.019075 |    11.019075 |     0.000000 |     0.000000
  3.8500 |    11.136244 |    11.136244 |     0.000000 |     0.000000
  3.9000 |    11.254284 |    11.254284 |     0.000000 |     0.000000
  3.9500 |    11.373204 |    11.373204 |     0.000000 |     0.000000
  4.0000 |    11.493014 |    11.493014 |     0.000000 |     0.000000
  4.0500 |    11.613725 |    11.613725 |     0.000000 |     0.000000
  4.1000 |    11.735348 |    11.735348 |     0.000000 |     0.000000
  4.1500 |    11.857893 |    11.857893 |     0.000000 |     0.000000
  4.2000 |    11.981370 |    11.981370 |     0.000000 |     0.000000
  4.2500 |    12.105792 |    12.105792 |     0.000000 |     0.000000
  4.3000 |    12.231169 |    12.231169 |     0.000000 |     0.000000
  4.3500 |    12.357511 |    12.357511 |     0.000000 |     0.000000
  4.4000 |    12.484830 |    12.484830 |     0.000000 |     0.000000
  4.4500 |    12.613138 |    12.613138 |     0.000000 |     0.000000
  4.5000 |    12.742445 |    12.742445 |     0.000000 |     0.000000
  4.5500 |    12.872764 |    12.872764 |     0.000000 |     0.000000
  4.6000 |    13.004105 |    13.004105 |     0.000000 |     0.000000
  4.6500 |    13.136481 |    13.136481 |     0.000000 |     0.000000
  4.7000 |    13.269903 |    13.269903 |     0.000000 |     0.000000
  4.7500 |    13.404383 |    13.404383 |     0.000000 |     0.000000
  4.8000 |    13.539934 |    13.539934 |     0.000000 |     0.000000
  4.8500 |    13.676567 |    13.676567 |     0.000000 |     0.000000
  4.9000 |    13.814295 |    13.814295 |     0.000000 |     0.000000
  4.9500 |    13.953130 |    13.953130 |     0.000000 |     0.000000
  5.0000 |    14.093084 |    14.093084 |     0.000000 |     0.000000
------------------------------------------------------------------------------------------------------------------------
Starting model: global_unident_test

DEBUG [MPHCPE]: Starting parameter estimation...
DEBUG [MPHCPE]: Analyzing identifiability with 2 points
DEBUG [MPHCPE]: Final analysis with 1 points
DEBUG [MPHCPE]: Final unidentifiable dict: Dict{Any, Any}(d => 0.03818376764352549, x3(t) => 0.495677216990136, b => 0.7380207152327415)
DEBUG [MPHCPE]: Final varlist: Num[a, c, x1(t), x2(t)]
We are trying these points:[52]
Using these observations and their derivatives:
Dict{Int64, Int64} with 2 entries:
  2 => 1
  1 => 1
total degree: 1
1-element Vector{Vector{ComplexF64}}:
 [0.10000000000000189 + 0.0im, -0.2380207152327332 + 0.0im]

Unidentifiability Analysis from MPHCPE:
All unidentifiable variables: Set(Any[d, x3(t), b, c])
Unidentifiable variables substitution dictionary: Dict{Any, Any}(d => 0.03818376764352549, x3(t) => 0.495677216990136, b => 0.7380207152327415)
Trivially solvable variables: Dict{Any, Any}(_t52_x1ˍt_t_ => -0.15498329959221913, _t52_x2_t_ => 5.250835020389189, _t52_x2ˍt_t_ => 0.7749164979610939, _t52_x1_t_ => 1.549832995922162)

DEBUG [ODEPEtestwrapper]: Processing solution 1

=== Model: global_unident_test ===

All structurally unidentifiable parameters:
--------------------------------------------------
These parameters cannot be uniquely determined from the data:
  • d
  • x3(t)
  • b
  • c


Minimal set of fixed values to make remaining parameters identifiable:
--------------------------------------------------
These parameters were fixed to make the system identifiable:
  • d = 0.038184
  • x3(t) = 0.495677
  • b = 0.738021


Found 1 distinct solution clusters:

Cluster 1: 1 similar solutions
Best solution (Error: 0.0):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
x1(t)        |   2.000000 |   2.000000 |   0.000000
x2(t)        |   3.000000 |   3.000000 |   0.000000
x3(t)        |   4.000000 |   0.323786 |   0.919053
a            |   0.100000 |   0.100000 |   0.000000
b            |   0.200000 |   0.738021 |   2.690104
c            |   0.300000 |  -0.238021 |   1.793402
d            |   0.400000 |   0.038184 |   0.904541

Best maximum relative error for global_unident_test (excluding ALL unidentifiable parameters): 0.0

Observables Statistics:
--------------------------------------------------
Variable      | Mean        | Std         | Min         | Max         | Range       | Turns
--------------------------------------------------
y1(t)        |   1.574204 |   0.230134 |   1.213061 |   2.000000 |   0.786939 |          0
y2(t)        |   5.128980 |   1.150671 |   3.000000 |   6.934693 |   3.934693 |          0

Error Statistics for Best Solution:
--------------------------------------------------

Error Statistics by Observable:
--------------------------------------------------
Observable   | Error Type | Mean        | Std         | Min         | Max         | Range
--------------------------------------------------
y1(t)        | Absolute   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y1(t)        | Relative   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y2(t)        | Absolute   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y2(t)        | Relative   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000

Detailed Time Series Comparison:
------------------------------------------------------------------------------------------------------------------------
t | y1(t)_act    | y1(t)_pred   | abs_err      | rel_err      | y2(t)_act    | y2(t)_pred   | abs_err      | rel_err     
------------------------------------------------------------------------------------------------------------------------
  0.0000 |     2.000000 |     2.000000 |     0.000000 |     0.000000 |     3.000000 |     3.000000 |     0.000000 |     0.000000
  0.0500 |     1.990025 |     1.990025 |     0.000000 |     0.000000 |     3.049875 |     3.049875 |     0.000000 |     0.000000
  0.1000 |     1.980100 |     1.980100 |     0.000000 |     0.000000 |     3.099502 |     3.099502 |     0.000000 |     0.000000
  0.1500 |     1.970224 |     1.970224 |     0.000000 |     0.000000 |     3.148881 |     3.148881 |     0.000000 |     0.000000
  0.2000 |     1.960397 |     1.960397 |     0.000000 |     0.000000 |     3.198013 |     3.198013 |     0.000000 |     0.000000
  0.2500 |     1.950620 |     1.950620 |     0.000000 |     0.000000 |     3.246901 |     3.246901 |     0.000000 |     0.000000
  0.3000 |     1.940891 |     1.940891 |     0.000000 |     0.000000 |     3.295545 |     3.295545 |     0.000000 |     0.000000
  0.3500 |     1.931211 |     1.931211 |     0.000000 |     0.000000 |     3.343946 |     3.343946 |     0.000000 |     0.000000
  0.4000 |     1.921579 |     1.921579 |     0.000000 |     0.000000 |     3.392106 |     3.392106 |     0.000000 |     0.000000
  0.4500 |     1.911995 |     1.911995 |     0.000000 |     0.000000 |     3.440025 |     3.440025 |     0.000000 |     0.000000
  0.5000 |     1.902459 |     1.902459 |     0.000000 |     0.000000 |     3.487706 |     3.487706 |     0.000000 |     0.000000
  0.5500 |     1.892970 |     1.892970 |     0.000000 |     0.000000 |     3.535149 |     3.535149 |     0.000000 |     0.000000
  0.6000 |     1.883529 |     1.883529 |     0.000000 |     0.000000 |     3.582355 |     3.582355 |     0.000000 |     0.000000
  0.6500 |     1.874135 |     1.874135 |     0.000000 |     0.000000 |     3.629325 |     3.629325 |     0.000000 |     0.000000
  0.7000 |     1.864788 |     1.864788 |     0.000000 |     0.000000 |     3.676062 |     3.676062 |     0.000000 |     0.000000
  0.7500 |     1.855487 |     1.855487 |     0.000000 |     0.000000 |     3.722565 |     3.722565 |     0.000000 |     0.000000
  0.8000 |     1.846233 |     1.846233 |     0.000000 |     0.000000 |     3.768837 |     3.768837 |     0.000000 |     0.000000
  0.8500 |     1.837025 |     1.837025 |     0.000000 |     0.000000 |     3.814877 |     3.814877 |     0.000000 |     0.000000
  0.9000 |     1.827862 |     1.827862 |     0.000000 |     0.000000 |     3.860688 |     3.860688 |     0.000000 |     0.000000
  0.9500 |     1.818746 |     1.818746 |     0.000000 |     0.000000 |     3.906271 |     3.906271 |     0.000000 |     0.000000
  1.0000 |     1.809675 |     1.809675 |     0.000000 |     0.000000 |     3.951626 |     3.951626 |     0.000000 |     0.000000
  1.0500 |     1.800649 |     1.800649 |     0.000000 |     0.000000 |     3.996755 |     3.996755 |     0.000000 |     0.000000
  1.1000 |     1.791668 |     1.791668 |     0.000000 |     0.000000 |     4.041659 |     4.041659 |     0.000000 |     0.000000
  1.1500 |     1.782732 |     1.782732 |     0.000000 |     0.000000 |     4.086339 |     4.086339 |     0.000000 |     0.000000
  1.2000 |     1.773841 |     1.773841 |     0.000000 |     0.000000 |     4.130796 |     4.130796 |     0.000000 |     0.000000
  1.2500 |     1.764994 |     1.764994 |     0.000000 |     0.000000 |     4.175031 |     4.175031 |     0.000000 |     0.000000
  1.3000 |     1.756191 |     1.756191 |     0.000000 |     0.000000 |     4.219046 |     4.219046 |     0.000000 |     0.000000
  1.3500 |     1.747432 |     1.747432 |     0.000000 |     0.000000 |     4.262841 |     4.262841 |     0.000000 |     0.000000
  1.4000 |     1.738716 |     1.738716 |     0.000000 |     0.000000 |     4.306418 |     4.306418 |     0.000000 |     0.000000
  1.4500 |     1.730045 |     1.730045 |     0.000000 |     0.000000 |     4.349777 |     4.349777 |     0.000000 |     0.000000
  1.5000 |     1.721416 |     1.721416 |     0.000000 |     0.000000 |     4.392920 |     4.392920 |     0.000000 |     0.000000
  1.5500 |     1.712830 |     1.712830 |     0.000000 |     0.000000 |     4.435848 |     4.435848 |     0.000000 |     0.000000
  1.6000 |     1.704288 |     1.704288 |     0.000000 |     0.000000 |     4.478562 |     4.478562 |     0.000000 |     0.000000
  1.6500 |     1.695787 |     1.695787 |     0.000000 |     0.000000 |     4.521063 |     4.521063 |     0.000000 |     0.000000
  1.7000 |     1.687330 |     1.687330 |     0.000000 |     0.000000 |     4.563352 |     4.563352 |     0.000000 |     0.000000
  1.7500 |     1.678914 |     1.678914 |     0.000000 |     0.000000 |     4.605430 |     4.605430 |     0.000000 |     0.000000
  1.8000 |     1.670540 |     1.670540 |     0.000000 |     0.000000 |     4.647298 |     4.647298 |     0.000000 |     0.000000
  1.8500 |     1.662209 |     1.662209 |     0.000000 |     0.000000 |     4.688957 |     4.688957 |     0.000000 |     0.000000
  1.9000 |     1.653918 |     1.653918 |     0.000000 |     0.000000 |     4.730409 |     4.730409 |     0.000000 |     0.000000
  1.9500 |     1.645669 |     1.645669 |     0.000000 |     0.000000 |     4.771653 |     4.771653 |     0.000000 |     0.000000
  2.0000 |     1.637462 |     1.637462 |     0.000000 |     0.000000 |     4.812692 |     4.812692 |     0.000000 |     0.000000
  2.0500 |     1.629295 |     1.629295 |     0.000000 |     0.000000 |     4.853527 |     4.853527 |     0.000000 |     0.000000
  2.1000 |     1.621168 |     1.621168 |     0.000000 |     0.000000 |     4.894158 |     4.894158 |     0.000000 |     0.000000
  2.1500 |     1.613083 |     1.613083 |     0.000000 |     0.000000 |     4.934586 |     4.934586 |     0.000000 |     0.000000
  2.2000 |     1.605038 |     1.605038 |     0.000000 |     0.000000 |     4.974812 |     4.974812 |     0.000000 |     0.000000
  2.2500 |     1.597032 |     1.597032 |     0.000000 |     0.000000 |     5.014838 |     5.014838 |     0.000000 |     0.000000
  2.3000 |     1.589067 |     1.589067 |     0.000000 |     0.000000 |     5.054664 |     5.054664 |     0.000000 |     0.000000
  2.3500 |     1.581142 |     1.581142 |     0.000000 |     0.000000 |     5.094292 |     5.094292 |     0.000000 |     0.000000
  2.4000 |     1.573256 |     1.573256 |     0.000000 |     0.000000 |     5.133721 |     5.133721 |     0.000000 |     0.000000
  2.4500 |     1.565409 |     1.565409 |     0.000000 |     0.000000 |     5.172955 |     5.172955 |     0.000000 |     0.000000
  2.5000 |     1.557602 |     1.557602 |     0.000000 |     0.000000 |     5.211992 |     5.211992 |     0.000000 |     0.000000
  2.5500 |     1.549833 |     1.549833 |     0.000000 |     0.000000 |     5.250835 |     5.250835 |     0.000000 |     0.000000
  2.6000 |     1.542103 |     1.542103 |     0.000000 |     0.000000 |     5.289484 |     5.289484 |     0.000000 |     0.000000
  2.6500 |     1.534412 |     1.534412 |     0.000000 |     0.000000 |     5.327941 |     5.327941 |     0.000000 |     0.000000
  2.7000 |     1.526759 |     1.526759 |     0.000000 |     0.000000 |     5.366205 |     5.366205 |     0.000000 |     0.000000
  2.7500 |     1.519144 |     1.519144 |     0.000000 |     0.000000 |     5.404279 |     5.404279 |     0.000000 |     0.000000
  2.8000 |     1.511567 |     1.511567 |     0.000000 |     0.000000 |     5.442163 |     5.442163 |     0.000000 |     0.000000
  2.8500 |     1.504029 |     1.504029 |     0.000000 |     0.000000 |     5.479857 |     5.479857 |     0.000000 |     0.000000
  2.9000 |     1.496527 |     1.496527 |     0.000000 |     0.000000 |     5.517364 |     5.517364 |     0.000000 |     0.000000
  2.9500 |     1.489063 |     1.489063 |     0.000000 |     0.000000 |     5.554684 |     5.554684 |     0.000000 |     0.000000
  3.0000 |     1.481636 |     1.481636 |     0.000000 |     0.000000 |     5.591818 |     5.591818 |     0.000000 |     0.000000
  3.0500 |     1.474247 |     1.474247 |     0.000000 |     0.000000 |     5.628766 |     5.628766 |     0.000000 |     0.000000
  3.1000 |     1.466894 |     1.466894 |     0.000000 |     0.000000 |     5.665530 |     5.665530 |     0.000000 |     0.000000
  3.1500 |     1.459578 |     1.459578 |     0.000000 |     0.000000 |     5.702111 |     5.702111 |     0.000000 |     0.000000
  3.2000 |     1.452298 |     1.452298 |     0.000000 |     0.000000 |     5.738510 |     5.738510 |     0.000000 |     0.000000
  3.2500 |     1.445055 |     1.445055 |     0.000000 |     0.000000 |     5.774726 |     5.774726 |     0.000000 |     0.000000
  3.3000 |     1.437847 |     1.437847 |     0.000000 |     0.000000 |     5.810763 |     5.810763 |     0.000000 |     0.000000
  3.3500 |     1.430676 |     1.430676 |     0.000000 |     0.000000 |     5.846619 |     5.846619 |     0.000000 |     0.000000
  3.4000 |     1.423541 |     1.423541 |     0.000000 |     0.000000 |     5.882297 |     5.882297 |     0.000000 |     0.000000
  3.4500 |     1.416441 |     1.416441 |     0.000000 |     0.000000 |     5.917796 |     5.917796 |     0.000000 |     0.000000
  3.5000 |     1.409376 |     1.409376 |     0.000000 |     0.000000 |     5.953119 |     5.953119 |     0.000000 |     0.000000
  3.5500 |     1.402347 |     1.402347 |     0.000000 |     0.000000 |     5.988266 |     5.988266 |     0.000000 |     0.000000
  3.6000 |     1.395353 |     1.395353 |     0.000000 |     0.000000 |     6.023237 |     6.023237 |     0.000000 |     0.000000
  3.6500 |     1.388393 |     1.388393 |     0.000000 |     0.000000 |     6.058033 |     6.058033 |     0.000000 |     0.000000
  3.7000 |     1.381469 |     1.381469 |     0.000000 |     0.000000 |     6.092657 |     6.092657 |     0.000000 |     0.000000
  3.7500 |     1.374579 |     1.374579 |     0.000000 |     0.000000 |     6.127107 |     6.127107 |     0.000000 |     0.000000
  3.8000 |     1.367723 |     1.367723 |     0.000000 |     0.000000 |     6.161386 |     6.161386 |     0.000000 |     0.000000
  3.8500 |     1.360901 |     1.360901 |     0.000000 |     0.000000 |     6.195494 |     6.195494 |     0.000000 |     0.000000
  3.9000 |     1.354114 |     1.354114 |     0.000000 |     0.000000 |     6.229431 |     6.229431 |     0.000000 |     0.000000
  3.9500 |     1.347360 |     1.347360 |     0.000000 |     0.000000 |     6.263200 |     6.263200 |     0.000000 |     0.000000
  4.0000 |     1.340640 |     1.340640 |     0.000000 |     0.000000 |     6.296800 |     6.296800 |     0.000000 |     0.000000
  4.0500 |     1.333954 |     1.333954 |     0.000000 |     0.000000 |     6.330232 |     6.330232 |     0.000000 |     0.000000
  4.1000 |     1.327301 |     1.327301 |     0.000000 |     0.000000 |     6.363497 |     6.363497 |     0.000000 |     0.000000
  4.1500 |     1.320681 |     1.320681 |     0.000000 |     0.000000 |     6.396597 |     6.396597 |     0.000000 |     0.000000
  4.2000 |     1.314094 |     1.314094 |     0.000000 |     0.000000 |     6.429532 |     6.429532 |     0.000000 |     0.000000
  4.2500 |     1.307540 |     1.307540 |     0.000000 |     0.000000 |     6.462302 |     6.462302 |     0.000000 |     0.000000
  4.3000 |     1.301018 |     1.301018 |     0.000000 |     0.000000 |     6.494909 |     6.494909 |     0.000000 |     0.000000
  4.3500 |     1.294529 |     1.294529 |     0.000000 |     0.000000 |     6.527353 |     6.527353 |     0.000000 |     0.000000
  4.4000 |     1.288073 |     1.288073 |     0.000000 |     0.000000 |     6.559636 |     6.559636 |     0.000000 |     0.000000
  4.4500 |     1.281649 |     1.281649 |     0.000000 |     0.000000 |     6.591757 |     6.591757 |     0.000000 |     0.000000
  4.5000 |     1.275256 |     1.275256 |     0.000000 |     0.000000 |     6.623718 |     6.623718 |     0.000000 |     0.000000
  4.5500 |     1.268896 |     1.268896 |     0.000000 |     0.000000 |     6.655520 |     6.655520 |     0.000000 |     0.000000
  4.6000 |     1.262567 |     1.262567 |     0.000000 |     0.000000 |     6.687164 |     6.687164 |     0.000000 |     0.000000
  4.6500 |     1.256270 |     1.256270 |     0.000000 |     0.000000 |     6.718649 |     6.718649 |     0.000000 |     0.000000
  4.7000 |     1.250005 |     1.250005 |     0.000000 |     0.000000 |     6.749977 |     6.749977 |     0.000000 |     0.000000
  4.7500 |     1.243770 |     1.243770 |     0.000000 |     0.000000 |     6.781149 |     6.781149 |     0.000000 |     0.000000
  4.8000 |     1.237567 |     1.237567 |     0.000000 |     0.000000 |     6.812166 |     6.812166 |     0.000000 |     0.000000
  4.8500 |     1.231394 |     1.231394 |     0.000000 |     0.000000 |     6.843028 |     6.843028 |     0.000000 |     0.000000
  4.9000 |     1.225253 |     1.225253 |     0.000000 |     0.000000 |     6.873736 |     6.873736 |     0.000000 |     0.000000
  4.9500 |     1.219142 |     1.219142 |     0.000000 |     0.000000 |     6.904291 |     6.904291 |     0.000000 |     0.000000
  5.0000 |     1.213061 |     1.213061 |     0.000000 |     0.000000 |     6.934693 |     6.934693 |     0.000000 |     0.000000
------------------------------------------------------------------------------------------------------------------------
Starting model: trivial_unident

DEBUG [MPHCPE]: Starting parameter estimation...
DEBUG [MPHCPE]: Analyzing identifiability with 2 points
DEBUG [MPHCPE]: Final analysis with 1 points
DEBUG [MPHCPE]: Final unidentifiable dict: Dict{Any, Any}(a => 0.5598406467256378)
DEBUG [MPHCPE]: Final varlist: Num[b, x1(t)]
We are trying these points:[98]
Using these observations and their derivatives:
Dict{Int64, Int64} with 1 entry:
  1 => 1
total degree: 1
1-element Vector{Vector{ComplexF64}}:
 [0.6401593532737371 + 0.0im]

Unidentifiability Analysis from MPHCPE:
All unidentifiable variables: Set(Any[a, b])
Unidentifiable variables substitution dictionary: Dict{Any, Any}(a => 0.5598406467256378)
Trivially solvable variables: Dict{Any, Any}(_t98_x1_t_ => 673.9441072601571, _t98_x1ˍt_t_ => 808.7329287117673)

DEBUG [ODEPEtestwrapper]: Processing solution 1

=== Model: trivial_unident ===

All structurally unidentifiable parameters:
--------------------------------------------------
These parameters cannot be uniquely determined from the data:
  • a
  • b


Minimal set of fixed values to make remaining parameters identifiable:
--------------------------------------------------
These parameters were fixed to make the system identifiable:
  • a = 0.559841


Found 1 distinct solution clusters:

Cluster 1: 1 similar solutions
Best solution (Error: 0.0):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
x1(t)        |   2.000000 |   2.000000 |   0.000000
a            |   0.600000 |   0.559841 |   0.066932
b            |   0.600000 |   0.640159 |   0.066932

Best maximum relative error for trivial_unident (excluding ALL unidentifiable parameters): 0.0

Observables Statistics:
--------------------------------------------------
Variable      | Mean        | Std         | Min         | Max         | Range       | Turns
--------------------------------------------------
y1(t)        | 136.858871 | 196.605726 |   2.000000 | 806.857587 | 804.857587 |          0

Error Statistics for Best Solution:
--------------------------------------------------

Error Statistics by Observable:
--------------------------------------------------
Observable   | Error Type | Mean        | Std         | Min         | Max         | Range
--------------------------------------------------
y1(t)        | Absolute   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y1(t)        | Relative   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000

Detailed Time Series Comparison:
------------------------------------------------------------------------------------------------------------------------
t | y1(t)_act    | y1(t)_pred   | abs_err      | rel_err     
------------------------------------------------------------------------------------------------------------------------
  0.0000 |     2.000000 |     2.000000 |     0.000000 |     0.000000
  0.0500 |     2.123673 |     2.123673 |     0.000000 |     0.000000
  0.1000 |     2.254994 |     2.254994 |     0.000000 |     0.000000
  0.1500 |     2.394435 |     2.394435 |     0.000000 |     0.000000
  0.2000 |     2.542498 |     2.542498 |     0.000000 |     0.000000
  0.2500 |     2.699718 |     2.699718 |     0.000000 |     0.000000
  0.3000 |     2.866659 |     2.866659 |     0.000000 |     0.000000
  0.3500 |     3.043923 |     3.043923 |     0.000000 |     0.000000
  0.4000 |     3.232149 |     3.232149 |     0.000000 |     0.000000
  0.4500 |     3.432014 |     3.432014 |     0.000000 |     0.000000
  0.5000 |     3.644238 |     3.644238 |     0.000000 |     0.000000
  0.5500 |     3.869585 |     3.869585 |     0.000000 |     0.000000
  0.6000 |     4.108866 |     4.108866 |     0.000000 |     0.000000
  0.6500 |     4.362945 |     4.362945 |     0.000000 |     0.000000
  0.7000 |     4.632734 |     4.632734 |     0.000000 |     0.000000
  0.7500 |     4.919206 |     4.919206 |     0.000000 |     0.000000
  0.8000 |     5.223393 |     5.223393 |     0.000000 |     0.000000
  0.8500 |     5.546390 |     5.546390 |     0.000000 |     0.000000
  0.9000 |     5.889359 |     5.889359 |     0.000000 |     0.000000
  0.9500 |     6.253537 |     6.253537 |     0.000000 |     0.000000
  1.0000 |     6.640234 |     6.640234 |     0.000000 |     0.000000
  1.0500 |     7.050843 |     7.050843 |     0.000000 |     0.000000
  1.1000 |     7.486843 |     7.486843 |     0.000000 |     0.000000
  1.1500 |     7.949803 |     7.949803 |     0.000000 |     0.000000
  1.2000 |     8.441392 |     8.441392 |     0.000000 |     0.000000
  1.2500 |     8.963378 |     8.963378 |     0.000000 |     0.000000
  1.3000 |     9.517642 |     9.517642 |     0.000000 |     0.000000
  1.3500 |    10.106181 |    10.106181 |     0.000000 |     0.000000
  1.4000 |    10.731112 |    10.731112 |     0.000000 |     0.000000
  1.4500 |    11.394687 |    11.394687 |     0.000000 |     0.000000
  1.5000 |    12.099295 |    12.099295 |     0.000000 |     0.000000
  1.5500 |    12.847474 |    12.847474 |     0.000000 |     0.000000
  1.6000 |    13.641917 |    13.641917 |     0.000000 |     0.000000
  1.6500 |    14.485486 |    14.485486 |     0.000000 |     0.000000
  1.7000 |    15.381218 |    15.381218 |     0.000000 |     0.000000
  1.7500 |    16.332340 |    16.332340 |     0.000000 |     0.000000
  1.8000 |    17.342275 |    17.342275 |     0.000000 |     0.000000
  1.8500 |    18.414662 |    18.414662 |     0.000000 |     0.000000
  1.9000 |    19.553361 |    19.553361 |     0.000000 |     0.000000
  1.9500 |    20.762473 |    20.762473 |     0.000000 |     0.000000
  2.0000 |    22.046353 |    22.046353 |     0.000000 |     0.000000
  2.0500 |    23.409623 |    23.409623 |     0.000000 |     0.000000
  2.1000 |    24.857193 |    24.857193 |     0.000000 |     0.000000
  2.1500 |    26.394276 |    26.394276 |     0.000000 |     0.000000
  2.2000 |    28.026407 |    28.026407 |     0.000000 |     0.000000
  2.2500 |    29.759463 |    29.759463 |     0.000000 |     0.000000
  2.3000 |    31.599686 |    31.599686 |     0.000000 |     0.000000
  2.3500 |    33.553701 |    33.553701 |     0.000000 |     0.000000
  2.4000 |    35.628546 |    35.628546 |     0.000000 |     0.000000
  2.4500 |    37.831693 |    37.831693 |     0.000000 |     0.000000
  2.5000 |    40.171074 |    40.171074 |     0.000000 |     0.000000
  2.5500 |    42.655114 |    42.655114 |     0.000000 |     0.000000
  2.6000 |    45.292759 |    45.292759 |     0.000000 |     0.000000
  2.6500 |    48.093507 |    48.093507 |     0.000000 |     0.000000
  2.7000 |    51.067443 |    51.067443 |     0.000000 |     0.000000
  2.7500 |    54.225278 |    54.225278 |     0.000000 |     0.000000
  2.8000 |    57.578382 |    57.578382 |     0.000000 |     0.000000
  2.8500 |    61.138830 |    61.138830 |     0.000000 |     0.000000
  2.9000 |    64.919444 |    64.919444 |     0.000000 |     0.000000
  2.9500 |    68.933838 |    68.933838 |     0.000000 |     0.000000
  3.0000 |    73.196469 |    73.196469 |     0.000000 |     0.000000
  3.0500 |    77.722686 |    77.722686 |     0.000000 |     0.000000
  3.1000 |    82.528788 |    82.528788 |     0.000000 |     0.000000
  3.1500 |    87.632083 |    87.632083 |     0.000000 |     0.000000
  3.2000 |    93.050949 |    93.050949 |     0.000000 |     0.000000
  3.2500 |    98.804898 |    98.804898 |     0.000000 |     0.000000
  3.3000 |   104.914652 |   104.914652 |     0.000000 |     0.000000
  3.3500 |   111.402212 |   111.402212 |     0.000000 |     0.000000
  3.4000 |   118.290940 |   118.290940 |     0.000000 |     0.000000
  3.4500 |   125.605643 |   125.605643 |     0.000000 |     0.000000
  3.5000 |   133.372662 |   133.372662 |     0.000000 |     0.000000
  3.5500 |   141.619967 |   141.619967 |     0.000000 |     0.000000
  3.6000 |   150.377257 |   150.377257 |     0.000000 |     0.000000
  3.6500 |   159.676067 |   159.676067 |     0.000000 |     0.000000
  3.7000 |   169.549883 |   169.549883 |     0.000000 |     0.000000
  3.7500 |   180.034263 |   180.034263 |     0.000000 |     0.000000
  3.8000 |   191.166960 |   191.166960 |     0.000000 |     0.000000
  3.8500 |   202.988064 |   202.988064 |     0.000000 |     0.000000
  3.9000 |   215.540145 |   215.540145 |     0.000000 |     0.000000
  3.9500 |   228.868403 |   228.868403 |     0.000000 |     0.000000
  4.0000 |   243.020835 |   243.020835 |     0.000000 |     0.000000
  4.0500 |   258.048404 |   258.048404 |     0.000000 |     0.000000
  4.1000 |   274.005226 |   274.005226 |     0.000000 |     0.000000
  4.1500 |   290.948763 |   290.948763 |     0.000000 |     0.000000
  4.2000 |   308.940030 |   308.940030 |     0.000000 |     0.000000
  4.2500 |   328.043815 |   328.043815 |     0.000000 |     0.000000
  4.3000 |   348.328911 |   348.328911 |     0.000000 |     0.000000
  4.3500 |   369.868368 |   369.868368 |     0.000000 |     0.000000
  4.4000 |   392.739751 |   392.739751 |     0.000000 |     0.000000
  4.4500 |   417.025421 |   417.025421 |     0.000000 |     0.000000
  4.5000 |   442.812832 |   442.812832 |     0.000000 |     0.000000
  4.5500 |   470.194849 |   470.194849 |     0.000000 |     0.000000
  4.6000 |   499.270074 |   499.270074 |     0.000000 |     0.000000
  4.6500 |   530.143212 |   530.143212 |     0.000000 |     0.000000
  4.7000 |   562.925437 |   562.925437 |     0.000000 |     0.000000
  4.7500 |   597.734802 |   597.734802 |     0.000000 |     0.000000
  4.8000 |   634.696658 |   634.696658 |     0.000000 |     0.000000
  4.8500 |   673.944107 |   673.944107 |     0.000000 |     0.000000
  4.9000 |   715.618483 |   715.618483 |     0.000000 |     0.000000
  4.9500 |   759.869859 |   759.869859 |     0.000000 |     0.000000
  5.0000 |   806.857587 |   806.857587 |     0.000000 |     0.000000
------------------------------------------------------------------------------------------------------------------------
Starting model: Lotka_Volterra

DEBUG [MPHCPE]: Starting parameter estimation...
DEBUG [MPHCPE]: Analyzing identifiability with 2 points
DEBUG [MPHCPE]: Final analysis with 1 points
DEBUG [MPHCPE]: Final unidentifiable dict: Dict{Any, Any}()
DEBUG [MPHCPE]: Final varlist: Num[k2, k1, k3, r(t), w(t)]
We are trying these points:[36]
Using these observations and their derivatives:
Dict{Int64, Int64} with 1 entry:
  1 => 4
total degree: 128
using monodromy, line 917
┌ Warning: At t=4.505491655584569, dt was forced below floating point epsilon -7.921946070496926e-16, and step error estimate = 1.12276232845025. Aborting. There is either an error in your model specification or the true solution is unstable (or the true solution can not be represented in the precision of Float64).
└ @ SciMLBase ~/.julia/packages/SciMLBase/fB2hR/src/integrator_interface.jl:623

Unidentifiability Analysis from MPHCPE:
All unidentifiable variables: Set{Any}()
Unidentifiable variables substitution dictionary: Dict{Any, Any}()
Trivially solvable variables: Dict{Any, Any}(_t36_rˍtttt_t_ => 0.007257393926286326, _t36_rˍttt_t_ => 0.002920029131256552, _t36_rˍt_t_ => 0.00808981064596144, _t36_r_t_ => 0.043073479104328884, _t36_rˍtt_t_ => 0.011261047625831189)

DEBUG [ODEPEtestwrapper]: Processing solution 1

DEBUG [ODEPEtestwrapper]: Processing solution 2

=== Model: Lotka_Volterra ===

Found 1 distinct solution clusters:

Cluster 1: 1 similar solutions
Best solution (Error: 0.0):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
r(t)         |   2.000000 |   2.000000 |   0.000000
w(t)         |   1.000000 |   1.000000 |   0.000000
k1           |   1.000000 |   1.000000 |   0.000000
k2           |   0.500000 |   0.500000 |   0.000000
k3           |   0.300000 |   0.300000 |   0.000000

Best maximum relative error for Lotka_Volterra (excluding ALL unidentifiable parameters): 0.0

Observables Statistics:
--------------------------------------------------
Variable      | Mean        | Std         | Min         | Max         | Range       | Turns
--------------------------------------------------
y1(t)        |   0.672850 |   0.837134 |   0.040066 |   2.526506 |   2.486440 |          3

Error Statistics for Best Solution:
--------------------------------------------------

Error Statistics by Observable:
--------------------------------------------------
Observable   | Error Type | Mean        | Std         | Min         | Max         | Range
--------------------------------------------------
y1(t)        | Absolute   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y1(t)        | Relative   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000

Detailed Time Series Comparison:
------------------------------------------------------------------------------------------------------------------------
t | y1(t)_act    | y1(t)_pred   | abs_err      | rel_err     
------------------------------------------------------------------------------------------------------------------------
  0.0000 |     2.000000 |     2.000000 |     0.000000 |     0.000000
  0.2000 |     2.193377 |     2.193377 |     0.000000 |     0.000000
  0.4000 |     2.361105 |     2.361105 |     0.000000 |     0.000000
  0.6000 |     2.480651 |     2.480651 |     0.000000 |     0.000000
  0.8000 |     2.526506 |     2.526506 |     0.000000 |     0.000000
  1.0000 |     2.476214 |     2.476214 |     0.000000 |     0.000000
  1.2000 |     2.319797 |     2.319797 |     0.000000 |     0.000000
  1.4000 |     2.068445 |     2.068445 |     0.000000 |     0.000000
  1.6000 |     1.755329 |     1.755329 |     0.000000 |     0.000000
  1.8000 |     1.424904 |     1.424904 |     0.000000 |     0.000000
  2.0000 |     1.116764 |     1.116764 |     0.000000 |     0.000000
  2.2000 |     0.854799 |     0.854799 |     0.000000 |     0.000000
  2.4000 |     0.646317 |     0.646317 |     0.000000 |     0.000000
  2.6000 |     0.487501 |     0.487501 |     0.000000 |     0.000000
  2.8000 |     0.369636 |     0.369636 |     0.000000 |     0.000000
  3.0000 |     0.283289 |     0.283289 |     0.000000 |     0.000000
  3.2000 |     0.220270 |     0.220270 |     0.000000 |     0.000000
  3.4000 |     0.174164 |     0.174164 |     0.000000 |     0.000000
  3.6000 |     0.140221 |     0.140221 |     0.000000 |     0.000000
  3.8000 |     0.115024 |     0.115024 |     0.000000 |     0.000000
  4.0000 |     0.096148 |     0.096148 |     0.000000 |     0.000000
  4.2000 |     0.081879 |     0.081879 |     0.000000 |     0.000000
  4.4000 |     0.071009 |     0.071009 |     0.000000 |     0.000000
  4.6000 |     0.062678 |     0.062678 |     0.000000 |     0.000000
  4.8000 |     0.056271 |     0.056271 |     0.000000 |     0.000000
  5.0000 |     0.051349 |     0.051349 |     0.000000 |     0.000000
  5.2000 |     0.047593 |     0.047593 |     0.000000 |     0.000000
  5.4000 |     0.044770 |     0.044770 |     0.000000 |     0.000000
  5.6000 |     0.042713 |     0.042713 |     0.000000 |     0.000000
  5.8000 |     0.041299 |     0.041299 |     0.000000 |     0.000000
  6.0000 |     0.040443 |     0.040443 |     0.000000 |     0.000000
  6.2000 |     0.040083 |     0.040083 |     0.000000 |     0.000000
  6.4000 |     0.040181 |     0.040181 |     0.000000 |     0.000000
  6.6000 |     0.040715 |     0.040715 |     0.000000 |     0.000000
  6.8000 |     0.041677 |     0.041677 |     0.000000 |     0.000000
  7.0000 |     0.043073 |     0.043073 |     0.000000 |     0.000000
  7.2000 |     0.044921 |     0.044921 |     0.000000 |     0.000000
  7.4000 |     0.047249 |     0.047249 |     0.000000 |     0.000000
  7.6000 |     0.050099 |     0.050099 |     0.000000 |     0.000000
  7.8000 |     0.053524 |     0.053524 |     0.000000 |     0.000000
  8.0000 |     0.057592 |     0.057592 |     0.000000 |     0.000000
  8.2000 |     0.062386 |     0.062386 |     0.000000 |     0.000000
  8.4000 |     0.068004 |     0.068004 |     0.000000 |     0.000000
  8.6000 |     0.074566 |     0.074566 |     0.000000 |     0.000000
  8.8000 |     0.082214 |     0.082214 |     0.000000 |     0.000000
  9.0000 |     0.091116 |     0.091116 |     0.000000 |     0.000000
  9.2000 |     0.101470 |     0.101470 |     0.000000 |     0.000000
  9.4000 |     0.113509 |     0.113509 |     0.000000 |     0.000000
  9.6000 |     0.127507 |     0.127507 |     0.000000 |     0.000000
  9.8000 |     0.143786 |     0.143786 |     0.000000 |     0.000000
 10.0000 |     0.162722 |     0.162722 |     0.000000 |     0.000000
 10.2000 |     0.184752 |     0.184752 |     0.000000 |     0.000000
 10.4000 |     0.210390 |     0.210390 |     0.000000 |     0.000000
 10.6000 |     0.240226 |     0.240226 |     0.000000 |     0.000000
 10.8000 |     0.274948 |     0.274948 |     0.000000 |     0.000000
 11.0000 |     0.315342 |     0.315342 |     0.000000 |     0.000000
 11.2000 |     0.362308 |     0.362308 |     0.000000 |     0.000000
 11.4000 |     0.416867 |     0.416867 |     0.000000 |     0.000000
 11.6000 |     0.480161 |     0.480161 |     0.000000 |     0.000000
 11.8000 |     0.553448 |     0.553448 |     0.000000 |     0.000000
 12.0000 |     0.638089 |     0.638089 |     0.000000 |     0.000000
 12.2000 |     0.735508 |     0.735508 |     0.000000 |     0.000000
 12.4000 |     0.847125 |     0.847125 |     0.000000 |     0.000000
 12.6000 |     0.974239 |     0.974239 |     0.000000 |     0.000000
 12.8000 |     1.117845 |     1.117845 |     0.000000 |     0.000000
 13.0000 |     1.278348 |     1.278348 |     0.000000 |     0.000000
 13.2000 |     1.455133 |     1.455133 |     0.000000 |     0.000000
 13.4000 |     1.645947 |     1.645947 |     0.000000 |     0.000000
 13.6000 |     1.846047 |     1.846047 |     0.000000 |     0.000000
 13.8000 |     2.047135 |     2.047135 |     0.000000 |     0.000000
 14.0000 |     2.236200 |     2.236200 |     0.000000 |     0.000000
 14.2000 |     2.394721 |     2.394721 |     0.000000 |     0.000000
 14.4000 |     2.499127 |     2.499127 |     0.000000 |     0.000000
 14.6000 |     2.523934 |     2.523934 |     0.000000 |     0.000000
 14.8000 |     2.448719 |     2.448719 |     0.000000 |     0.000000
 15.0000 |     2.267902 |     2.267902 |     0.000000 |     0.000000
 15.2000 |     1.998243 |     1.998243 |     0.000000 |     0.000000
 15.4000 |     1.676928 |     1.676928 |     0.000000 |     0.000000
 15.6000 |     1.348685 |     1.348685 |     0.000000 |     0.000000
 15.8000 |     1.049998 |     1.049998 |     0.000000 |     0.000000
 16.0000 |     0.800572 |     0.800572 |     0.000000 |     0.000000
 16.2000 |     0.604478 |     0.604478 |     0.000000 |     0.000000
 16.4000 |     0.456230 |     0.456230 |     0.000000 |     0.000000
 16.6000 |     0.346659 |     0.346659 |     0.000000 |     0.000000
 16.8000 |     0.266516 |     0.266516 |     0.000000 |     0.000000
 17.0000 |     0.208018 |     0.208018 |     0.000000 |     0.000000
 17.2000 |     0.165168 |     0.165168 |     0.000000 |     0.000000
 17.4000 |     0.133564 |     0.133564 |     0.000000 |     0.000000
 17.6000 |     0.110054 |     0.110054 |     0.000000 |     0.000000
 17.8000 |     0.092402 |     0.092402 |     0.000000 |     0.000000
 18.0000 |     0.079033 |     0.079033 |     0.000000 |     0.000000
 18.2000 |     0.068832 |     0.068832 |     0.000000 |     0.000000
 18.4000 |     0.061004 |     0.061004 |     0.000000 |     0.000000
 18.6000 |     0.054984 |     0.054984 |     0.000000 |     0.000000
 18.8000 |     0.050364 |     0.050364 |     0.000000 |     0.000000
 19.0000 |     0.046847 |     0.046847 |     0.000000 |     0.000000
 19.2000 |     0.044218 |     0.044218 |     0.000000 |     0.000000
 19.4000 |     0.042323 |     0.042323 |     0.000000 |     0.000000
 19.6000 |     0.041049 |     0.041049 |     0.000000 |     0.000000
 19.8000 |     0.040314 |     0.040314 |     0.000000 |     0.000000
 20.0000 |     0.040066 |     0.040066 |     0.000000 |     0.000000
------------------------------------------------------------------------------------------------------------------------
Starting model: lv_periodic

DEBUG [MPHCPE]: Starting parameter estimation...
DEBUG [MPHCPE]: Analyzing identifiability with 2 points
DEBUG [MPHCPE]: Final analysis with 1 points
DEBUG [MPHCPE]: Final unidentifiable dict: Dict{Any, Any}()
DEBUG [MPHCPE]: Final varlist: Num[a, d, b, c, x1(t), x2(t)]
We are trying these points:[95]
Using these observations and their derivatives:
Dict{Int64, Int64} with 2 entries:
  2 => 2
  1 => 2
total degree: 1
1-element Vector{Vector{ComplexF64}}:
 [1.5000000047453543 + 0.0im, 0.8000001012685329 + 0.0im, 0.900000014247918 + 0.0im, 3.000000609391902 + 0.0im]

Unidentifiability Analysis from MPHCPE:
All unidentifiable variables: Set{Any}()
Unidentifiable variables substitution dictionary: Dict{Any, Any}()
Trivially solvable variables: Dict{Any, Any}(_t95_x2ˍtt_t_ => 4.871660465426052, _t95_x1_t_ => 6.347479059150397, _t95_x1ˍtt_t_ => 0.9108414017194946, _t95_x2_t_ => 0.5063677156297721, _t95_x1ˍt_t_ => 6.628475948980746, _t95_x2ˍt_t_ => 1.0522236469792527)

DEBUG [ODEPEtestwrapper]: Processing solution 1

=== Model: lv_periodic ===

Found 1 distinct solution clusters:

Cluster 1: 1 similar solutions
Best solution (Error: 0.0):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
x1(t)        |   2.000000 |   1.999997 |   0.000002
x2(t)        |   0.500000 |   0.500001 |   0.000002
a            |   1.500000 |   1.500000 |   0.000000
b            |   0.900000 |   0.900000 |   0.000000
c            |   3.000000 |   3.000001 |   0.000000
d            |   0.800000 |   0.800000 |   0.000000

Best maximum relative error for lv_periodic (excluding ALL unidentifiable parameters): 2.0e-6

Observables Statistics:
--------------------------------------------------
Variable      | Mean        | Std         | Min         | Max         | Range       | Turns
--------------------------------------------------
y1(t)        |   3.925386 |   2.371848 |   1.284483 |   8.265790 |   6.981307 |          9
y2(t)        |   1.634971 |   1.499712 |   0.325777 |   4.814333 |   4.488556 |          9

Error Statistics for Best Solution:
--------------------------------------------------

Error Statistics by Observable:
--------------------------------------------------
Observable   | Error Type | Mean        | Std         | Min         | Max         | Range
--------------------------------------------------
y1(t)        | Absolute   |   0.000003 |   0.000004 |   0.000000 |   0.000019 |   0.000019
y1(t)        | Relative   |   0.000001 |   0.000001 |   0.000000 |   0.000004 |   0.000004
y2(t)        | Absolute   |   0.000002 |   0.000003 |   0.000000 |   0.000013 |   0.000013
y2(t)        | Relative   |   0.000001 |   0.000001 |   0.000000 |   0.000005 |   0.000005

Detailed Time Series Comparison:
------------------------------------------------------------------------------------------------------------------------
t | y1(t)_act    | y1(t)_pred   | abs_err      | rel_err      | y2(t)_act    | y2(t)_pred   | abs_err      | rel_err     
------------------------------------------------------------------------------------------------------------------------
  0.0000 |     2.000000 |     1.999997 |     0.000003 |     0.000002 |     0.500000 |     0.500001 |     0.000001 |     0.000002
  0.1500 |     2.355787 |     2.355783 |     0.000004 |     0.000002 |     0.413692 |     0.413692 |     0.000001 |     0.000002
  0.3000 |     2.801149 |     2.801144 |     0.000005 |     0.000002 |     0.359092 |     0.359092 |     0.000000 |     0.000001
  0.4500 |     3.349270 |     3.349264 |     0.000006 |     0.000002 |     0.330798 |     0.330798 |     0.000000 |     0.000001
  0.6000 |     4.013202 |     4.013194 |     0.000007 |     0.000002 |     0.327681 |     0.327681 |     0.000000 |     0.000000
  0.7500 |     4.801609 |     4.801600 |     0.000009 |     0.000002 |     0.354133 |     0.354132 |     0.000000 |     0.000001
  0.9000 |     5.709063 |     5.709054 |     0.000010 |     0.000002 |     0.423787 |     0.423786 |     0.000001 |     0.000002
  1.0500 |     6.693943 |     6.693933 |     0.000010 |     0.000001 |     0.568527 |     0.568525 |     0.000002 |     0.000004
  1.2000 |     7.630559 |     7.630551 |     0.000008 |     0.000001 |     0.857542 |     0.857538 |     0.000004 |     0.000005
  1.3500 |     8.225880 |     8.225877 |     0.000003 |     0.000000 |     1.423765 |     1.423758 |     0.000008 |     0.000005
  1.5000 |     7.985972 |     7.985980 |     0.000008 |     0.000001 |     2.427869 |     2.427856 |     0.000012 |     0.000005
  1.6500 |     6.594026 |     6.594045 |     0.000018 |     0.000003 |     3.752368 |     3.752355 |     0.000013 |     0.000003
  1.8000 |     4.627925 |     4.627944 |     0.000019 |     0.000004 |     4.692437 |     4.692432 |     0.000005 |     0.000001
  1.9500 |     3.041349 |     3.041361 |     0.000012 |     0.000004 |     4.709373 |     4.709377 |     0.000004 |     0.000001
  2.1000 |     2.097150 |     2.097157 |     0.000007 |     0.000003 |     4.063904 |     4.063911 |     0.000008 |     0.000002
  2.2500 |     1.605382 |     1.605385 |     0.000004 |     0.000002 |     3.224904 |     3.224911 |     0.000008 |     0.000002
  2.4000 |     1.372355 |     1.372356 |     0.000002 |     0.000001 |     2.453857 |     2.453863 |     0.000006 |     0.000003
  2.5500 |     1.289081 |     1.289082 |     0.000001 |     0.000000 |     1.833424 |     1.833429 |     0.000005 |     0.000003
  2.7000 |     1.302969 |     1.302969 |     0.000000 |     0.000000 |     1.364639 |     1.364643 |     0.000004 |     0.000003
  2.8500 |     1.390682 |     1.390682 |     0.000001 |     0.000001 |     1.022072 |     1.022075 |     0.000003 |     0.000003
  3.0000 |     1.543913 |     1.543912 |     0.000001 |     0.000001 |     0.776673 |     0.776675 |     0.000002 |     0.000002
  3.1500 |     1.762709 |     1.762707 |     0.000002 |     0.000001 |     0.603498 |     0.603499 |     0.000001 |     0.000002
  3.3000 |     2.052369 |     2.052366 |     0.000002 |     0.000001 |     0.483426 |     0.483427 |     0.000001 |     0.000002
  3.4500 |     2.421912 |     2.421909 |     0.000003 |     0.000001 |     0.402825 |     0.402826 |     0.000001 |     0.000001
  3.6000 |     2.883092 |     2.883088 |     0.000004 |     0.000001 |     0.352772 |     0.352772 |     0.000000 |     0.000001
  3.7500 |     3.449239 |     3.449235 |     0.000005 |     0.000001 |     0.328535 |     0.328535 |     0.000000 |     0.000000
  3.9000 |     4.133075 |     4.133069 |     0.000006 |     0.000001 |     0.329756 |     0.329756 |     0.000000 |     0.000000
  4.0500 |     4.941845 |     4.941838 |     0.000007 |     0.000001 |     0.361984 |     0.361983 |     0.000000 |     0.000001
  4.2000 |     5.866211 |     5.866203 |     0.000007 |     0.000001 |     0.441011 |     0.441010 |     0.000001 |     0.000002
  4.3500 |     6.855046 |     6.855039 |     0.000007 |     0.000001 |     0.603164 |     0.603162 |     0.000002 |     0.000003
  4.5000 |     7.761819 |     7.761813 |     0.000006 |     0.000001 |     0.926344 |     0.926340 |     0.000003 |     0.000004
  4.6500 |     8.258251 |     8.258250 |     0.000001 |     0.000000 |     1.554535 |     1.554529 |     0.000006 |     0.000004
  4.8000 |     7.835734 |     7.835742 |     0.000007 |     0.000001 |     2.633791 |     2.633782 |     0.000010 |     0.000004
  4.9500 |     6.284162 |     6.284177 |     0.000014 |     0.000002 |     3.955034 |     3.955025 |     0.000009 |     0.000002
  5.1000 |     4.326520 |     4.326533 |     0.000013 |     0.000003 |     4.759530 |     4.759528 |     0.000003 |     0.000001
  5.2500 |     2.846675 |     2.846683 |     0.000008 |     0.000003 |     4.635604 |     4.635608 |     0.000003 |     0.000001
  5.4000 |     1.992334 |     1.992339 |     0.000005 |     0.000002 |     3.930563 |     3.930569 |     0.000006 |     0.000001
  5.5500 |     1.553583 |     1.553585 |     0.000002 |     0.000002 |     3.090871 |     3.090876 |     0.000006 |     0.000002
  5.7000 |     1.350469 |     1.350470 |     0.000001 |     0.000001 |     2.341873 |     2.341878 |     0.000005 |     0.000002
  5.8500 |     1.285589 |     1.285590 |     0.000000 |     0.000000 |     1.747225 |     1.747229 |     0.000003 |     0.000002
  6.0000 |     1.312580 |     1.312580 |     0.000000 |     0.000000 |     1.301002 |     1.301004 |     0.000002 |     0.000002
  6.1500 |     1.411260 |     1.411259 |     0.000001 |     0.000000 |     0.976187 |     0.976189 |     0.000002 |     0.000002
  6.3000 |     1.575006 |     1.575005 |     0.000001 |     0.000001 |     0.744107 |     0.744108 |     0.000001 |     0.000002
  6.4500 |     1.804875 |     1.804873 |     0.000001 |     0.000001 |     0.580735 |     0.580736 |     0.000001 |     0.000001
  6.6000 |     2.106852 |     2.106851 |     0.000002 |     0.000001 |     0.467891 |     0.467891 |     0.000001 |     0.000001
  6.7500 |     2.490467 |     2.490465 |     0.000002 |     0.000001 |     0.392761 |     0.392761 |     0.000000 |     0.000001
  6.9000 |     2.967822 |     2.967820 |     0.000003 |     0.000001 |     0.347128 |     0.347128 |     0.000000 |     0.000001
  7.0500 |     3.552343 |     3.552340 |     0.000003 |     0.000001 |     0.326936 |     0.326937 |     0.000000 |     0.000000
  7.2000 |     4.256297 |     4.256293 |     0.000004 |     0.000001 |     0.332634 |     0.332634 |     0.000000 |     0.000000
  7.3500 |     5.085232 |     5.085227 |     0.000004 |     0.000001 |     0.371036 |     0.371036 |     0.000000 |     0.000001
  7.5000 |     6.025262 |     6.025257 |     0.000005 |     0.000001 |     0.460356 |     0.460356 |     0.000001 |     0.000001
  7.6500 |     7.014369 |     7.014364 |     0.000005 |     0.000001 |     0.641919 |     0.641918 |     0.000001 |     0.000002
  7.8000 |     7.882715 |     7.882711 |     0.000004 |     0.000000 |     1.003138 |     1.003136 |     0.000002 |     0.000002
  7.9500 |     8.265790 |     8.265790 |     0.000000 |     0.000000 |     1.697985 |     1.697980 |     0.000005 |     0.000003
  8.1000 |     7.652854 |     7.652860 |     0.000006 |     0.000001 |     2.847886 |     2.847879 |     0.000007 |     0.000002
  8.2500 |     5.963142 |     5.963152 |     0.000010 |     0.000002 |     4.142978 |     4.142973 |     0.000005 |     0.000001
  8.4000 |     4.039970 |     4.039978 |     0.000008 |     0.000002 |     4.799896 |     4.799895 |     0.000001 |     0.000000
  8.5500 |     2.669252 |     2.669258 |     0.000005 |     0.000002 |     4.546428 |     4.546431 |     0.000003 |     0.000001
  8.7000 |     1.898385 |     1.898388 |     0.000003 |     0.000001 |     3.794224 |     3.794227 |     0.000004 |     0.000001
  8.8500 |     1.507850 |     1.507852 |     0.000001 |     0.000001 |     2.959588 |     2.959591 |     0.000003 |     0.000001
  9.0000 |     1.332147 |     1.332148 |     0.000001 |     0.000001 |     2.234123 |     2.234125 |     0.000003 |     0.000001
  9.1500 |     1.284483 |     1.284484 |     0.000000 |     0.000000 |     1.665005 |     1.665007 |     0.000002 |     0.000001
  9.3000 |     1.324068 |     1.324068 |     0.000000 |     0.000000 |     1.240587 |     1.240589 |     0.000001 |     0.000001
  9.4500 |     1.433549 |     1.433549 |     0.000000 |     0.000000 |     0.932753 |     0.932754 |     0.000001 |     0.000001
  9.6000 |     1.607844 |     1.607844 |     0.000000 |     0.000000 |     0.713352 |     0.713353 |     0.000001 |     0.000001
  9.7500 |     1.848948 |     1.848947 |     0.000001 |     0.000000 |     0.559302 |     0.559302 |     0.000000 |     0.000001
  9.9000 |     2.163498 |     2.163497 |     0.000001 |     0.000000 |     0.453346 |     0.453347 |     0.000000 |     0.000001
 10.0500 |     2.561508 |     2.561507 |     0.000001 |     0.000000 |     0.383471 |     0.383471 |     0.000000 |     0.000000
 10.2000 |     3.055399 |     3.055398 |     0.000001 |     0.000000 |     0.342151 |     0.342151 |     0.000000 |     0.000000
 10.3500 |     3.658631 |     3.658629 |     0.000002 |     0.000000 |     0.326012 |     0.326012 |     0.000000 |     0.000000
 10.5000 |     4.382875 |     4.382874 |     0.000002 |     0.000000 |     0.336357 |     0.336357 |     0.000000 |     0.000000
 10.6500 |     5.231663 |     5.231661 |     0.000002 |     0.000000 |     0.381395 |     0.381394 |     0.000000 |     0.000000
 10.8000 |     6.185836 |     6.185833 |     0.000002 |     0.000000 |     0.482054 |     0.482054 |     0.000000 |     0.000001
 10.9500 |     7.170921 |     7.170919 |     0.000002 |     0.000000 |     0.685279 |     0.685279 |     0.000001 |     0.000001
 11.1000 |     7.991220 |     7.991218 |     0.000002 |     0.000000 |     1.088742 |     1.088740 |     0.000001 |     0.000001
 11.2500 |     8.246093 |     8.246093 |     0.000000 |     0.000000 |     1.854458 |     1.854456 |     0.000002 |     0.000001
 11.4000 |     7.438638 |     7.438641 |     0.000003 |     0.000000 |     3.067443 |     3.067439 |     0.000003 |     0.000001
 11.5500 |     5.636286 |     5.636291 |     0.000005 |     0.000001 |     4.312415 |     4.312413 |     0.000002 |     0.000001
 11.7000 |     3.770133 |     3.770137 |     0.000004 |     0.000001 |     4.814333 |     4.814333 |     0.000000 |     0.000000
 11.8500 |     2.508173 |     2.508175 |     0.000002 |     0.000001 |     4.444243 |     4.444244 |     0.000001 |     0.000000
 12.0000 |     1.814335 |     1.814336 |     0.000001 |     0.000001 |     3.656251 |     3.656252 |     0.000002 |     0.000000
 12.1500 |     1.467646 |     1.467646 |     0.000001 |     0.000001 |     2.831503 |     2.831504 |     0.000001 |     0.000000
 12.3000 |     1.317131 |     1.317131 |     0.000000 |     0.000000 |     2.130636 |     2.130637 |     0.000001 |     0.000000
 12.4500 |     1.285647 |     1.285647 |     0.000000 |     0.000000 |     1.586655 |     1.586655 |     0.000001 |     0.000000
 12.6000 |     1.337386 |     1.337387 |     0.000000 |     0.000000 |     1.183266 |     1.183266 |     0.000000 |     0.000000
 12.7500 |     1.457545 |     1.457545 |     0.000000 |     0.000000 |     0.891654 |     0.891655 |     0.000000 |     0.000000
 12.9000 |     1.642446 |     1.642446 |     0.000000 |     0.000000 |     0.684320 |     0.684320 |     0.000000 |     0.000000
 13.0500 |     1.894963 |     1.894963 |     0.000000 |     0.000000 |     0.539134 |     0.539134 |     0.000000 |     0.000000
 13.2000 |     2.222354 |     2.222354 |     0.000000 |     0.000000 |     0.439751 |     0.439751 |     0.000000 |     0.000000
 13.3500 |     2.635091 |     2.635092 |     0.000000 |     0.000000 |     0.374930 |     0.374930 |     0.000000 |     0.000000
 13.5000 |     3.145882 |     3.145882 |     0.000000 |     0.000000 |     0.337833 |     0.337833 |     0.000000 |     0.000000
 13.6500 |     3.768146 |     3.768146 |     0.000000 |     0.000000 |     0.325777 |     0.325777 |     0.000000 |     0.000000
 13.8000 |     4.512804 |     4.512804 |     0.000000 |     0.000000 |     0.340976 |     0.340976 |     0.000000 |     0.000000
 13.9500 |     5.381001 |     5.381001 |     0.000000 |     0.000000 |     0.393177 |     0.393177 |     0.000000 |     0.000000
 14.1000 |     6.347479 |     6.347479 |     0.000000 |     0.000000 |     0.506368 |     0.506368 |     0.000000 |     0.000000
 14.2500 |     7.323572 |     7.323572 |     0.000000 |     0.000000 |     0.733784 |     0.733784 |     0.000000 |     0.000000
 14.4000 |     8.085132 |     8.085132 |     0.000000 |     0.000000 |     1.183995 |     1.183995 |     0.000000 |     0.000000
 14.5500 |     8.196996 |     8.196996 |     0.000000 |     0.000000 |     2.023996 |     2.023996 |     0.000000 |     0.000000
 14.7000 |     7.195364 |     7.195363 |     0.000000 |     0.000000 |     3.289167 |     3.289168 |     0.000000 |     0.000000
 14.8500 |     5.308769 |     5.308768 |     0.000000 |     0.000000 |     4.460119 |     4.460119 |     0.000000 |     0.000000
 15.0000 |     3.518162 |     3.518161 |     0.000000 |     0.000000 |     4.804237 |     4.804236 |     0.000000 |     0.000000
------------------------------------------------------------------------------------------------------------------------
Starting model: vanderpol

DEBUG [MPHCPE]: Starting parameter estimation...
DEBUG [MPHCPE]: Analyzing identifiability with 2 points
DEBUG [MPHCPE]: Final analysis with 1 points
DEBUG [MPHCPE]: Final unidentifiable dict: Dict{Any, Any}()
DEBUG [MPHCPE]: Final varlist: Num[a, b, x1(t), x2(t)]
We are trying these points:[15]
Using these observations and their derivatives:
Dict{Int64, Int64} with 2 entries:
  2 => 1
  1 => 1
total degree: 1
1-element Vector{Vector{ComplexF64}}:
 [1.0000000000017009 + 0.0im, 0.9999999999996062 + 0.0im]

Unidentifiability Analysis from MPHCPE:
All unidentifiable variables: Set{Any}()
Unidentifiable variables substitution dictionary: Dict{Any, Any}()
Trivially solvable variables: Dict{Any, Any}(_t15_x1ˍt_t_ => -0.63637471323554, _t15_x2_t_ => -0.6363747132344575, _t15_x1_t_ => 1.720321426466097, _t15_x2ˍt_t_ => -0.4733414783185417)

DEBUG [ODEPEtestwrapper]: Processing solution 1

=== Model: vanderpol ===

Found 1 distinct solution clusters:

Cluster 1: 1 similar solutions
Best solution (Error: 0.0):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
x1(t)        |   2.000000 |   2.000000 |   0.000000
x2(t)        |   0.000000 |   0.000000 |   0.000000
a            |   1.000000 |   1.000000 |   0.000000
b            |   1.000000 |   1.000000 |   0.000000

Best maximum relative error for vanderpol (excluding ALL unidentifiable parameters): 0.0

Observables Statistics:
--------------------------------------------------
Variable      | Mean        | Std         | Min         | Max         | Range       | Turns
--------------------------------------------------
y1(t)        |  -0.248048 |   1.480457 |  -2.007941 |   2.000000 |   4.007941 |          1
y2(t)        |  -0.555194 |   1.124051 |  -2.677479 |   1.307089 |   3.984568 |          1

Error Statistics for Best Solution:
--------------------------------------------------

Error Statistics by Observable:
--------------------------------------------------
Observable   | Error Type | Mean        | Std         | Min         | Max         | Range
--------------------------------------------------
y1(t)        | Absolute   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y1(t)        | Relative   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y2(t)        | Absolute   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y2(t)        | Relative   |   0.000077 |   0.000771 |   0.000000 |   0.007748 |   0.007748

Detailed Time Series Comparison:
------------------------------------------------------------------------------------------------------------------------
t | y1(t)_act    | y1(t)_pred   | abs_err      | rel_err      | y2(t)_act    | y2(t)_pred   | abs_err      | rel_err     
------------------------------------------------------------------------------------------------------------------------
  0.0000 |     2.000000 |     2.000000 |     0.000000 |     0.000000 |     0.000000 |     0.000000 |     0.000000 |     0.007748
  0.0500 |     1.997621 |     1.997621 |     0.000000 |     0.000000 |    -0.092834 |    -0.092834 |     0.000000 |     0.000000
  0.1000 |     1.990933 |     1.990933 |     0.000000 |     0.000000 |    -0.172655 |    -0.172655 |     0.000000 |     0.000000
  0.1500 |     1.980540 |     1.980540 |     0.000000 |     0.000000 |    -0.241368 |    -0.241368 |     0.000000 |     0.000000
  0.2000 |     1.966953 |     1.966953 |     0.000000 |     0.000000 |    -0.300721 |    -0.300721 |     0.000000 |     0.000000
  0.2500 |     1.950598 |     1.950598 |     0.000000 |     0.000000 |    -0.352276 |    -0.352276 |     0.000000 |     0.000000
  0.3000 |     1.931832 |     1.931832 |     0.000000 |     0.000000 |    -0.397395 |    -0.397395 |     0.000000 |     0.000000
  0.3500 |     1.910946 |     1.910946 |     0.000000 |     0.000000 |    -0.437253 |    -0.437253 |     0.000000 |     0.000000
  0.4000 |     1.888178 |     1.888178 |     0.000000 |     0.000000 |    -0.472850 |    -0.472850 |     0.000000 |     0.000000
  0.4500 |     1.863718 |     1.863718 |     0.000000 |     0.000000 |    -0.505034 |    -0.505034 |     0.000000 |     0.000000
  0.5000 |     1.837719 |     1.837719 |     0.000000 |     0.000000 |    -0.534523 |    -0.534523 |     0.000000 |     0.000000
  0.5500 |     1.810300 |     1.810300 |     0.000000 |     0.000000 |    -0.561924 |    -0.561924 |     0.000000 |     0.000000
  0.6000 |     1.781553 |     1.781553 |     0.000000 |     0.000000 |    -0.587751 |    -0.587751 |     0.000000 |     0.000000
  0.6500 |     1.751544 |     1.751544 |     0.000000 |     0.000000 |    -0.612442 |    -0.612442 |     0.000000 |     0.000000
  0.7000 |     1.720321 |     1.720321 |     0.000000 |     0.000000 |    -0.636375 |    -0.636375 |     0.000000 |     0.000000
  0.7500 |     1.687914 |     1.687914 |     0.000000 |     0.000000 |    -0.659878 |    -0.659878 |     0.000000 |     0.000000
  0.8000 |     1.654336 |     1.654336 |     0.000000 |     0.000000 |    -0.683242 |    -0.683242 |     0.000000 |     0.000000
  0.8500 |     1.619588 |     1.619588 |     0.000000 |     0.000000 |    -0.706727 |    -0.706727 |     0.000000 |     0.000000
  0.9000 |     1.583657 |     1.583657 |     0.000000 |     0.000000 |    -0.730571 |    -0.730571 |     0.000000 |     0.000000
  0.9500 |     1.546521 |     1.546521 |     0.000000 |     0.000000 |    -0.754997 |    -0.754997 |     0.000000 |     0.000000
  1.0000 |     1.508144 |     1.508144 |     0.000000 |     0.000000 |    -0.780218 |    -0.780218 |     0.000000 |     0.000000
  1.0500 |     1.468482 |     1.468482 |     0.000000 |     0.000000 |    -0.806442 |    -0.806442 |     0.000000 |     0.000000
  1.1000 |     1.427480 |     1.427480 |     0.000000 |     0.000000 |    -0.833875 |    -0.833875 |     0.000000 |     0.000000
  1.1500 |     1.385071 |     1.385071 |     0.000000 |     0.000000 |    -0.862730 |    -0.862730 |     0.000000 |     0.000000
  1.2000 |     1.341180 |     1.341180 |     0.000000 |     0.000000 |    -0.893221 |    -0.893221 |     0.000000 |     0.000000
  1.2500 |     1.295718 |     1.295718 |     0.000000 |     0.000000 |    -0.925578 |    -0.925578 |     0.000000 |     0.000000
  1.3000 |     1.248587 |     1.248587 |     0.000000 |     0.000000 |    -0.960040 |    -0.960040 |     0.000000 |     0.000000
  1.3500 |     1.199675 |     1.199675 |     0.000000 |     0.000000 |    -0.996862 |    -0.996862 |     0.000000 |     0.000000
  1.4000 |     1.148857 |     1.148857 |     0.000000 |     0.000000 |    -1.036317 |    -1.036317 |     0.000000 |     0.000000
  1.4500 |     1.095994 |     1.095994 |     0.000000 |     0.000000 |    -1.078699 |    -1.078699 |     0.000000 |     0.000000
  1.5000 |     1.040933 |     1.040933 |     0.000000 |     0.000000 |    -1.124321 |    -1.124321 |     0.000000 |     0.000000
  1.5500 |     0.983503 |     0.983503 |     0.000000 |     0.000000 |    -1.173514 |    -1.173514 |     0.000000 |     0.000000
  1.6000 |     0.923516 |     0.923516 |     0.000000 |     0.000000 |    -1.226631 |    -1.226631 |     0.000000 |     0.000000
  1.6500 |     0.860768 |     0.860768 |     0.000000 |     0.000000 |    -1.284035 |    -1.284035 |     0.000000 |     0.000000
  1.7000 |     0.795035 |     0.795035 |     0.000000 |     0.000000 |    -1.346097 |    -1.346097 |     0.000000 |     0.000000
  1.7500 |     0.726075 |     0.726075 |     0.000000 |     0.000000 |    -1.413182 |    -1.413182 |     0.000000 |     0.000000
  1.8000 |     0.653627 |     0.653627 |     0.000000 |     0.000000 |    -1.485628 |    -1.485628 |     0.000000 |     0.000000
  1.8500 |     0.577418 |     0.577418 |     0.000000 |     0.000000 |    -1.563720 |    -1.563720 |     0.000000 |     0.000000
  1.9000 |     0.497158 |     0.497158 |     0.000000 |     0.000000 |    -1.647649 |    -1.647649 |     0.000000 |     0.000000
  1.9500 |     0.412555 |     0.412555 |     0.000000 |     0.000000 |    -1.737460 |    -1.737460 |     0.000000 |     0.000000
  2.0000 |     0.323317 |     0.323317 |     0.000000 |     0.000000 |    -1.832975 |    -1.832975 |     0.000000 |     0.000000
  2.0500 |     0.229170 |     0.229170 |     0.000000 |     0.000000 |    -1.933701 |    -1.933701 |     0.000000 |     0.000000
  2.1000 |     0.129875 |     0.129875 |     0.000000 |     0.000000 |    -2.038712 |    -2.038712 |     0.000000 |     0.000000
  2.1500 |     0.025252 |     0.025252 |     0.000000 |     0.000000 |    -2.146511 |    -2.146511 |     0.000000 |     0.000000
  2.2000 |    -0.084786 |    -0.084786 |     0.000000 |     0.000000 |    -2.254874 |    -2.254874 |     0.000000 |     0.000000
  2.2500 |    -0.200194 |    -0.200194 |     0.000000 |     0.000000 |    -2.360708 |    -2.360708 |     0.000000 |     0.000000
  2.3000 |    -0.320747 |    -0.320747 |     0.000000 |     0.000000 |    -2.459934 |    -2.459934 |     0.000000 |     0.000000
  2.3500 |    -0.445993 |    -0.445993 |     0.000000 |     0.000000 |    -2.547458 |    -2.547458 |     0.000000 |     0.000000
  2.4000 |    -0.575199 |    -0.575199 |     0.000000 |     0.000000 |    -2.617284 |    -2.617284 |     0.000000 |     0.000000
  2.4500 |    -0.707317 |    -0.707317 |     0.000000 |     0.000000 |    -2.662828 |    -2.662828 |     0.000000 |     0.000000
  2.5000 |    -0.840966 |    -0.840966 |     0.000000 |     0.000000 |    -2.677479 |    -2.677479 |     0.000000 |     0.000000
  2.5500 |    -0.974451 |    -0.974451 |     0.000000 |     0.000000 |    -2.655393 |    -2.655393 |     0.000000 |     0.000000
  2.6000 |    -1.105823 |    -1.105823 |     0.000000 |     0.000000 |    -2.592427 |    -2.592427 |     0.000000 |     0.000000
  2.6500 |    -1.232985 |    -1.232985 |     0.000000 |     0.000000 |    -2.487030 |    -2.487030 |     0.000000 |     0.000000
  2.7000 |    -1.353844 |    -1.353844 |     0.000000 |     0.000000 |    -2.340853 |    -2.340853 |     0.000000 |     0.000000
  2.7500 |    -1.466472 |    -1.466472 |     0.000000 |     0.000000 |    -2.158851 |    -2.158851 |     0.000000 |     0.000000
  2.8000 |    -1.569261 |    -1.569261 |     0.000000 |     0.000000 |    -1.948795 |    -1.948795 |     0.000000 |     0.000000
  2.8500 |    -1.661043 |    -1.661043 |     0.000000 |     0.000000 |    -1.720274 |    -1.720274 |     0.000000 |     0.000000
  2.9000 |    -1.741150 |    -1.741150 |     0.000000 |     0.000000 |    -1.483427 |    -1.483427 |     0.000000 |     0.000000
  2.9500 |    -1.809406 |    -1.809406 |     0.000000 |     0.000000 |    -1.247726 |    -1.247726 |     0.000000 |     0.000000
  3.0000 |    -1.866074 |    -1.866074 |     0.000000 |     0.000000 |    -1.021060 |    -1.021060 |     0.000000 |     0.000000
  3.0500 |    -1.911760 |    -1.911760 |     0.000000 |     0.000000 |    -0.809239 |    -0.809239 |     0.000000 |     0.000000
  3.1000 |    -1.947307 |    -1.947307 |     0.000000 |     0.000000 |    -0.615921 |    -0.615921 |     0.000000 |     0.000000
  3.1500 |    -1.973690 |    -1.973690 |     0.000000 |     0.000000 |    -0.442836 |    -0.442836 |     0.000000 |     0.000000
  3.2000 |    -1.991932 |    -1.991932 |     0.000000 |     0.000000 |    -0.290187 |    -0.290187 |     0.000000 |     0.000000
  3.2500 |    -2.003035 |    -2.003035 |     0.000000 |     0.000000 |    -0.157087 |    -0.157087 |     0.000000 |     0.000000
  3.3000 |    -2.007941 |    -2.007941 |     0.000000 |     0.000000 |    -0.041965 |    -0.041965 |     0.000000 |     0.000000
  3.3500 |    -2.007499 |    -2.007499 |     0.000000 |     0.000000 |     0.057105 |     0.057105 |     0.000000 |     0.000000
  3.4000 |    -2.002464 |    -2.002464 |     0.000000 |     0.000000 |     0.142163 |     0.142163 |     0.000000 |     0.000000
  3.4500 |    -1.993483 |    -1.993483 |     0.000000 |     0.000000 |     0.215209 |     0.215209 |     0.000000 |     0.000000
  3.5000 |    -1.981112 |    -1.981112 |     0.000000 |     0.000000 |     0.278099 |     0.278099 |     0.000000 |     0.000000
  3.5500 |    -1.965815 |    -1.965815 |     0.000000 |     0.000000 |     0.332505 |     0.332505 |     0.000000 |     0.000000
  3.6000 |    -1.947978 |    -1.947978 |     0.000000 |     0.000000 |     0.379892 |     0.379892 |     0.000000 |     0.000000
  3.6500 |    -1.927921 |    -1.927921 |     0.000000 |     0.000000 |     0.421527 |     0.421527 |     0.000000 |     0.000000
  3.7000 |    -1.905903 |    -1.905903 |     0.000000 |     0.000000 |     0.458491 |     0.458491 |     0.000000 |     0.000000
  3.7500 |    -1.882135 |    -1.882135 |     0.000000 |     0.000000 |     0.491701 |     0.491701 |     0.000000 |     0.000000
  3.8000 |    -1.856783 |    -1.856783 |     0.000000 |     0.000000 |     0.521930 |     0.521930 |     0.000000 |     0.000000
  3.8500 |    -1.829980 |    -1.829980 |     0.000000 |     0.000000 |     0.549829 |     0.549829 |     0.000000 |     0.000000
  3.9000 |    -1.801830 |    -1.801830 |     0.000000 |     0.000000 |     0.575951 |     0.575951 |     0.000000 |     0.000000
  3.9500 |    -1.772407 |    -1.772407 |     0.000000 |     0.000000 |     0.600763 |     0.600763 |     0.000000 |     0.000000
  4.0000 |    -1.741768 |    -1.741768 |     0.000000 |     0.000000 |     0.624666 |     0.624666 |     0.000000 |     0.000000
  4.0500 |    -1.709950 |    -1.709950 |     0.000000 |     0.000000 |     0.648006 |     0.648006 |     0.000000 |     0.000000
  4.1000 |    -1.676972 |    -1.676972 |     0.000000 |     0.000000 |     0.671084 |     0.671084 |     0.000000 |     0.000000
  4.1500 |    -1.642841 |    -1.642841 |     0.000000 |     0.000000 |     0.694172 |     0.694172 |     0.000000 |     0.000000
  4.2000 |    -1.607551 |    -1.607551 |     0.000000 |     0.000000 |     0.717512 |     0.717512 |     0.000000 |     0.000000
  4.2500 |    -1.571082 |    -1.571082 |     0.000000 |     0.000000 |     0.741330 |     0.741330 |     0.000000 |     0.000000
  4.3000 |    -1.533406 |    -1.533406 |     0.000000 |     0.000000 |     0.765840 |     0.765840 |     0.000000 |     0.000000
  4.3500 |    -1.494483 |    -1.494483 |     0.000000 |     0.000000 |     0.791248 |     0.791248 |     0.000000 |     0.000000
  4.4000 |    -1.454263 |    -1.454263 |     0.000000 |     0.000000 |     0.817757 |     0.817757 |     0.000000 |     0.000000
  4.4500 |    -1.412686 |    -1.412686 |     0.000000 |     0.000000 |     0.845573 |     0.845573 |     0.000000 |     0.000000
  4.5000 |    -1.369680 |    -1.369680 |     0.000000 |     0.000000 |     0.874905 |     0.874905 |     0.000000 |     0.000000
  4.5500 |    -1.325166 |    -1.325166 |     0.000000 |     0.000000 |     0.905972 |     0.905972 |     0.000000 |     0.000000
  4.6000 |    -1.279051 |    -1.279051 |     0.000000 |     0.000000 |     0.939003 |     0.939003 |     0.000000 |     0.000000
  4.6500 |    -1.231229 |    -1.231229 |     0.000000 |     0.000000 |     0.974243 |     0.974243 |     0.000000 |     0.000000
  4.7000 |    -1.181585 |    -1.181585 |     0.000000 |     0.000000 |     1.011952 |     1.011952 |     0.000000 |     0.000000
  4.7500 |    -1.129988 |    -1.129988 |     0.000000 |     0.000000 |     1.052410 |     1.052410 |     0.000000 |     0.000000
  4.8000 |    -1.076293 |    -1.076293 |     0.000000 |     0.000000 |     1.095916 |     1.095916 |     0.000000 |     0.000000
  4.8500 |    -1.020340 |    -1.020340 |     0.000000 |     0.000000 |     1.142789 |     1.142789 |     0.000000 |     0.000000
  4.9000 |    -0.961953 |    -0.961953 |     0.000000 |     0.000000 |     1.193370 |     1.193370 |     0.000000 |     0.000000
  4.9500 |    -0.900936 |    -0.900936 |     0.000000 |     0.000000 |     1.248014 |     1.248014 |     0.000000 |     0.000000
  5.0000 |    -0.837077 |    -0.837077 |     0.000000 |     0.000000 |     1.307089 |     1.307089 |     0.000000 |     0.000000
------------------------------------------------------------------------------------------------------------------------
Starting model: brusselator

DEBUG [MPHCPE]: Starting parameter estimation...
DEBUG [MPHCPE]: Analyzing identifiability with 2 points
DEBUG [MPHCPE]: Final analysis with 1 points
DEBUG [MPHCPE]: Final unidentifiable dict: Dict{Any, Any}()
DEBUG [MPHCPE]: Final varlist: Num[a, b, X(t), Y(t)]
We are trying these points:[81]
Using these observations and their derivatives:
Dict{Int64, Int64} with 2 entries:
  2 => 0
  1 => 2
total degree: 2
1-element Vector{Vector{ComplexF64}}:
 [0.9999999997425995 + 3.2626522339992623e-55im, 2.999999999631713 + 6.53328459664673e-55im, 0.9025765515891173 + 0.0im]

Unidentifiability Analysis from MPHCPE:
All unidentifiable variables: Set{Any}()
Unidentifiable variables substitution dictionary: Dict{Any, Any}()
Trivially solvable variables: Dict{Any, Any}(_t81_Xˍtt_t_ => 0.8342574334553632, _t81_Y_t_ => 2.4924768500011276, _t81_Xˍt_t_ => -0.49689410589780847, _t81_X_t_ => 0.5943175543086912)

DEBUG [ODEPEtestwrapper]: Processing solution 1

=== Model: brusselator ===

Found 1 distinct solution clusters:

Cluster 1: 1 similar solutions
Best solution (Error: 0.001992):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
X(t)         |   1.000000 |   0.700569 |   0.299431
Y(t)         |   1.000000 |   1.183693 |   0.183693
a            |   1.000000 |   1.000000 |   0.000000
b            |   3.000000 |   3.000000 |   0.000000

Best maximum relative error for brusselator (excluding ALL unidentifiable parameters): 0.299431

Observables Statistics:
--------------------------------------------------
Variable      | Mean        | Std         | Min         | Max         | Range       | Turns
--------------------------------------------------
y1(t)        |   0.833011 |   0.820786 |   0.313181 |   3.750592 |   3.437411 |          5
y2(t)        |   3.198223 |   1.213566 |   0.851827 |   4.733200 |   3.881373 |          4

Error Statistics for Best Solution:
--------------------------------------------------

Error Statistics by Observable:
--------------------------------------------------
Observable   | Error Type | Mean        | Std         | Min         | Max         | Range
--------------------------------------------------
y1(t)        | Absolute   |   0.007350 |   0.036629 |   0.000000 |   0.299431 |   0.299431
y1(t)        | Relative   |   0.011715 |   0.047359 |   0.000000 |   0.299431 |   0.299431
y2(t)        | Absolute   |   0.004528 |   0.022527 |   0.000000 |   0.183693 |   0.183693
y2(t)        | Relative   |   0.003527 |   0.020442 |   0.000000 |   0.183693 |   0.183693

Detailed Time Series Comparison:
------------------------------------------------------------------------------------------------------------------------
t | y1(t)_act    | y1(t)_pred   | abs_err      | rel_err      | y2(t)_act    | y2(t)_pred   | abs_err      | rel_err     
------------------------------------------------------------------------------------------------------------------------
  0.0000 |     1.000000 |     0.700569 |     0.299431 |     0.299431 |     1.000000 |     1.183693 |     0.183693 |     0.183693
  0.2000 |     0.695764 |     0.515894 |     0.179870 |     0.258522 |     1.337510 |     1.448521 |     0.111012 |     0.082999
  0.4000 |     0.521228 |     0.413838 |     0.107390 |     0.206033 |     1.591949 |     1.658621 |     0.066673 |     0.041881
  0.6000 |     0.421768 |     0.358564 |     0.063204 |     0.149855 |     1.798056 |     1.837230 |     0.039174 |     0.021787
  0.8000 |     0.366491 |     0.329570 |     0.036921 |     0.100742 |     1.975059 |     1.997731 |     0.022672 |     0.011479
  1.0000 |     0.336806 |     0.315216 |     0.021590 |     0.064101 |     2.134732 |     2.147784 |     0.013053 |     0.006114
  1.2000 |     0.321752 |     0.309029 |     0.012723 |     0.039543 |     2.284110 |     2.291647 |     0.007537 |     0.003300
  1.4000 |     0.315053 |     0.307460 |     0.007593 |     0.024100 |     2.427233 |     2.431624 |     0.004392 |     0.001809
  1.6000 |     0.313181 |     0.308577 |     0.004604 |     0.014700 |     2.566342 |     2.568938 |     0.002596 |     0.001011
  1.8000 |     0.314174 |     0.311332 |     0.002842 |     0.009047 |     2.702650 |     2.704214 |     0.001564 |     0.000579
  2.0000 |     0.316947 |     0.315157 |     0.001790 |     0.005647 |     2.836788 |     2.837754 |     0.000966 |     0.000340
  2.2000 |     0.320905 |     0.319753 |     0.001151 |     0.003587 |     2.969062 |     2.969678 |     0.000616 |     0.000207
  2.4000 |     0.325726 |     0.324970 |     0.000757 |     0.002324 |     3.099590 |     3.099999 |     0.000409 |     0.000132
  2.6000 |     0.331251 |     0.330742 |     0.000509 |     0.001537 |     3.228379 |     3.228665 |     0.000286 |     0.000089
  2.8000 |     0.337410 |     0.337060 |     0.000351 |     0.001039 |     3.355364 |     3.355576 |     0.000212 |     0.000063
  3.0000 |     0.344197 |     0.343950 |     0.000247 |     0.000718 |     3.480427 |     3.480595 |     0.000168 |     0.000048
  3.2000 |     0.351645 |     0.351467 |     0.000179 |     0.000508 |     3.603406 |     3.603548 |     0.000142 |     0.000039
  3.4000 |     0.359824 |     0.359692 |     0.000132 |     0.000368 |     3.724093 |     3.724219 |     0.000126 |     0.000034
  3.6000 |     0.368835 |     0.368735 |     0.000100 |     0.000272 |     3.842231 |     3.842348 |     0.000117 |     0.000031
  3.8000 |     0.378819 |     0.378741 |     0.000078 |     0.000205 |     3.957499 |     3.957612 |     0.000112 |     0.000028
  4.0000 |     0.389963 |     0.389901 |     0.000062 |     0.000158 |     4.069499 |     4.069609 |     0.000110 |     0.000027
  4.2000 |     0.402516 |     0.402466 |     0.000050 |     0.000125 |     4.177724 |     4.177833 |     0.000110 |     0.000026
  4.4000 |     0.416817 |     0.416775 |     0.000042 |     0.000100 |     4.281522 |     4.281632 |     0.000110 |     0.000026
  4.6000 |     0.433335 |     0.433300 |     0.000035 |     0.000081 |     4.380031 |     4.380142 |     0.000111 |     0.000025
  4.8000 |     0.452738 |     0.452708 |     0.000030 |     0.000067 |     4.472075 |     4.472188 |     0.000113 |     0.000025
  5.0000 |     0.476012 |     0.475986 |     0.000026 |     0.000055 |     4.556001 |     4.556116 |     0.000115 |     0.000025
  5.2000 |     0.504680 |     0.504657 |     0.000023 |     0.000046 |     4.629371 |     4.629487 |     0.000117 |     0.000025
  5.4000 |     0.541218 |     0.541198 |     0.000021 |     0.000038 |     4.688402 |     4.688521 |     0.000118 |     0.000025
  5.6000 |     0.589947 |     0.589929 |     0.000018 |     0.000031 |     4.726812 |     4.726931 |     0.000120 |     0.000025
  5.8000 |     0.659098 |     0.659083 |     0.000015 |     0.000023 |     4.733200 |     4.733320 |     0.000120 |     0.000025
  6.0000 |     0.766335 |     0.766325 |     0.000010 |     0.000013 |     4.684296 |     4.684413 |     0.000117 |     0.000025
  6.2000 |     0.956276 |     0.956280 |     0.000004 |     0.000004 |     4.524143 |     4.524247 |     0.000105 |     0.000023
  6.4000 |     1.368994 |     1.369047 |     0.000053 |     0.000039 |     4.084960 |     4.085011 |     0.000051 |     0.000012
  6.6000 |     2.476012 |     2.476268 |     0.000256 |     0.000103 |     2.811360 |     2.811181 |     0.000179 |     0.000064
  6.8000 |     3.750592 |     3.750779 |     0.000187 |     0.000050 |     1.087398 |     1.087230 |     0.000167 |     0.000154
  7.0000 |     3.453627 |     3.453655 |     0.000028 |     0.000008 |     0.851827 |     0.851802 |     0.000026 |     0.000030
  7.2000 |     2.917928 |     2.917934 |     0.000006 |     0.000002 |     0.950741 |     0.950735 |     0.000006 |     0.000006
  7.4000 |     2.436981 |     2.436982 |     0.000002 |     0.000001 |     1.097359 |     1.097357 |     0.000002 |     0.000002
  7.6000 |     2.023536 |     2.023536 |     0.000000 |     0.000000 |     1.265819 |     1.265818 |     0.000001 |     0.000001
  7.8000 |     1.669756 |     1.669755 |     0.000000 |     0.000000 |     1.451196 |     1.451195 |     0.000000 |     0.000000
  8.0000 |     1.368364 |     1.368363 |     0.000001 |     0.000000 |     1.649602 |     1.649602 |     0.000000 |     0.000000
  8.2000 |     1.114781 |     1.114780 |     0.000001 |     0.000001 |     1.855643 |     1.855643 |     0.000000 |     0.000000
  8.4000 |     0.906516 |     0.906516 |     0.000001 |     0.000001 |     2.062517 |     2.062517 |     0.000000 |     0.000000
  8.6000 |     0.741519 |     0.741518 |     0.000001 |     0.000001 |     2.263410 |     2.263411 |     0.000000 |     0.000000
  8.8000 |     0.616460 |     0.616460 |     0.000000 |     0.000001 |     2.453298 |     2.453299 |     0.000000 |     0.000000
  9.0000 |     0.526035 |     0.526035 |     0.000000 |     0.000001 |     2.629998 |     2.629998 |     0.000000 |     0.000000
  9.2000 |     0.463581 |     0.463581 |     0.000000 |     0.000001 |     2.793899 |     2.793899 |     0.000000 |     0.000000
  9.4000 |     0.422317 |     0.422317 |     0.000000 |     0.000000 |     2.946873 |     2.946873 |     0.000000 |     0.000000
  9.6000 |     0.396350 |     0.396350 |     0.000000 |     0.000000 |     3.091186 |     3.091186 |     0.000000 |     0.000000
  9.8000 |     0.381098 |     0.381098 |     0.000000 |     0.000000 |     3.228841 |     3.228841 |     0.000000 |     0.000000
 10.0000 |     0.373265 |     0.373265 |     0.000000 |     0.000000 |     3.361340 |     3.361340 |     0.000000 |     0.000000
 10.2000 |     0.370601 |     0.370601 |     0.000000 |     0.000000 |     3.489689 |     3.489689 |     0.000000 |     0.000000
 10.4000 |     0.371633 |     0.371633 |     0.000000 |     0.000000 |     3.614486 |     3.614486 |     0.000000 |     0.000000
 10.6000 |     0.375431 |     0.375431 |     0.000000 |     0.000000 |     3.736022 |     3.736022 |     0.000000 |     0.000000
 10.8000 |     0.381444 |     0.381444 |     0.000000 |     0.000000 |     3.854356 |     3.854356 |     0.000000 |     0.000000
 11.0000 |     0.389384 |     0.389384 |     0.000000 |     0.000000 |     3.969364 |     3.969364 |     0.000000 |     0.000000
 11.2000 |     0.399162 |     0.399162 |     0.000000 |     0.000000 |     4.080762 |     4.080762 |     0.000000 |     0.000000
 11.4000 |     0.410851 |     0.410851 |     0.000000 |     0.000000 |     4.188105 |     4.188105 |     0.000000 |     0.000000
 11.6000 |     0.424684 |     0.424684 |     0.000000 |     0.000000 |     4.290757 |     4.290757 |     0.000000 |     0.000000
 11.8000 |     0.441077 |     0.441077 |     0.000000 |     0.000000 |     4.387836 |     4.387836 |     0.000000 |     0.000000
 12.0000 |     0.460692 |     0.460692 |     0.000000 |     0.000000 |     4.478105 |     4.478105 |     0.000000 |     0.000000
 12.2000 |     0.484563 |     0.484563 |     0.000000 |     0.000000 |     4.559790 |     4.559790 |     0.000000 |     0.000000
 12.4000 |     0.514336 |     0.514336 |     0.000000 |     0.000000 |     4.630244 |     4.630244 |     0.000000 |     0.000000
 12.6000 |     0.552754 |     0.552754 |     0.000000 |     0.000000 |     4.685293 |     4.685293 |     0.000000 |     0.000000
 12.8000 |     0.604695 |     0.604695 |     0.000000 |     0.000000 |     4.717891 |     4.717891 |     0.000000 |     0.000000
 13.0000 |     0.679668 |     0.679668 |     0.000000 |     0.000000 |     4.714988 |     4.714988 |     0.000000 |     0.000000
 13.2000 |     0.798663 |     0.798663 |     0.000000 |     0.000000 |     4.649184 |     4.649184 |     0.000000 |     0.000000
 13.4000 |     1.016746 |     1.016746 |     0.000000 |     0.000000 |     4.452058 |     4.452058 |     0.000000 |     0.000000
 13.6000 |     1.513820 |     1.513820 |     0.000000 |     0.000000 |     3.909624 |     3.909624 |     0.000000 |     0.000000
 13.8000 |     2.814592 |     2.814592 |     0.000000 |     0.000000 |     2.393877 |     2.393877 |     0.000000 |     0.000000
 14.0000 |     3.749637 |     3.749637 |     0.000000 |     0.000000 |     0.967777 |     0.967777 |     0.000000 |     0.000000
 14.2000 |     3.335309 |     3.335309 |     0.000000 |     0.000000 |     0.866730 |     0.866730 |     0.000000 |     0.000000
 14.4000 |     2.807946 |     2.807946 |     0.000000 |     0.000000 |     0.980495 |     0.980495 |     0.000000 |     0.000000
 14.6000 |     2.342318 |     2.342318 |     0.000000 |     0.000000 |     1.132247 |     1.132247 |     0.000000 |     0.000000
 14.8000 |     1.942572 |     1.942572 |     0.000000 |     0.000000 |     1.304536 |     1.304536 |     0.000000 |     0.000000
 15.0000 |     1.600652 |     1.600652 |     0.000000 |     0.000000 |     1.493034 |     1.493034 |     0.000000 |     0.000000
 15.2000 |     1.309874 |     1.309874 |     0.000000 |     0.000000 |     1.693571 |     1.693571 |     0.000000 |     0.000000
 15.4000 |     1.066224 |     1.066224 |     0.000000 |     0.000000 |     1.900375 |     1.900375 |     0.000000 |     0.000000
 15.6000 |     0.867470 |     0.867470 |     0.000000 |     0.000000 |     2.106492 |     2.106492 |     0.000000 |     0.000000
 15.8000 |     0.711415 |     0.711415 |     0.000000 |     0.000000 |     2.305346 |     2.305346 |     0.000000 |     0.000000
 16.0000 |     0.594318 |     0.594318 |     0.000000 |     0.000000 |     2.492477 |     2.492477 |     0.000000 |     0.000000
 16.2000 |     0.510494 |     0.510494 |     0.000000 |     0.000000 |     2.666319 |     2.666319 |     0.000000 |     0.000000
 16.4000 |     0.453149 |     0.453149 |     0.000000 |     0.000000 |     2.827683 |     2.827683 |     0.000000 |     0.000000
 16.6000 |     0.415628 |     0.415628 |     0.000000 |     0.000000 |     2.978606 |     2.978606 |     0.000000 |     0.000000
 16.8000 |     0.392305 |     0.392305 |     0.000000 |     0.000000 |     3.121333 |     3.121333 |     0.000000 |     0.000000
 17.0000 |     0.378885 |     0.378885 |     0.000000 |     0.000000 |     3.257769 |     3.257769 |     0.000000 |     0.000000
 17.2000 |     0.372322 |     0.372322 |     0.000000 |     0.000000 |     3.389306 |     3.389306 |     0.000000 |     0.000000
 17.4000 |     0.370555 |     0.370555 |     0.000000 |     0.000000 |     3.516853 |     3.516853 |     0.000000 |     0.000000
 17.6000 |     0.372245 |     0.372245 |     0.000000 |     0.000000 |     3.640932 |     3.640932 |     0.000000 |     0.000000
 17.8000 |     0.376555 |     0.376555 |     0.000000 |     0.000000 |     3.761780 |     3.761780 |     0.000000 |     0.000000
 18.0000 |     0.382999 |     0.382999 |     0.000000 |     0.000000 |     3.879414 |     3.879414 |     0.000000 |     0.000000
 18.2000 |     0.391336 |     0.391336 |     0.000000 |     0.000000 |     3.993674 |     3.993674 |     0.000000 |     0.000000
 18.4000 |     0.401514 |     0.401514 |     0.000000 |     0.000000 |     4.104242 |     4.104242 |     0.000000 |     0.000000
 18.6000 |     0.413639 |     0.413639 |     0.000000 |     0.000000 |     4.210636 |     4.210636 |     0.000000 |     0.000000
 18.8000 |     0.427981 |     0.427981 |     0.000000 |     0.000000 |     4.312172 |     4.312172 |     0.000000 |     0.000000
 19.0000 |     0.445002 |     0.445002 |     0.000000 |     0.000000 |     4.407903 |     4.407903 |     0.000000 |     0.000000
 19.2000 |     0.465430 |     0.465430 |     0.000000 |     0.000000 |     4.496496 |     4.496496 |     0.000000 |     0.000000
 19.4000 |     0.490405 |     0.490405 |     0.000000 |     0.000000 |     4.576026 |     4.576026 |     0.000000 |     0.000000
 19.6000 |     0.521757 |     0.521757 |     0.000000 |     0.000000 |     4.643584 |     4.643584 |     0.000000 |     0.000000
 19.8000 |     0.562571 |     0.562571 |     0.000000 |     0.000000 |     4.694532 |     4.694532 |     0.000000 |     0.000000
 20.0000 |     0.618430 |     0.618430 |     0.000000 |     0.000000 |     4.720891 |     4.720891 |     0.000000 |     0.000000
------------------------------------------------------------------------------------------------------------------------
Starting model: fitzhugh-nagumo

DEBUG [MPHCPE]: Starting parameter estimation...
DEBUG [MPHCPE]: Analyzing identifiability with 2 points
DEBUG [MPHCPE]: Final analysis with 1 points
DEBUG [MPHCPE]: Final unidentifiable dict: Dict{Any, Any}()
DEBUG [MPHCPE]: Final varlist: Num[a, g, b, V(t), R(t)]
We are trying these points:[71]
Using these observations and their derivatives:
Dict{Int64, Int64} with 1 entry:
  1 => 4
total degree: 128
using monodromy, line 917

Unidentifiability Analysis from MPHCPE:
All unidentifiable variables: Set{Any}()
Unidentifiable variables substitution dictionary: Dict{Any, Any}()
Trivially solvable variables: Dict{Any, Any}(_t71_Vˍtt_t_ => -0.7212442489399109, _t71_Vˍt_t_ => -2.020235078195469, _t71_Vˍttt_t_ => 23.605677470564842, _t71_V_t_ => -1.0422300680064636, _t71_Vˍtttt_t_ => 69.83830261230469)

DEBUG [ODEPEtestwrapper]: Processing solution 1

DEBUG [ODEPEtestwrapper]: Processing solution 2

=== Model: fitzhugh-nagumo ===

Found 2 distinct solution clusters:

Cluster 1: 1 similar solutions
Best solution (Error: 0.0):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
V(t)         |  -1.000000 |  -1.000000 |   0.000000
R(t)         |   0.000000 |   0.032333 |   0.032333
g            |   3.000000 |   3.152913 |   0.050971
a            |   0.200000 |   0.311701 |   0.558506
b            |   0.200000 |   3.457522 |  16.287609

Cluster 2: 1 similar solutions
Best solution (Error: 0.0):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
V(t)         |  -1.000000 |  -1.000000 |   0.000000
R(t)         |   0.000000 |   0.000012 |   0.000012
g            |   3.000000 |   3.000055 |   0.000018
a            |   0.200000 |   0.200002 |   0.000012
b            |   0.200000 |   0.201133 |   0.005667

Best maximum relative error for fitzhugh-nagumo (excluding ALL unidentifiable parameters): 0.005667

Observables Statistics:
--------------------------------------------------
Variable      | Mean        | Std         | Min         | Max         | Range       | Turns
--------------------------------------------------
y1(t)        |  -1.030155 |   0.017712 |  -1.060439 |  -1.000000 |   0.060439 |          0

Error Statistics for Best Solution:
--------------------------------------------------

Error Statistics by Observable:
--------------------------------------------------
Observable   | Error Type | Mean        | Std         | Min         | Max         | Range
--------------------------------------------------
y1(t)        | Absolute   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y1(t)        | Relative   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000

Detailed Time Series Comparison:
------------------------------------------------------------------------------------------------------------------------
t | y1(t)_act    | y1(t)_pred   | abs_err      | rel_err     
------------------------------------------------------------------------------------------------------------------------
  0.0000 |    -1.000000 |    -1.000000 |     0.000000 |     0.000000
  0.0003 |    -1.000600 |    -1.000600 |     0.000000 |     0.000000
  0.0006 |    -1.001200 |    -1.001200 |     0.000000 |     0.000000
  0.0009 |    -1.001800 |    -1.001800 |     0.000000 |     0.000000
  0.0012 |    -1.002401 |    -1.002401 |     0.000000 |     0.000000
  0.0015 |    -1.003001 |    -1.003001 |     0.000000 |     0.000000
  0.0018 |    -1.003602 |    -1.003602 |     0.000000 |     0.000000
  0.0021 |    -1.004203 |    -1.004203 |     0.000000 |     0.000000
  0.0024 |    -1.004803 |    -1.004803 |     0.000000 |     0.000000
  0.0027 |    -1.005404 |    -1.005404 |     0.000000 |     0.000000
  0.0030 |    -1.006005 |    -1.006005 |     0.000000 |     0.000000
  0.0033 |    -1.006606 |    -1.006606 |     0.000000 |     0.000000
  0.0036 |    -1.007208 |    -1.007208 |     0.000000 |     0.000000
  0.0039 |    -1.007809 |    -1.007809 |     0.000000 |     0.000000
  0.0042 |    -1.008410 |    -1.008410 |     0.000000 |     0.000000
  0.0045 |    -1.009012 |    -1.009012 |     0.000000 |     0.000000
  0.0048 |    -1.009613 |    -1.009613 |     0.000000 |     0.000000
  0.0051 |    -1.010215 |    -1.010215 |     0.000000 |     0.000000
  0.0054 |    -1.010817 |    -1.010817 |     0.000000 |     0.000000
  0.0057 |    -1.011419 |    -1.011419 |     0.000000 |     0.000000
  0.0060 |    -1.012021 |    -1.012021 |     0.000000 |     0.000000
  0.0063 |    -1.012623 |    -1.012623 |     0.000000 |     0.000000
  0.0066 |    -1.013225 |    -1.013225 |     0.000000 |     0.000000
  0.0069 |    -1.013827 |    -1.013827 |     0.000000 |     0.000000
  0.0072 |    -1.014430 |    -1.014430 |     0.000000 |     0.000000
  0.0075 |    -1.015032 |    -1.015032 |     0.000000 |     0.000000
  0.0078 |    -1.015635 |    -1.015635 |     0.000000 |     0.000000
  0.0081 |    -1.016237 |    -1.016237 |     0.000000 |     0.000000
  0.0084 |    -1.016840 |    -1.016840 |     0.000000 |     0.000000
  0.0087 |    -1.017443 |    -1.017443 |     0.000000 |     0.000000
  0.0090 |    -1.018046 |    -1.018046 |     0.000000 |     0.000000
  0.0093 |    -1.018649 |    -1.018649 |     0.000000 |     0.000000
  0.0096 |    -1.019252 |    -1.019252 |     0.000000 |     0.000000
  0.0099 |    -1.019855 |    -1.019855 |     0.000000 |     0.000000
  0.0102 |    -1.020459 |    -1.020459 |     0.000000 |     0.000000
  0.0105 |    -1.021062 |    -1.021062 |     0.000000 |     0.000000
  0.0108 |    -1.021665 |    -1.021665 |     0.000000 |     0.000000
  0.0111 |    -1.022269 |    -1.022269 |     0.000000 |     0.000000
  0.0114 |    -1.022873 |    -1.022873 |     0.000000 |     0.000000
  0.0117 |    -1.023476 |    -1.023476 |     0.000000 |     0.000000
  0.0120 |    -1.024080 |    -1.024080 |     0.000000 |     0.000000
  0.0123 |    -1.024684 |    -1.024684 |     0.000000 |     0.000000
  0.0126 |    -1.025288 |    -1.025288 |     0.000000 |     0.000000
  0.0129 |    -1.025892 |    -1.025892 |     0.000000 |     0.000000
  0.0132 |    -1.026496 |    -1.026496 |     0.000000 |     0.000000
  0.0135 |    -1.027100 |    -1.027100 |     0.000000 |     0.000000
  0.0138 |    -1.027705 |    -1.027705 |     0.000000 |     0.000000
  0.0141 |    -1.028309 |    -1.028309 |     0.000000 |     0.000000
  0.0144 |    -1.028913 |    -1.028913 |     0.000000 |     0.000000
  0.0147 |    -1.029518 |    -1.029518 |     0.000000 |     0.000000
  0.0150 |    -1.030122 |    -1.030122 |     0.000000 |     0.000000
  0.0153 |    -1.030727 |    -1.030727 |     0.000000 |     0.000000
  0.0156 |    -1.031332 |    -1.031332 |     0.000000 |     0.000000
  0.0159 |    -1.031937 |    -1.031937 |     0.000000 |     0.000000
  0.0162 |    -1.032542 |    -1.032542 |     0.000000 |     0.000000
  0.0165 |    -1.033147 |    -1.033147 |     0.000000 |     0.000000
  0.0168 |    -1.033752 |    -1.033752 |     0.000000 |     0.000000
  0.0171 |    -1.034357 |    -1.034357 |     0.000000 |     0.000000
  0.0174 |    -1.034962 |    -1.034962 |     0.000000 |     0.000000
  0.0177 |    -1.035567 |    -1.035567 |     0.000000 |     0.000000
  0.0180 |    -1.036173 |    -1.036173 |     0.000000 |     0.000000
  0.0183 |    -1.036778 |    -1.036778 |     0.000000 |     0.000000
  0.0186 |    -1.037384 |    -1.037384 |     0.000000 |     0.000000
  0.0189 |    -1.037989 |    -1.037989 |     0.000000 |     0.000000
  0.0192 |    -1.038595 |    -1.038595 |     0.000000 |     0.000000
  0.0195 |    -1.039201 |    -1.039201 |     0.000000 |     0.000000
  0.0198 |    -1.039806 |    -1.039806 |     0.000000 |     0.000000
  0.0201 |    -1.040412 |    -1.040412 |     0.000000 |     0.000000
  0.0204 |    -1.041018 |    -1.041018 |     0.000000 |     0.000000
  0.0207 |    -1.041624 |    -1.041624 |     0.000000 |     0.000000
  0.0210 |    -1.042230 |    -1.042230 |     0.000000 |     0.000000
  0.0213 |    -1.042836 |    -1.042836 |     0.000000 |     0.000000
  0.0216 |    -1.043442 |    -1.043442 |     0.000000 |     0.000000
  0.0219 |    -1.044049 |    -1.044049 |     0.000000 |     0.000000
  0.0222 |    -1.044655 |    -1.044655 |     0.000000 |     0.000000
  0.0225 |    -1.045261 |    -1.045261 |     0.000000 |     0.000000
  0.0228 |    -1.045868 |    -1.045868 |     0.000000 |     0.000000
  0.0231 |    -1.046474 |    -1.046474 |     0.000000 |     0.000000
  0.0234 |    -1.047081 |    -1.047081 |     0.000000 |     0.000000
  0.0237 |    -1.047687 |    -1.047687 |     0.000000 |     0.000000
  0.0240 |    -1.048294 |    -1.048294 |     0.000000 |     0.000000
  0.0243 |    -1.048901 |    -1.048901 |     0.000000 |     0.000000
  0.0246 |    -1.049507 |    -1.049507 |     0.000000 |     0.000000
  0.0249 |    -1.050114 |    -1.050114 |     0.000000 |     0.000000
  0.0252 |    -1.050721 |    -1.050721 |     0.000000 |     0.000000
  0.0255 |    -1.051328 |    -1.051328 |     0.000000 |     0.000000
  0.0258 |    -1.051935 |    -1.051935 |     0.000000 |     0.000000
  0.0261 |    -1.052542 |    -1.052542 |     0.000000 |     0.000000
  0.0264 |    -1.053149 |    -1.053149 |     0.000000 |     0.000000
  0.0267 |    -1.053756 |    -1.053756 |     0.000000 |     0.000000
  0.0270 |    -1.054364 |    -1.054364 |     0.000000 |     0.000000
  0.0273 |    -1.054971 |    -1.054971 |     0.000000 |     0.000000
  0.0276 |    -1.055578 |    -1.055578 |     0.000000 |     0.000000
  0.0279 |    -1.056186 |    -1.056186 |     0.000000 |     0.000000
  0.0282 |    -1.056793 |    -1.056793 |     0.000000 |     0.000000
  0.0285 |    -1.057400 |    -1.057400 |     0.000000 |     0.000000
  0.0288 |    -1.058008 |    -1.058008 |     0.000000 |     0.000000
  0.0291 |    -1.058616 |    -1.058616 |     0.000000 |     0.000000
  0.0294 |    -1.059223 |    -1.059223 |     0.000000 |     0.000000
  0.0297 |    -1.059831 |    -1.059831 |     0.000000 |     0.000000
  0.0300 |    -1.060439 |    -1.060439 |     0.000000 |     0.000000
------------------------------------------------------------------------------------------------------------------------
Starting model: allee_competition

DEBUG [MPHCPE]: Starting parameter estimation...
DEBUG [MPHCPE]: Analyzing identifiability with 2 points
DEBUG [MPHCPE]: Final analysis with 1 points
DEBUG [MPHCPE]: Final unidentifiable dict: Dict{Any, Any}()
DEBUG [MPHCPE]: Final varlist: Num[K2, r1, K1, r2, b12, A1, A2, b21, N1(t), N2(t)]
We are trying these points:[17]
Using these observations and their derivatives:
Dict{Int64, Int64} with 2 entries:
  2 => 4
  1 => 4
total degree: 6561
using monodromy, line 917

Unidentifiability Analysis from MPHCPE:
All unidentifiable variables: Set{Any}()
Unidentifiable variables substitution dictionary: Dict{Any, Any}()
Trivially solvable variables: Dict{Any, Any}(_t17_N1ˍttt_t_ => -0.27296236863929835, _t17_N2ˍttt_t_ => -0.36848759266442244, _t17_N1ˍtttt_t_ => 0.3948405887276749, _t17_N1ˍt_t_ => -0.2478484469607034, _t17_N2ˍtttt_t_ => 0.5176800189574351, _t17_N2ˍtt_t_ => 0.3762851560136795, _t17_N1_t_ => 1.6790589568896956, _t17_N1ˍtt_t_ => 0.2810103633292229, _t17_N2ˍt_t_ => -0.5417671917477154, _t17_N2_t_ => 0.9022771502828943)

DEBUG [ODEPEtestwrapper]: Processing solution 1

DEBUG [ODEPEtestwrapper]: Processing solution 2

DEBUG [ODEPEtestwrapper]: Processing solution 3

DEBUG [ODEPEtestwrapper]: Processing solution 4

=== Model: allee_competition ===

Found 4 distinct solution clusters:

Cluster 1: 1 similar solutions
Best solution (Error: 0.0):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
N1(t)        |   2.000000 |   2.000000 |   0.000000
N2(t)        |   1.500000 |   1.500000 |   0.000000
r1           |   1.000000 |   0.000400 |   0.999600
r2           |   0.800000 |   0.800000 |   0.000000
K1           |  10.000000 |   0.200000 |   0.980000
K2           |   8.000000 |   8.000000 |   0.000000
A1           |   0.200000 |  10.000000 |  49.000000
A2           |   0.100000 |   0.100000 |   0.000000
b12          |   0.300000 |   0.300000 |   0.000000
b21          |   0.400000 |   0.400000 |   0.000000

Cluster 2: 1 similar solutions
Best solution (Error: 0.0):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
N1(t)        |   2.000000 |   2.000000 |   0.000000
N2(t)        |   1.500000 |   1.500000 |   0.000000
r1           |   1.000000 |   1.000000 |   0.000000
r2           |   0.800000 |   0.000125 |   0.999844
K1           |  10.000000 |  10.000000 |   0.000000
K2           |   8.000000 |   0.100000 |   0.987500
A1           |   0.200000 |   0.200000 |   0.000000
A2           |   0.100000 |   8.000000 |  79.000000
b12          |   0.300000 |   0.300000 |   0.000000
b21          |   0.400000 |   0.400000 |   0.000000

Cluster 3: 1 similar solutions
Best solution (Error: 0.0):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
N1(t)        |   2.000000 |   2.000000 |   0.000000
N2(t)        |   1.500000 |   1.500000 |   0.000000
r1           |   1.000000 |   0.000400 |   0.999600
r2           |   0.800000 |   0.000125 |   0.999844
K1           |  10.000000 |   0.200000 |   0.980000
K2           |   8.000000 |   0.100000 |   0.987500
A1           |   0.200000 |  10.000000 |  49.000000
A2           |   0.100000 |   8.000000 |  79.000000
b12          |   0.300000 |   0.300000 |   0.000000
b21          |   0.400000 |   0.400000 |   0.000000

Cluster 4: 1 similar solutions
Best solution (Error: 0.0):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
N1(t)        |   2.000000 |   2.000000 |   0.000000
N2(t)        |   1.500000 |   1.500000 |   0.000000
r1           |   1.000000 |   1.000000 |   0.000000
r2           |   0.800000 |   0.800000 |   0.000000
K1           |  10.000000 |  10.000000 |   0.000000
K2           |   8.000000 |   8.000000 |   0.000000
A1           |   0.200000 |   0.200000 |   0.000000
A2           |   0.100000 |   0.100000 |   0.000000
b12          |   0.300000 |   0.300000 |   0.000000
b21          |   0.400000 |   0.400000 |   0.000000

Best maximum relative error for allee_competition (excluding ALL unidentifiable parameters): 0.0

Observables Statistics:
--------------------------------------------------
Variable      | Mean        | Std         | Min         | Max         | Range       | Turns
--------------------------------------------------
y1(t)        |   1.641105 |   0.115076 |   1.524209 |   2.000000 |   0.475791 |          1
y2(t)        |   0.469971 |   0.386311 |   0.066694 |   1.500000 |   1.433306 |          0

Error Statistics for Best Solution:
--------------------------------------------------

Error Statistics by Observable:
--------------------------------------------------
Observable   | Error Type | Mean        | Std         | Min         | Max         | Range
--------------------------------------------------
y1(t)        | Absolute   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y1(t)        | Relative   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y2(t)        | Absolute   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y2(t)        | Relative   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000

Detailed Time Series Comparison:
------------------------------------------------------------------------------------------------------------------------
t | y1(t)_act    | y1(t)_pred   | abs_err      | rel_err      | y2(t)_act    | y2(t)_pred   | abs_err      | rel_err     
------------------------------------------------------------------------------------------------------------------------
  0.0000 |     2.000000 |     2.000000 |     0.000000 |     0.000000 |     1.500000 |     1.500000 |     0.000000 |     0.000000
  0.0500 |     1.970290 |     1.970290 |     0.000000 |     0.000000 |     1.449721 |     1.449721 |     0.000000 |     0.000000
  0.1000 |     1.942276 |     1.942276 |     0.000000 |     0.000000 |     1.401713 |     1.401713 |     0.000000 |     0.000000
  0.1500 |     1.915845 |     1.915845 |     0.000000 |     0.000000 |     1.355821 |     1.355821 |     0.000000 |     0.000000
  0.2000 |     1.890892 |     1.890892 |     0.000000 |     0.000000 |     1.311908 |     1.311908 |     0.000000 |     0.000000
  0.2500 |     1.867322 |     1.867322 |     0.000000 |     0.000000 |     1.269846 |     1.269846 |     0.000000 |     0.000000
  0.3000 |     1.845048 |     1.845048 |     0.000000 |     0.000000 |     1.229520 |     1.229520 |     0.000000 |     0.000000
  0.3500 |     1.823993 |     1.823993 |     0.000000 |     0.000000 |     1.190825 |     1.190825 |     0.000000 |     0.000000
  0.4000 |     1.804082 |     1.804082 |     0.000000 |     0.000000 |     1.153663 |     1.153663 |     0.000000 |     0.000000
  0.4500 |     1.785251 |     1.785251 |     0.000000 |     0.000000 |     1.117947 |     1.117947 |     0.000000 |     0.000000
  0.5000 |     1.767437 |     1.767437 |     0.000000 |     0.000000 |     1.083594 |     1.083594 |     0.000000 |     0.000000
  0.5500 |     1.750584 |     1.750584 |     0.000000 |     0.000000 |     1.050530 |     1.050530 |     0.000000 |     0.000000
  0.6000 |     1.734641 |     1.734641 |     0.000000 |     0.000000 |     1.018685 |     1.018685 |     0.000000 |     0.000000
  0.6500 |     1.719560 |     1.719560 |     0.000000 |     0.000000 |     0.987994 |     0.987994 |     0.000000 |     0.000000
  0.7000 |     1.705296 |     1.705296 |     0.000000 |     0.000000 |     0.958399 |     0.958399 |     0.000000 |     0.000000
  0.7500 |     1.691808 |     1.691808 |     0.000000 |     0.000000 |     0.929844 |     0.929844 |     0.000000 |     0.000000
  0.8000 |     1.679059 |     1.679059 |     0.000000 |     0.000000 |     0.902277 |     0.902277 |     0.000000 |     0.000000
  0.8500 |     1.667012 |     1.667012 |     0.000000 |     0.000000 |     0.875652 |     0.875652 |     0.000000 |     0.000000
  0.9000 |     1.655635 |     1.655635 |     0.000000 |     0.000000 |     0.849923 |     0.849923 |     0.000000 |     0.000000
  0.9500 |     1.644897 |     1.644897 |     0.000000 |     0.000000 |     0.825048 |     0.825048 |     0.000000 |     0.000000
  1.0000 |     1.634770 |     1.634770 |     0.000000 |     0.000000 |     0.800990 |     0.800990 |     0.000000 |     0.000000
  1.0500 |     1.625227 |     1.625227 |     0.000000 |     0.000000 |     0.777712 |     0.777712 |     0.000000 |     0.000000
  1.1000 |     1.616242 |     1.616242 |     0.000000 |     0.000000 |     0.755179 |     0.755179 |     0.000000 |     0.000000
  1.1500 |     1.607793 |     1.607793 |     0.000000 |     0.000000 |     0.733360 |     0.733360 |     0.000000 |     0.000000
  1.2000 |     1.599857 |     1.599857 |     0.000000 |     0.000000 |     0.712225 |     0.712225 |     0.000000 |     0.000000
  1.2500 |     1.592415 |     1.592415 |     0.000000 |     0.000000 |     0.691745 |     0.691745 |     0.000000 |     0.000000
  1.3000 |     1.585447 |     1.585447 |     0.000000 |     0.000000 |     0.671894 |     0.671894 |     0.000000 |     0.000000
  1.3500 |     1.578935 |     1.578935 |     0.000000 |     0.000000 |     0.652647 |     0.652647 |     0.000000 |     0.000000
  1.4000 |     1.572862 |     1.572862 |     0.000000 |     0.000000 |     0.633979 |     0.633979 |     0.000000 |     0.000000
  1.4500 |     1.567212 |     1.567212 |     0.000000 |     0.000000 |     0.615870 |     0.615870 |     0.000000 |     0.000000
  1.5000 |     1.561970 |     1.561970 |     0.000000 |     0.000000 |     0.598297 |     0.598297 |     0.000000 |     0.000000
  1.5500 |     1.557122 |     1.557122 |     0.000000 |     0.000000 |     0.581241 |     0.581241 |     0.000000 |     0.000000
  1.6000 |     1.552655 |     1.552655 |     0.000000 |     0.000000 |     0.564682 |     0.564682 |     0.000000 |     0.000000
  1.6500 |     1.548557 |     1.548557 |     0.000000 |     0.000000 |     0.548604 |     0.548604 |     0.000000 |     0.000000
  1.7000 |     1.544814 |     1.544814 |     0.000000 |     0.000000 |     0.532987 |     0.532987 |     0.000000 |     0.000000
  1.7500 |     1.541418 |     1.541418 |     0.000000 |     0.000000 |     0.517818 |     0.517818 |     0.000000 |     0.000000
  1.8000 |     1.538356 |     1.538356 |     0.000000 |     0.000000 |     0.503079 |     0.503079 |     0.000000 |     0.000000
  1.8500 |     1.535618 |     1.535618 |     0.000000 |     0.000000 |     0.488757 |     0.488757 |     0.000000 |     0.000000
  1.9000 |     1.533197 |     1.533197 |     0.000000 |     0.000000 |     0.474837 |     0.474837 |     0.000000 |     0.000000
  1.9500 |     1.531081 |     1.531081 |     0.000000 |     0.000000 |     0.461306 |     0.461306 |     0.000000 |     0.000000
  2.0000 |     1.529265 |     1.529265 |     0.000000 |     0.000000 |     0.448151 |     0.448151 |     0.000000 |     0.000000
  2.0500 |     1.527738 |     1.527738 |     0.000000 |     0.000000 |     0.435361 |     0.435361 |     0.000000 |     0.000000
  2.1000 |     1.526494 |     1.526494 |     0.000000 |     0.000000 |     0.422923 |     0.422923 |     0.000000 |     0.000000
  2.1500 |     1.525526 |     1.525526 |     0.000000 |     0.000000 |     0.410827 |     0.410827 |     0.000000 |     0.000000
  2.2000 |     1.524826 |     1.524826 |     0.000000 |     0.000000 |     0.399062 |     0.399062 |     0.000000 |     0.000000
  2.2500 |     1.524390 |     1.524390 |     0.000000 |     0.000000 |     0.387618 |     0.387618 |     0.000000 |     0.000000
  2.3000 |     1.524209 |     1.524209 |     0.000000 |     0.000000 |     0.376485 |     0.376485 |     0.000000 |     0.000000
  2.3500 |     1.524280 |     1.524280 |     0.000000 |     0.000000 |     0.365653 |     0.365653 |     0.000000 |     0.000000
  2.4000 |     1.524596 |     1.524596 |     0.000000 |     0.000000 |     0.355114 |     0.355114 |     0.000000 |     0.000000
  2.4500 |     1.525152 |     1.525152 |     0.000000 |     0.000000 |     0.344860 |     0.344860 |     0.000000 |     0.000000
  2.5000 |     1.525943 |     1.525943 |     0.000000 |     0.000000 |     0.334881 |     0.334881 |     0.000000 |     0.000000
  2.5500 |     1.526966 |     1.526966 |     0.000000 |     0.000000 |     0.325170 |     0.325170 |     0.000000 |     0.000000
  2.6000 |     1.528215 |     1.528215 |     0.000000 |     0.000000 |     0.315720 |     0.315720 |     0.000000 |     0.000000
  2.6500 |     1.529686 |     1.529686 |     0.000000 |     0.000000 |     0.306523 |     0.306523 |     0.000000 |     0.000000
  2.7000 |     1.531376 |     1.531376 |     0.000000 |     0.000000 |     0.297571 |     0.297571 |     0.000000 |     0.000000
  2.7500 |     1.533280 |     1.533280 |     0.000000 |     0.000000 |     0.288859 |     0.288859 |     0.000000 |     0.000000
  2.8000 |     1.535396 |     1.535396 |     0.000000 |     0.000000 |     0.280379 |     0.280379 |     0.000000 |     0.000000
  2.8500 |     1.537720 |     1.537720 |     0.000000 |     0.000000 |     0.272125 |     0.272125 |     0.000000 |     0.000000
  2.9000 |     1.540248 |     1.540248 |     0.000000 |     0.000000 |     0.264091 |     0.264091 |     0.000000 |     0.000000
  2.9500 |     1.542979 |     1.542979 |     0.000000 |     0.000000 |     0.256271 |     0.256271 |     0.000000 |     0.000000
  3.0000 |     1.545909 |     1.545909 |     0.000000 |     0.000000 |     0.248660 |     0.248660 |     0.000000 |     0.000000
  3.0500 |     1.549036 |     1.549036 |     0.000000 |     0.000000 |     0.241252 |     0.241252 |     0.000000 |     0.000000
  3.1000 |     1.552358 |     1.552358 |     0.000000 |     0.000000 |     0.234041 |     0.234041 |     0.000000 |     0.000000
  3.1500 |     1.555871 |     1.555871 |     0.000000 |     0.000000 |     0.227022 |     0.227022 |     0.000000 |     0.000000
  3.2000 |     1.559574 |     1.559574 |     0.000000 |     0.000000 |     0.220190 |     0.220190 |     0.000000 |     0.000000
  3.2500 |     1.563465 |     1.563465 |     0.000000 |     0.000000 |     0.213541 |     0.213541 |     0.000000 |     0.000000
  3.3000 |     1.567542 |     1.567542 |     0.000000 |     0.000000 |     0.207070 |     0.207070 |     0.000000 |     0.000000
  3.3500 |     1.571803 |     1.571803 |     0.000000 |     0.000000 |     0.200772 |     0.200772 |     0.000000 |     0.000000
  3.4000 |     1.576247 |     1.576247 |     0.000000 |     0.000000 |     0.194643 |     0.194643 |     0.000000 |     0.000000
  3.4500 |     1.580872 |     1.580872 |     0.000000 |     0.000000 |     0.188678 |     0.188678 |     0.000000 |     0.000000
  3.5000 |     1.585677 |     1.585677 |     0.000000 |     0.000000 |     0.182874 |     0.182874 |     0.000000 |     0.000000
  3.5500 |     1.590660 |     1.590660 |     0.000000 |     0.000000 |     0.177226 |     0.177226 |     0.000000 |     0.000000
  3.6000 |     1.595821 |     1.595821 |     0.000000 |     0.000000 |     0.171730 |     0.171730 |     0.000000 |     0.000000
  3.6500 |     1.601159 |     1.601159 |     0.000000 |     0.000000 |     0.166383 |     0.166383 |     0.000000 |     0.000000
  3.7000 |     1.606671 |     1.606671 |     0.000000 |     0.000000 |     0.161181 |     0.161181 |     0.000000 |     0.000000
  3.7500 |     1.612359 |     1.612359 |     0.000000 |     0.000000 |     0.156120 |     0.156120 |     0.000000 |     0.000000
  3.8000 |     1.618220 |     1.618220 |     0.000000 |     0.000000 |     0.151197 |     0.151197 |     0.000000 |     0.000000
  3.8500 |     1.624255 |     1.624255 |     0.000000 |     0.000000 |     0.146408 |     0.146408 |     0.000000 |     0.000000
  3.9000 |     1.630462 |     1.630462 |     0.000000 |     0.000000 |     0.141750 |     0.141750 |     0.000000 |     0.000000
  3.9500 |     1.636841 |     1.636841 |     0.000000 |     0.000000 |     0.137220 |     0.137220 |     0.000000 |     0.000000
  4.0000 |     1.643393 |     1.643393 |     0.000000 |     0.000000 |     0.132815 |     0.132815 |     0.000000 |     0.000000
  4.0500 |     1.650116 |     1.650116 |     0.000000 |     0.000000 |     0.128532 |     0.128532 |     0.000000 |     0.000000
  4.1000 |     1.657010 |     1.657010 |     0.000000 |     0.000000 |     0.124367 |     0.124367 |     0.000000 |     0.000000
  4.1500 |     1.664076 |     1.664076 |     0.000000 |     0.000000 |     0.120317 |     0.120317 |     0.000000 |     0.000000
  4.2000 |     1.671313 |     1.671313 |     0.000000 |     0.000000 |     0.116381 |     0.116381 |     0.000000 |     0.000000
  4.2500 |     1.678721 |     1.678721 |     0.000000 |     0.000000 |     0.112555 |     0.112555 |     0.000000 |     0.000000
  4.3000 |     1.686301 |     1.686301 |     0.000000 |     0.000000 |     0.108836 |     0.108836 |     0.000000 |     0.000000
  4.3500 |     1.694052 |     1.694052 |     0.000000 |     0.000000 |     0.105222 |     0.105222 |     0.000000 |     0.000000
  4.4000 |     1.701976 |     1.701976 |     0.000000 |     0.000000 |     0.101711 |     0.101711 |     0.000000 |     0.000000
  4.4500 |     1.710071 |     1.710071 |     0.000000 |     0.000000 |     0.098299 |     0.098299 |     0.000000 |     0.000000
  4.5000 |     1.718340 |     1.718340 |     0.000000 |     0.000000 |     0.094984 |     0.094984 |     0.000000 |     0.000000
  4.5500 |     1.726782 |     1.726782 |     0.000000 |     0.000000 |     0.091765 |     0.091765 |     0.000000 |     0.000000
  4.6000 |     1.735398 |     1.735398 |     0.000000 |     0.000000 |     0.088638 |     0.088638 |     0.000000 |     0.000000
  4.6500 |     1.744189 |     1.744189 |     0.000000 |     0.000000 |     0.085601 |     0.085601 |     0.000000 |     0.000000
  4.7000 |     1.753155 |     1.753155 |     0.000000 |     0.000000 |     0.082653 |     0.082653 |     0.000000 |     0.000000
  4.7500 |     1.762298 |     1.762298 |     0.000000 |     0.000000 |     0.079790 |     0.079790 |     0.000000 |     0.000000
  4.8000 |     1.771617 |     1.771617 |     0.000000 |     0.000000 |     0.077011 |     0.077011 |     0.000000 |     0.000000
  4.8500 |     1.781115 |     1.781115 |     0.000000 |     0.000000 |     0.074315 |     0.074315 |     0.000000 |     0.000000
  4.9000 |     1.790793 |     1.790793 |     0.000000 |     0.000000 |     0.071697 |     0.071697 |     0.000000 |     0.000000
  4.9500 |     1.800650 |     1.800650 |     0.000000 |     0.000000 |     0.069158 |     0.069158 |     0.000000 |     0.000000
  5.0000 |     1.810689 |     1.810689 |     0.000000 |     0.000000 |     0.066694 |     0.066694 |     0.000000 |     0.000000
------------------------------------------------------------------------------------------------------------------------
Starting model: two_compartment_pk

DEBUG [MPHCPE]: Starting parameter estimation...
DEBUG [MPHCPE]: Analyzing identifiability with 2 points
DEBUG [MPHCPE]: Final analysis with 1 points
DEBUG [MPHCPE]: Final unidentifiable dict: Dict{Any, Any}(k12 => 0.05274155718197471, V1 => 0.41406235679862713, V2 => 0.1891750422655828)
DEBUG [MPHCPE]: Final varlist: Num[k21, ke, C1(t), C2(t)]
We are trying these points:[59]
Using these observations and their derivatives:
Dict{Int64, Int64} with 1 entry:
  1 => 3
total degree: 32
2-element Vector{Vector{ComplexF64}}:
 [0.8004072956522671 - 1.401298464324817e-44im, 0.04685114716434249 + 9.80908925027372e-45im, -0.9479546720044755 - 8.96831017167883e-44im, 1.0887264105363466 + 0.0im, -0.9443054692809858 + 9.80908925027372e-45im]
 [0.0468511471643425 + 9.532524501199488e-38im, 0.800407295652267 - 3.250976563992889e-38im, 84.43465063968345 + 0.0im, -3.6258836677733424 + 1.47994738768526e-35im, 0.09699590200124594 - 7.537857524647919e-37im]

Unidentifiability Analysis from MPHCPE:
All unidentifiable variables: Set(Any[k12, k21, V1, C2(t), V2, ke])
Unidentifiable variables substitution dictionary: Dict{Any, Any}(k12 => 0.05274155718197471, V1 => 0.41406235679862713, V2 => 0.1891750422655828)
Trivially solvable variables: Dict{Any, Any}(_t59_C1ˍttt_t_ => -0.39123305019700183, _t59_C1ˍt_t_ => -0.6313336132474898, _t59_C1_t_ => 2.858434549190223, _t59_C1ˍtt_t_ => 0.4610089563271629)

DEBUG [ODEPEtestwrapper]: Processing solution 1

DEBUG [ODEPEtestwrapper]: Processing solution 2

=== Model: two_compartment_pk ===

All structurally unidentifiable parameters:
--------------------------------------------------
These parameters cannot be uniquely determined from the data:
  • k12
  • k21
  • V1
  • C2(t)
  • V2
  • ke


Minimal set of fixed values to make remaining parameters identifiable:
--------------------------------------------------
These parameters were fixed to make the system identifiable:
  • k12 = 0.052742
  • V1 = 0.414062
  • V2 = 0.189175


Found 2 distinct solution clusters:

Cluster 1: 1 similar solutions
Best solution (Error: 0.0):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
C1(t)        |  10.000000 |  10.000000 |   0.000000
C2(t)        |   0.000000 |  94.906521 |  94.906521
k12          |   0.500000 |   0.052742 |   0.894517
k21          |   0.250000 |   0.046851 |   0.812595
ke           |   0.150000 |   0.800407 |   4.336049
V1           |   1.000000 |   0.414062 |   0.585938
V2           |   2.000000 |   0.189175 |   0.905412

Cluster 2: 1 similar solutions
Best solution (Error: 0.0):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
C1(t)        |  10.000000 |  10.000000 |   0.000000
C2(t)        |   0.000000 | -15.051336 |  15.051336
k12          |   0.500000 |   0.052742 |   0.894517
k21          |   0.250000 |   0.800407 |   2.201629
ke           |   0.150000 |   0.046851 |   0.687659
V1           |   1.000000 |   0.414062 |   0.585938
V2           |   2.000000 |   0.189175 |   0.905412

Best maximum relative error for two_compartment_pk (excluding ALL unidentifiable parameters): 0.0

Observables Statistics:
--------------------------------------------------
Variable      | Mean        | Std         | Min         | Max         | Range       | Turns
--------------------------------------------------
y1(t)        |   4.019162 |   2.062923 |   2.142174 |  10.000000 |   7.857826 |          0

Error Statistics for Best Solution:
--------------------------------------------------

Error Statistics by Observable:
--------------------------------------------------
Observable   | Error Type | Mean        | Std         | Min         | Max         | Range
--------------------------------------------------
y1(t)        | Absolute   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y1(t)        | Relative   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000

Detailed Time Series Comparison:
------------------------------------------------------------------------------------------------------------------------
t | y1(t)_act    | y1(t)_pred   | abs_err      | rel_err     
------------------------------------------------------------------------------------------------------------------------
  0.0000 |    10.000000 |    10.000000 |     0.000000 |     0.000000
  0.0500 |     9.681747 |     9.681747 |     0.000000 |     0.000000
  0.1000 |     9.376611 |     9.376611 |     0.000000 |     0.000000
  0.1500 |     9.084042 |     9.084042 |     0.000000 |     0.000000
  0.2000 |     8.803513 |     8.803513 |     0.000000 |     0.000000
  0.2500 |     8.534522 |     8.534522 |     0.000000 |     0.000000
  0.3000 |     8.276585 |     8.276585 |     0.000000 |     0.000000
  0.3500 |     8.029239 |     8.029239 |     0.000000 |     0.000000
  0.4000 |     7.792040 |     7.792040 |     0.000000 |     0.000000
  0.4500 |     7.564565 |     7.564565 |     0.000000 |     0.000000
  0.5000 |     7.346406 |     7.346406 |     0.000000 |     0.000000
  0.5500 |     7.137173 |     7.137173 |     0.000000 |     0.000000
  0.6000 |     6.936492 |     6.936492 |     0.000000 |     0.000000
  0.6500 |     6.744006 |     6.744006 |     0.000000 |     0.000000
  0.7000 |     6.559371 |     6.559371 |     0.000000 |     0.000000
  0.7500 |     6.382260 |     6.382260 |     0.000000 |     0.000000
  0.8000 |     6.212357 |     6.212357 |     0.000000 |     0.000000
  0.8500 |     6.049360 |     6.049360 |     0.000000 |     0.000000
  0.9000 |     5.892982 |     5.892982 |     0.000000 |     0.000000
  0.9500 |     5.742944 |     5.742944 |     0.000000 |     0.000000
  1.0000 |     5.598981 |     5.598981 |     0.000000 |     0.000000
  1.0500 |     5.460841 |     5.460841 |     0.000000 |     0.000000
  1.1000 |     5.328278 |     5.328278 |     0.000000 |     0.000000
  1.1500 |     5.201059 |     5.201059 |     0.000000 |     0.000000
  1.2000 |     5.078962 |     5.078962 |     0.000000 |     0.000000
  1.2500 |     4.961772 |     4.961772 |     0.000000 |     0.000000
  1.3000 |     4.849284 |     4.849284 |     0.000000 |     0.000000
  1.3500 |     4.741301 |     4.741301 |     0.000000 |     0.000000
  1.4000 |     4.637634 |     4.637634 |     0.000000 |     0.000000
  1.4500 |     4.538105 |     4.538105 |     0.000000 |     0.000000
  1.5000 |     4.442538 |     4.442538 |     0.000000 |     0.000000
  1.5500 |     4.350770 |     4.350770 |     0.000000 |     0.000000
  1.6000 |     4.262641 |     4.262641 |     0.000000 |     0.000000
  1.6500 |     4.177999 |     4.177999 |     0.000000 |     0.000000
  1.7000 |     4.096698 |     4.096698 |     0.000000 |     0.000000
  1.7500 |     4.018600 |     4.018600 |     0.000000 |     0.000000
  1.8000 |     3.943569 |     3.943569 |     0.000000 |     0.000000
  1.8500 |     3.871479 |     3.871479 |     0.000000 |     0.000000
  1.9000 |     3.802205 |     3.802205 |     0.000000 |     0.000000
  1.9500 |     3.735632 |     3.735632 |     0.000000 |     0.000000
  2.0000 |     3.671645 |     3.671645 |     0.000000 |     0.000000
  2.0500 |     3.610138 |     3.610138 |     0.000000 |     0.000000
  2.1000 |     3.551006 |     3.551006 |     0.000000 |     0.000000
  2.1500 |     3.494150 |     3.494150 |     0.000000 |     0.000000
  2.2000 |     3.439476 |     3.439476 |     0.000000 |     0.000000
  2.2500 |     3.386892 |     3.386892 |     0.000000 |     0.000000
  2.3000 |     3.336312 |     3.336312 |     0.000000 |     0.000000
  2.3500 |     3.287651 |     3.287651 |     0.000000 |     0.000000
  2.4000 |     3.240830 |     3.240830 |     0.000000 |     0.000000
  2.4500 |     3.195773 |     3.195773 |     0.000000 |     0.000000
  2.5000 |     3.152405 |     3.152405 |     0.000000 |     0.000000
  2.5500 |     3.110656 |     3.110656 |     0.000000 |     0.000000
  2.6000 |     3.070460 |     3.070460 |     0.000000 |     0.000000
  2.6500 |     3.031750 |     3.031750 |     0.000000 |     0.000000
  2.7000 |     2.994466 |     2.994466 |     0.000000 |     0.000000
  2.7500 |     2.958548 |     2.958548 |     0.000000 |     0.000000
  2.8000 |     2.923940 |     2.923940 |     0.000000 |     0.000000
  2.8500 |     2.890586 |     2.890586 |     0.000000 |     0.000000
  2.9000 |     2.858435 |     2.858435 |     0.000000 |     0.000000
  2.9500 |     2.827436 |     2.827436 |     0.000000 |     0.000000
  3.0000 |     2.797542 |     2.797542 |     0.000000 |     0.000000
  3.0500 |     2.768708 |     2.768708 |     0.000000 |     0.000000
  3.1000 |     2.740888 |     2.740888 |     0.000000 |     0.000000
  3.1500 |     2.714041 |     2.714041 |     0.000000 |     0.000000
  3.2000 |     2.688127 |     2.688127 |     0.000000 |     0.000000
  3.2500 |     2.663106 |     2.663106 |     0.000000 |     0.000000
  3.3000 |     2.638943 |     2.638943 |     0.000000 |     0.000000
  3.3500 |     2.615600 |     2.615600 |     0.000000 |     0.000000
  3.4000 |     2.593045 |     2.593045 |     0.000000 |     0.000000
  3.4500 |     2.571245 |     2.571245 |     0.000000 |     0.000000
  3.5000 |     2.550169 |     2.550169 |     0.000000 |     0.000000
  3.5500 |     2.529786 |     2.529786 |     0.000000 |     0.000000
  3.6000 |     2.510068 |     2.510068 |     0.000000 |     0.000000
  3.6500 |     2.490987 |     2.490987 |     0.000000 |     0.000000
  3.7000 |     2.472518 |     2.472518 |     0.000000 |     0.000000
  3.7500 |     2.454635 |     2.454635 |     0.000000 |     0.000000
  3.8000 |     2.437314 |     2.437314 |     0.000000 |     0.000000
  3.8500 |     2.420531 |     2.420531 |     0.000000 |     0.000000
  3.9000 |     2.404265 |     2.404265 |     0.000000 |     0.000000
  3.9500 |     2.388495 |     2.388495 |     0.000000 |     0.000000
  4.0000 |     2.373199 |     2.373199 |     0.000000 |     0.000000
  4.0500 |     2.358359 |     2.358359 |     0.000000 |     0.000000
  4.1000 |     2.343956 |     2.343956 |     0.000000 |     0.000000
  4.1500 |     2.329971 |     2.329971 |     0.000000 |     0.000000
  4.2000 |     2.316388 |     2.316388 |     0.000000 |     0.000000
  4.2500 |     2.303191 |     2.303191 |     0.000000 |     0.000000
  4.3000 |     2.290363 |     2.290363 |     0.000000 |     0.000000
  4.3500 |     2.277890 |     2.277890 |     0.000000 |     0.000000
  4.4000 |     2.265757 |     2.265757 |     0.000000 |     0.000000
  4.4500 |     2.253950 |     2.253950 |     0.000000 |     0.000000
  4.5000 |     2.242456 |     2.242456 |     0.000000 |     0.000000
  4.5500 |     2.231262 |     2.231262 |     0.000000 |     0.000000
  4.6000 |     2.220356 |     2.220356 |     0.000000 |     0.000000
  4.6500 |     2.209726 |     2.209726 |     0.000000 |     0.000000
  4.7000 |     2.199362 |     2.199362 |     0.000000 |     0.000000
  4.7500 |     2.189252 |     2.189252 |     0.000000 |     0.000000
  4.8000 |     2.179386 |     2.179386 |     0.000000 |     0.000000
  4.8500 |     2.169755 |     2.169755 |     0.000000 |     0.000000
  4.9000 |     2.160348 |     2.160348 |     0.000000 |     0.000000
  4.9500 |     2.151158 |     2.151158 |     0.000000 |     0.000000
  5.0000 |     2.142174 |     2.142174 |     0.000000 |     0.000000
------------------------------------------------------------------------------------------------------------------------
Starting model: DAISY_ex3

DEBUG [MPHCPE]: Starting parameter estimation...
DEBUG [MPHCPE]: Analyzing identifiability with 2 points
DEBUG [MPHCPE]: Final analysis with 1 points
DEBUG [MPHCPE]: Final unidentifiable dict: Dict{Any, Any}()
DEBUG [MPHCPE]: Final varlist: Num[p7, p3, p6, p1, p4, x1(t), x2(t), x3(t), u0(t)]
We are trying these points:[94]
Using these observations and their derivatives:
Dict{Int64, Int64} with 2 entries:
  2 => 0
  1 => 7
total degree: 2048
using monodromy, line 917

Unidentifiability Analysis from MPHCPE:
All unidentifiable variables: Set{Any}()
Unidentifiable variables substitution dictionary: Dict{Any, Any}()
Trivially solvable variables: Dict{Any, Any}(_t94_u0ˍttt_t_ => 0, _t94_x1ˍttttt_t_ => 2.5751391923986375, _t94_x1ˍtttttt_t_ => 1.4792048465460539, _t94_u0ˍt_t_ => 1.0, _t94_u0ˍttttt_t_ => 0, _t94_x1ˍt_t_ => 22.30763502292016, _t94_x1ˍtt_t_ => 13.193002283294504, _t94_u0ˍtttttt_t_ => 0, _t94_x1ˍttttttt_t_ => 0.856360673904419, _t94_u0ˍtttt_t_ => 0, _t94_u0_t_ => 5.449999999999986, _t94_u0ˍtt_t_ => 0, _t94_x1ˍtttt_t_ => 4.416226478337194, _t94_x1_t_ => 35.05429178965327, _t94_x1ˍttt_t_ => 7.651477886615794)

DEBUG [ODEPEtestwrapper]: Processing solution 1

DEBUG [ODEPEtestwrapper]: Processing solution 2

=== Model: DAISY_ex3 ===

Found 2 distinct solution clusters:

Cluster 1: 1 similar solutions
Best solution (Error: 8.0e-6):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
x1(t)        |   0.200000 |   0.200968 |   0.004840
x2(t)        |   0.400000 |   0.398406 |   0.003984
x3(t)        |   0.600000 |   0.601773 |   0.002954
u0(t)        |   0.800000 |   0.800000 |   0.000000
p1           |   0.167000 |   0.167276 |   0.001655
p3           |   0.333000 |   0.333104 |   0.000314
p4           |   0.500000 |   0.499662 |   0.000676
p6           |   0.667000 |   0.667734 |   0.001101
p7           |   0.833000 |   0.834730 |   0.002077

Cluster 2: 1 similar solutions
Best solution (Error: 8.0e-6):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
x1(t)        |   0.200000 |   0.200968 |   0.004840
x2(t)        |   0.400000 |   0.398406 |   0.003984
x3(t)        |   0.600000 |   0.735266 |   0.225443
u0(t)        |   0.800000 |   0.800000 |   0.000000
p1           |   0.167000 |   0.167276 |   0.001655
p3           |   0.333000 |   0.333104 |   0.000314
p4           |   0.500000 |   0.834730 |   0.669460
p6           |   0.667000 |   0.779347 |   0.168436
p7           |   0.833000 |   0.499662 |   0.400165

Best maximum relative error for DAISY_ex3 (excluding ALL unidentifiable parameters): 0.00484

Observables Statistics:
--------------------------------------------------
Variable      | Mean        | Std         | Min         | Max         | Range       | Turns
--------------------------------------------------
y1(t)        |  12.456651 |  12.028778 |   0.200000 |  43.727590 |  43.527590 |          0
y2(t)        |   3.300000 |   1.465009 |   0.800000 |   5.800000 |   5.000000 |          0

Error Statistics for Best Solution:
--------------------------------------------------

Error Statistics by Observable:
--------------------------------------------------
Observable   | Error Type | Mean        | Std         | Min         | Max         | Range
--------------------------------------------------
y1(t)        | Absolute   |   0.000098 |   0.000207 |   0.000000 |   0.000968 |   0.000968
y1(t)        | Relative   |   0.000199 |   0.000680 |   0.000000 |   0.004840 |   0.004840
y2(t)        | Absolute   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y2(t)        | Relative   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000

Detailed Time Series Comparison:
------------------------------------------------------------------------------------------------------------------------
t | y1(t)_act    | y1(t)_pred   | abs_err      | rel_err      | y2(t)_act    | y2(t)_pred   | abs_err      | rel_err     
------------------------------------------------------------------------------------------------------------------------
  0.0000 |     0.200000 |     0.200968 |     0.000968 |     0.004840 |     0.800000 |     0.800000 |     0.000000 |     0.000000
  0.0500 |     0.259911 |     0.260793 |     0.000881 |     0.003390 |     0.850000 |     0.850000 |     0.000000 |     0.000000
  0.1000 |     0.322955 |     0.323757 |     0.000801 |     0.002481 |     0.900000 |     0.900000 |     0.000000 |     0.000000
  0.1500 |     0.389094 |     0.389822 |     0.000728 |     0.001871 |     0.950000 |     0.950000 |     0.000000 |     0.000000
  0.2000 |     0.458300 |     0.458961 |     0.000661 |     0.001442 |     1.000000 |     1.000000 |     0.000000 |     0.000000
  0.2500 |     0.530554 |     0.531153 |     0.000599 |     0.001129 |     1.050000 |     1.050000 |     0.000000 |     0.000000
  0.3000 |     0.605847 |     0.606390 |     0.000543 |     0.000896 |     1.100000 |     1.100000 |     0.000000 |     0.000000
  0.3500 |     0.684178 |     0.684670 |     0.000491 |     0.000718 |     1.150000 |     1.150000 |     0.000000 |     0.000000
  0.4000 |     0.765556 |     0.766000 |     0.000444 |     0.000580 |     1.200000 |     1.200000 |     0.000000 |     0.000000
  0.4500 |     0.849995 |     0.850396 |     0.000401 |     0.000472 |     1.250000 |     1.250000 |     0.000000 |     0.000000
  0.5000 |     0.937519 |     0.937881 |     0.000362 |     0.000386 |     1.300000 |     1.300000 |     0.000000 |     0.000000
  0.5500 |     1.028160 |     1.028486 |     0.000326 |     0.000317 |     1.350000 |     1.350000 |     0.000000 |     0.000000
  0.6000 |     1.121956 |     1.122250 |     0.000293 |     0.000261 |     1.400000 |     1.400000 |     0.000000 |     0.000000
  0.6500 |     1.218954 |     1.219217 |     0.000264 |     0.000216 |     1.450000 |     1.450000 |     0.000000 |     0.000000
  0.7000 |     1.319204 |     1.319441 |     0.000237 |     0.000179 |     1.500000 |     1.500000 |     0.000000 |     0.000000
  0.7500 |     1.422767 |     1.422980 |     0.000212 |     0.000149 |     1.550000 |     1.550000 |     0.000000 |     0.000000
  0.8000 |     1.529709 |     1.529899 |     0.000190 |     0.000124 |     1.600000 |     1.600000 |     0.000000 |     0.000000
  0.8500 |     1.640102 |     1.640272 |     0.000170 |     0.000104 |     1.650000 |     1.650000 |     0.000000 |     0.000000
  0.9000 |     1.754023 |     1.754175 |     0.000152 |     0.000087 |     1.700000 |     1.700000 |     0.000000 |     0.000000
  0.9500 |     1.871558 |     1.871694 |     0.000136 |     0.000072 |     1.750000 |     1.750000 |     0.000000 |     0.000000
  1.0000 |     1.992797 |     1.992918 |     0.000121 |     0.000061 |     1.800000 |     1.800000 |     0.000000 |     0.000000
  1.0500 |     2.117836 |     2.117943 |     0.000108 |     0.000051 |     1.850000 |     1.850000 |     0.000000 |     0.000000
  1.1000 |     2.246777 |     2.246872 |     0.000096 |     0.000043 |     1.900000 |     1.900000 |     0.000000 |     0.000000
  1.1500 |     2.379727 |     2.379812 |     0.000085 |     0.000036 |     1.950000 |     1.950000 |     0.000000 |     0.000000
  1.2000 |     2.516800 |     2.516875 |     0.000075 |     0.000030 |     2.000000 |     2.000000 |     0.000000 |     0.000000
  1.2500 |     2.658114 |     2.658180 |     0.000066 |     0.000025 |     2.050000 |     2.050000 |     0.000000 |     0.000000
  1.3000 |     2.803793 |     2.803852 |     0.000059 |     0.000021 |     2.100000 |     2.100000 |     0.000000 |     0.000000
  1.3500 |     2.953968 |     2.954019 |     0.000052 |     0.000018 |     2.150000 |     2.150000 |     0.000000 |     0.000000
  1.4000 |     3.108772 |     3.108818 |     0.000046 |     0.000015 |     2.200000 |     2.200000 |     0.000000 |     0.000000
  1.4500 |     3.268347 |     3.268387 |     0.000040 |     0.000012 |     2.250000 |     2.250000 |     0.000000 |     0.000000
  1.5000 |     3.432838 |     3.432873 |     0.000035 |     0.000010 |     2.300000 |     2.300000 |     0.000000 |     0.000000
  1.5500 |     3.602396 |     3.602427 |     0.000031 |     0.000009 |     2.350000 |     2.350000 |     0.000000 |     0.000000
  1.6000 |     3.777179 |     3.777205 |     0.000027 |     0.000007 |     2.400000 |     2.400000 |     0.000000 |     0.000000
  1.6500 |     3.957347 |     3.957371 |     0.000023 |     0.000006 |     2.450000 |     2.450000 |     0.000000 |     0.000000
  1.7000 |     4.143070 |     4.143090 |     0.000020 |     0.000005 |     2.500000 |     2.500000 |     0.000000 |     0.000000
  1.7500 |     4.334519 |     4.334537 |     0.000018 |     0.000004 |     2.550000 |     2.550000 |     0.000000 |     0.000000
  1.8000 |     4.531875 |     4.531891 |     0.000015 |     0.000003 |     2.600000 |     2.600000 |     0.000000 |     0.000000
  1.8500 |     4.735321 |     4.735335 |     0.000013 |     0.000003 |     2.650000 |     2.650000 |     0.000000 |     0.000000
  1.9000 |     4.945049 |     4.945060 |     0.000011 |     0.000002 |     2.700000 |     2.700000 |     0.000000 |     0.000000
  1.9500 |     5.161253 |     5.161263 |     0.000010 |     0.000002 |     2.750000 |     2.750000 |     0.000000 |     0.000000
  2.0000 |     5.384137 |     5.384146 |     0.000008 |     0.000002 |     2.800000 |     2.800000 |     0.000000 |     0.000000
  2.0500 |     5.613909 |     5.613917 |     0.000007 |     0.000001 |     2.850000 |     2.850000 |     0.000000 |     0.000000
  2.1000 |     5.850784 |     5.850790 |     0.000006 |     0.000001 |     2.900000 |     2.900000 |     0.000000 |     0.000000
  2.1500 |     6.094982 |     6.094987 |     0.000005 |     0.000001 |     2.950000 |     2.950000 |     0.000000 |     0.000000
  2.2000 |     6.346731 |     6.346735 |     0.000004 |     0.000001 |     3.000000 |     3.000000 |     0.000000 |     0.000000
  2.2500 |     6.606264 |     6.606268 |     0.000004 |     0.000001 |     3.050000 |     3.050000 |     0.000000 |     0.000000
  2.3000 |     6.873824 |     6.873827 |     0.000003 |     0.000000 |     3.100000 |     3.100000 |     0.000000 |     0.000000
  2.3500 |     7.149657 |     7.149660 |     0.000003 |     0.000000 |     3.150000 |     3.150000 |     0.000000 |     0.000000
  2.4000 |     7.434019 |     7.434021 |     0.000002 |     0.000000 |     3.200000 |     3.200000 |     0.000000 |     0.000000
  2.4500 |     7.727171 |     7.727173 |     0.000002 |     0.000000 |     3.250000 |     3.250000 |     0.000000 |     0.000000
  2.5000 |     8.029384 |     8.029386 |     0.000002 |     0.000000 |     3.300000 |     3.300000 |     0.000000 |     0.000000
  2.5500 |     8.340935 |     8.340936 |     0.000001 |     0.000000 |     3.350000 |     3.350000 |     0.000000 |     0.000000
  2.6000 |     8.662109 |     8.662110 |     0.000001 |     0.000000 |     3.400000 |     3.400000 |     0.000000 |     0.000000
  2.6500 |     8.993201 |     8.993202 |     0.000001 |     0.000000 |     3.450000 |     3.450000 |     0.000000 |     0.000000
  2.7000 |     9.334511 |     9.334511 |     0.000001 |     0.000000 |     3.500000 |     3.500000 |     0.000000 |     0.000000
  2.7500 |     9.686350 |     9.686350 |     0.000001 |     0.000000 |     3.550000 |     3.550000 |     0.000000 |     0.000000
  2.8000 |    10.049038 |    10.049038 |     0.000000 |     0.000000 |     3.600000 |     3.600000 |     0.000000 |     0.000000
  2.8500 |    10.422902 |    10.422902 |     0.000000 |     0.000000 |     3.650000 |     3.650000 |     0.000000 |     0.000000
  2.9000 |    10.808281 |    10.808281 |     0.000000 |     0.000000 |     3.700000 |     3.700000 |     0.000000 |     0.000000
  2.9500 |    11.205522 |    11.205522 |     0.000000 |     0.000000 |     3.750000 |     3.750000 |     0.000000 |     0.000000
  3.0000 |    11.614981 |    11.614982 |     0.000000 |     0.000000 |     3.800000 |     3.800000 |     0.000000 |     0.000000
  3.0500 |    12.037028 |    12.037028 |     0.000000 |     0.000000 |     3.850000 |     3.850000 |     0.000000 |     0.000000
  3.1000 |    12.472038 |    12.472038 |     0.000000 |     0.000000 |     3.900000 |     3.900000 |     0.000000 |     0.000000
  3.1500 |    12.920402 |    12.920402 |     0.000000 |     0.000000 |     3.950000 |     3.950000 |     0.000000 |     0.000000
  3.2000 |    13.382518 |    13.382518 |     0.000000 |     0.000000 |     4.000000 |     4.000000 |     0.000000 |     0.000000
  3.2500 |    13.858799 |    13.858799 |     0.000000 |     0.000000 |     4.050000 |     4.050000 |     0.000000 |     0.000000
  3.3000 |    14.349667 |    14.349667 |     0.000000 |     0.000000 |     4.100000 |     4.100000 |     0.000000 |     0.000000
  3.3500 |    14.855557 |    14.855557 |     0.000000 |     0.000000 |     4.150000 |     4.150000 |     0.000000 |     0.000000
  3.4000 |    15.376916 |    15.376917 |     0.000000 |     0.000000 |     4.200000 |     4.200000 |     0.000000 |     0.000000
  3.4500 |    15.914207 |    15.914207 |     0.000000 |     0.000000 |     4.250000 |     4.250000 |     0.000000 |     0.000000
  3.5000 |    16.467902 |    16.467902 |     0.000000 |     0.000000 |     4.300000 |     4.300000 |     0.000000 |     0.000000
  3.5500 |    17.038489 |    17.038489 |     0.000000 |     0.000000 |     4.350000 |     4.350000 |     0.000000 |     0.000000
  3.6000 |    17.626469 |    17.626469 |     0.000000 |     0.000000 |     4.400000 |     4.400000 |     0.000000 |     0.000000
  3.6500 |    18.232358 |    18.232358 |     0.000000 |     0.000000 |     4.450000 |     4.450000 |     0.000000 |     0.000000
  3.7000 |    18.856688 |    18.856688 |     0.000000 |     0.000000 |     4.500000 |     4.500000 |     0.000000 |     0.000000
  3.7500 |    19.500004 |    19.500004 |     0.000000 |     0.000000 |     4.550000 |     4.550000 |     0.000000 |     0.000000
  3.8000 |    20.162870 |    20.162870 |     0.000000 |     0.000000 |     4.600000 |     4.600000 |     0.000000 |     0.000000
  3.8500 |    20.845862 |    20.845862 |     0.000000 |     0.000000 |     4.650000 |     4.650000 |     0.000000 |     0.000000
  3.9000 |    21.549576 |    21.549576 |     0.000000 |     0.000000 |     4.700000 |     4.700000 |     0.000000 |     0.000000
  3.9500 |    22.274626 |    22.274626 |     0.000000 |     0.000000 |     4.750000 |     4.750000 |     0.000000 |     0.000000
  4.0000 |    23.021640 |    23.021640 |     0.000000 |     0.000000 |     4.800000 |     4.800000 |     0.000000 |     0.000000
  4.0500 |    23.791268 |    23.791268 |     0.000000 |     0.000000 |     4.850000 |     4.850000 |     0.000000 |     0.000000
  4.1000 |    24.584177 |    24.584177 |     0.000000 |     0.000000 |     4.900000 |     4.900000 |     0.000000 |     0.000000
  4.1500 |    25.401055 |    25.401055 |     0.000000 |     0.000000 |     4.950000 |     4.950000 |     0.000000 |     0.000000
  4.2000 |    26.242607 |    26.242607 |     0.000000 |     0.000000 |     5.000000 |     5.000000 |     0.000000 |     0.000000
  4.2500 |    27.109561 |    27.109561 |     0.000000 |     0.000000 |     5.050000 |     5.050000 |     0.000000 |     0.000000
  4.3000 |    28.002667 |    28.002667 |     0.000000 |     0.000000 |     5.100000 |     5.100000 |     0.000000 |     0.000000
  4.3500 |    28.922695 |    28.922695 |     0.000000 |     0.000000 |     5.150000 |     5.150000 |     0.000000 |     0.000000
  4.4000 |    29.870437 |    29.870437 |     0.000000 |     0.000000 |     5.200000 |     5.200000 |     0.000000 |     0.000000
  4.4500 |    30.846711 |    30.846711 |     0.000000 |     0.000000 |     5.250000 |     5.250000 |     0.000000 |     0.000000
  4.5000 |    31.852355 |    31.852355 |     0.000000 |     0.000000 |     5.300000 |     5.300000 |     0.000000 |     0.000000
  4.5500 |    32.888236 |    32.888236 |     0.000000 |     0.000000 |     5.350000 |     5.350000 |     0.000000 |     0.000000
  4.6000 |    33.955243 |    33.955243 |     0.000000 |     0.000000 |     5.400000 |     5.400000 |     0.000000 |     0.000000
  4.6500 |    35.054292 |    35.054292 |     0.000000 |     0.000000 |     5.450000 |     5.450000 |     0.000000 |     0.000000
  4.7000 |    36.186325 |    36.186325 |     0.000000 |     0.000000 |     5.500000 |     5.500000 |     0.000000 |     0.000000
  4.7500 |    37.352314 |    37.352314 |     0.000000 |     0.000000 |     5.550000 |     5.550000 |     0.000000 |     0.000000
  4.8000 |    38.553257 |    38.553257 |     0.000000 |     0.000000 |     5.600000 |     5.600000 |     0.000000 |     0.000000
  4.8500 |    39.790182 |    39.790182 |     0.000000 |     0.000000 |     5.650000 |     5.650000 |     0.000000 |     0.000000
  4.9000 |    41.064148 |    41.064148 |     0.000000 |     0.000000 |     5.700000 |     5.700000 |     0.000000 |     0.000000
  4.9500 |    42.376243 |    42.376243 |     0.000000 |     0.000000 |     5.750000 |     5.750000 |     0.000000 |     0.000000
  5.0000 |    43.727590 |    43.727590 |     0.000000 |     0.000000 |     5.800000 |     5.800000 |     0.000000 |     0.000000
------------------------------------------------------------------------------------------------------------------------
Starting model: DAISY_mamil3

DEBUG [MPHCPE]: Starting parameter estimation...
DEBUG [MPHCPE]: Analyzing identifiability with 2 points
DEBUG [MPHCPE]: Final analysis with 1 points
DEBUG [MPHCPE]: Final unidentifiable dict: Dict{Any, Any}()
DEBUG [MPHCPE]: Final varlist: Num[a13, a31, a21, a12, a01, x1(t), x2(t), x3(t)]
We are trying these points:[13]
Using these observations and their derivatives:
Dict{Int64, Int64} with 2 entries:
  2 => 2
  1 => 4
total degree: 128
using monodromy, line 917

Unidentifiability Analysis from MPHCPE:
All unidentifiable variables: Set{Any}()
Unidentifiable variables substitution dictionary: Dict{Any, Any}()
Trivially solvable variables: Dict{Any, Any}(_t13_x2ˍtt_t_ => -0.03175809316417855, _t13_x1ˍt_t_ => -0.06069445024466402, _t13_x1ˍtt_t_ => 0.08795705992743663, _t13_x1ˍttt_t_ => -0.18309600448455754, _t13_x2_t_ => 0.513273608896297, _t13_x2ˍt_t_ => 0.00844831162807047, _t13_x1ˍtttt_t_ => 0.39458382370185063, _t13_x1_t_ => 0.18833000862751023)

DEBUG [ODEPEtestwrapper]: Processing solution 1

=== Model: DAISY_mamil3 ===

Found 1 distinct solution clusters:

Cluster 1: 1 similar solutions
Best solution (Error: 0.0):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
x1(t)        |   0.250000 |   0.250000 |   0.000000
x2(t)        |   0.500000 |   0.500000 |   0.000000
x3(t)        |   0.750000 |   0.750000 |   0.000000
a12          |   0.167000 |   0.167000 |   0.000000
a13          |   0.333000 |   0.333000 |   0.000000
a21          |   0.500000 |   0.500000 |   0.000000
a31          |   0.667000 |   0.667000 |   0.000000
a01          |   0.833000 |   0.833000 |   0.000000

Best maximum relative error for DAISY_mamil3 (excluding ALL unidentifiable parameters): 0.0

Observables Statistics:
--------------------------------------------------
Variable      | Mean        | Std         | Min         | Max         | Range       | Turns
--------------------------------------------------
y1(t)        |   0.143917 |   0.035073 |   0.101610 |   0.250000 |   0.148390 |          0
y2(t)        |   0.492281 |   0.020662 |   0.447768 |   0.514583 |   0.066815 |          1

Error Statistics for Best Solution:
--------------------------------------------------

Error Statistics by Observable:
--------------------------------------------------
Observable   | Error Type | Mean        | Std         | Min         | Max         | Range
--------------------------------------------------
y1(t)        | Absolute   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y1(t)        | Relative   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y2(t)        | Absolute   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y2(t)        | Relative   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000

Detailed Time Series Comparison:
------------------------------------------------------------------------------------------------------------------------
t | y1(t)_act    | y1(t)_pred   | abs_err      | rel_err      | y2(t)_act    | y2(t)_pred   | abs_err      | rel_err     
------------------------------------------------------------------------------------------------------------------------
  0.0000 |     0.250000 |     0.250000 |     0.000000 |     0.000000 |     0.500000 |     0.500000 |     0.000000 |     0.000000
  0.0500 |     0.242040 |     0.242040 |     0.000000 |     0.000000 |     0.501966 |     0.501966 |     0.000000 |     0.000000
  0.1000 |     0.234783 |     0.234783 |     0.000000 |     0.000000 |     0.503726 |     0.503726 |     0.000000 |     0.000000
  0.1500 |     0.228159 |     0.228159 |     0.000000 |     0.000000 |     0.505298 |     0.505298 |     0.000000 |     0.000000
  0.2000 |     0.222103 |     0.222103 |     0.000000 |     0.000000 |     0.506700 |     0.506700 |     0.000000 |     0.000000
  0.2500 |     0.216558 |     0.216558 |     0.000000 |     0.000000 |     0.507946 |     0.507946 |     0.000000 |     0.000000
  0.3000 |     0.211473 |     0.211473 |     0.000000 |     0.000000 |     0.509050 |     0.509050 |     0.000000 |     0.000000
  0.3500 |     0.206801 |     0.206801 |     0.000000 |     0.000000 |     0.510023 |     0.510023 |     0.000000 |     0.000000
  0.4000 |     0.202501 |     0.202501 |     0.000000 |     0.000000 |     0.510876 |     0.510876 |     0.000000 |     0.000000
  0.4500 |     0.198536 |     0.198536 |     0.000000 |     0.000000 |     0.511619 |     0.511619 |     0.000000 |     0.000000
  0.5000 |     0.194871 |     0.194871 |     0.000000 |     0.000000 |     0.512261 |     0.512261 |     0.000000 |     0.000000
  0.5500 |     0.191479 |     0.191479 |     0.000000 |     0.000000 |     0.512810 |     0.512810 |     0.000000 |     0.000000
  0.6000 |     0.188330 |     0.188330 |     0.000000 |     0.000000 |     0.513274 |     0.513274 |     0.000000 |     0.000000
  0.6500 |     0.185402 |     0.185402 |     0.000000 |     0.000000 |     0.513657 |     0.513657 |     0.000000 |     0.000000
  0.7000 |     0.182671 |     0.182671 |     0.000000 |     0.000000 |     0.513967 |     0.513967 |     0.000000 |     0.000000
  0.7500 |     0.180120 |     0.180120 |     0.000000 |     0.000000 |     0.514209 |     0.514209 |     0.000000 |     0.000000
  0.8000 |     0.177730 |     0.177730 |     0.000000 |     0.000000 |     0.514388 |     0.514388 |     0.000000 |     0.000000
  0.8500 |     0.175486 |     0.175486 |     0.000000 |     0.000000 |     0.514507 |     0.514507 |     0.000000 |     0.000000
  0.9000 |     0.173373 |     0.173373 |     0.000000 |     0.000000 |     0.514571 |     0.514571 |     0.000000 |     0.000000
  0.9500 |     0.171380 |     0.171380 |     0.000000 |     0.000000 |     0.514583 |     0.514583 |     0.000000 |     0.000000
  1.0000 |     0.169493 |     0.169493 |     0.000000 |     0.000000 |     0.514547 |     0.514547 |     0.000000 |     0.000000
  1.0500 |     0.167704 |     0.167704 |     0.000000 |     0.000000 |     0.514466 |     0.514466 |     0.000000 |     0.000000
  1.1000 |     0.166003 |     0.166003 |     0.000000 |     0.000000 |     0.514342 |     0.514342 |     0.000000 |     0.000000
  1.1500 |     0.164382 |     0.164382 |     0.000000 |     0.000000 |     0.514177 |     0.514177 |     0.000000 |     0.000000
  1.2000 |     0.162833 |     0.162833 |     0.000000 |     0.000000 |     0.513975 |     0.513975 |     0.000000 |     0.000000
  1.2500 |     0.161349 |     0.161349 |     0.000000 |     0.000000 |     0.513736 |     0.513736 |     0.000000 |     0.000000
  1.3000 |     0.159926 |     0.159926 |     0.000000 |     0.000000 |     0.513464 |     0.513464 |     0.000000 |     0.000000
  1.3500 |     0.158557 |     0.158557 |     0.000000 |     0.000000 |     0.513158 |     0.513158 |     0.000000 |     0.000000
  1.4000 |     0.157237 |     0.157237 |     0.000000 |     0.000000 |     0.512822 |     0.512822 |     0.000000 |     0.000000
  1.4500 |     0.155962 |     0.155962 |     0.000000 |     0.000000 |     0.512457 |     0.512457 |     0.000000 |     0.000000
  1.5000 |     0.154729 |     0.154729 |     0.000000 |     0.000000 |     0.512063 |     0.512063 |     0.000000 |     0.000000
  1.5500 |     0.153533 |     0.153533 |     0.000000 |     0.000000 |     0.511642 |     0.511642 |     0.000000 |     0.000000
  1.6000 |     0.152372 |     0.152372 |     0.000000 |     0.000000 |     0.511195 |     0.511195 |     0.000000 |     0.000000
  1.6500 |     0.151243 |     0.151243 |     0.000000 |     0.000000 |     0.510724 |     0.510724 |     0.000000 |     0.000000
  1.7000 |     0.150143 |     0.150143 |     0.000000 |     0.000000 |     0.510229 |     0.510229 |     0.000000 |     0.000000
  1.7500 |     0.149069 |     0.149069 |     0.000000 |     0.000000 |     0.509710 |     0.509710 |     0.000000 |     0.000000
  1.8000 |     0.148021 |     0.148021 |     0.000000 |     0.000000 |     0.509170 |     0.509170 |     0.000000 |     0.000000
  1.8500 |     0.146995 |     0.146995 |     0.000000 |     0.000000 |     0.508609 |     0.508609 |     0.000000 |     0.000000
  1.9000 |     0.145990 |     0.145990 |     0.000000 |     0.000000 |     0.508026 |     0.508026 |     0.000000 |     0.000000
  1.9500 |     0.145005 |     0.145005 |     0.000000 |     0.000000 |     0.507424 |     0.507424 |     0.000000 |     0.000000
  2.0000 |     0.144039 |     0.144039 |     0.000000 |     0.000000 |     0.506803 |     0.506803 |     0.000000 |     0.000000
  2.0500 |     0.143089 |     0.143089 |     0.000000 |     0.000000 |     0.506163 |     0.506163 |     0.000000 |     0.000000
  2.1000 |     0.142156 |     0.142156 |     0.000000 |     0.000000 |     0.505505 |     0.505505 |     0.000000 |     0.000000
  2.1500 |     0.141238 |     0.141238 |     0.000000 |     0.000000 |     0.504829 |     0.504829 |     0.000000 |     0.000000
  2.2000 |     0.140333 |     0.140333 |     0.000000 |     0.000000 |     0.504136 |     0.504136 |     0.000000 |     0.000000
  2.2500 |     0.139442 |     0.139442 |     0.000000 |     0.000000 |     0.503427 |     0.503427 |     0.000000 |     0.000000
  2.3000 |     0.138563 |     0.138563 |     0.000000 |     0.000000 |     0.502701 |     0.502701 |     0.000000 |     0.000000
  2.3500 |     0.137696 |     0.137696 |     0.000000 |     0.000000 |     0.501960 |     0.501960 |     0.000000 |     0.000000
  2.4000 |     0.136840 |     0.136840 |     0.000000 |     0.000000 |     0.501203 |     0.501203 |     0.000000 |     0.000000
  2.4500 |     0.135995 |     0.135995 |     0.000000 |     0.000000 |     0.500432 |     0.500432 |     0.000000 |     0.000000
  2.5000 |     0.135160 |     0.135160 |     0.000000 |     0.000000 |     0.499646 |     0.499646 |     0.000000 |     0.000000
  2.5500 |     0.134335 |     0.134335 |     0.000000 |     0.000000 |     0.498846 |     0.498846 |     0.000000 |     0.000000
  2.6000 |     0.133519 |     0.133519 |     0.000000 |     0.000000 |     0.498032 |     0.498032 |     0.000000 |     0.000000
  2.6500 |     0.132712 |     0.132712 |     0.000000 |     0.000000 |     0.497205 |     0.497205 |     0.000000 |     0.000000
  2.7000 |     0.131913 |     0.131913 |     0.000000 |     0.000000 |     0.496364 |     0.496364 |     0.000000 |     0.000000
  2.7500 |     0.131123 |     0.131123 |     0.000000 |     0.000000 |     0.495511 |     0.495511 |     0.000000 |     0.000000
  2.8000 |     0.130341 |     0.130341 |     0.000000 |     0.000000 |     0.494646 |     0.494646 |     0.000000 |     0.000000
  2.8500 |     0.129566 |     0.129566 |     0.000000 |     0.000000 |     0.493768 |     0.493768 |     0.000000 |     0.000000
  2.9000 |     0.128798 |     0.128798 |     0.000000 |     0.000000 |     0.492878 |     0.492878 |     0.000000 |     0.000000
  2.9500 |     0.128038 |     0.128038 |     0.000000 |     0.000000 |     0.491977 |     0.491977 |     0.000000 |     0.000000
  3.0000 |     0.127285 |     0.127285 |     0.000000 |     0.000000 |     0.491064 |     0.491064 |     0.000000 |     0.000000
  3.0500 |     0.126539 |     0.126539 |     0.000000 |     0.000000 |     0.490140 |     0.490140 |     0.000000 |     0.000000
  3.1000 |     0.125799 |     0.125799 |     0.000000 |     0.000000 |     0.489206 |     0.489206 |     0.000000 |     0.000000
  3.1500 |     0.125066 |     0.125066 |     0.000000 |     0.000000 |     0.488261 |     0.488261 |     0.000000 |     0.000000
  3.2000 |     0.124339 |     0.124339 |     0.000000 |     0.000000 |     0.487305 |     0.487305 |     0.000000 |     0.000000
  3.2500 |     0.123618 |     0.123618 |     0.000000 |     0.000000 |     0.486340 |     0.486340 |     0.000000 |     0.000000
  3.3000 |     0.122904 |     0.122904 |     0.000000 |     0.000000 |     0.485364 |     0.485364 |     0.000000 |     0.000000
  3.3500 |     0.122195 |     0.122195 |     0.000000 |     0.000000 |     0.484379 |     0.484379 |     0.000000 |     0.000000
  3.4000 |     0.121492 |     0.121492 |     0.000000 |     0.000000 |     0.483385 |     0.483385 |     0.000000 |     0.000000
  3.4500 |     0.120795 |     0.120795 |     0.000000 |     0.000000 |     0.482382 |     0.482382 |     0.000000 |     0.000000
  3.5000 |     0.120103 |     0.120103 |     0.000000 |     0.000000 |     0.481369 |     0.481369 |     0.000000 |     0.000000
  3.5500 |     0.119417 |     0.119417 |     0.000000 |     0.000000 |     0.480348 |     0.480348 |     0.000000 |     0.000000
  3.6000 |     0.118736 |     0.118736 |     0.000000 |     0.000000 |     0.479318 |     0.479318 |     0.000000 |     0.000000
  3.6500 |     0.118061 |     0.118061 |     0.000000 |     0.000000 |     0.478280 |     0.478280 |     0.000000 |     0.000000
  3.7000 |     0.117391 |     0.117391 |     0.000000 |     0.000000 |     0.477234 |     0.477234 |     0.000000 |     0.000000
  3.7500 |     0.116726 |     0.116726 |     0.000000 |     0.000000 |     0.476180 |     0.476180 |     0.000000 |     0.000000
  3.8000 |     0.116066 |     0.116066 |     0.000000 |     0.000000 |     0.475118 |     0.475118 |     0.000000 |     0.000000
  3.8500 |     0.115411 |     0.115411 |     0.000000 |     0.000000 |     0.474049 |     0.474049 |     0.000000 |     0.000000
  3.9000 |     0.114761 |     0.114761 |     0.000000 |     0.000000 |     0.472972 |     0.472972 |     0.000000 |     0.000000
  3.9500 |     0.114116 |     0.114116 |     0.000000 |     0.000000 |     0.471888 |     0.471888 |     0.000000 |     0.000000
  4.0000 |     0.113476 |     0.113476 |     0.000000 |     0.000000 |     0.470798 |     0.470798 |     0.000000 |     0.000000
  4.0500 |     0.112841 |     0.112841 |     0.000000 |     0.000000 |     0.469700 |     0.469700 |     0.000000 |     0.000000
  4.1000 |     0.112210 |     0.112210 |     0.000000 |     0.000000 |     0.468596 |     0.468596 |     0.000000 |     0.000000
  4.1500 |     0.111584 |     0.111584 |     0.000000 |     0.000000 |     0.467485 |     0.467485 |     0.000000 |     0.000000
  4.2000 |     0.110963 |     0.110963 |     0.000000 |     0.000000 |     0.466368 |     0.466368 |     0.000000 |     0.000000
  4.2500 |     0.110346 |     0.110346 |     0.000000 |     0.000000 |     0.465245 |     0.465245 |     0.000000 |     0.000000
  4.3000 |     0.109734 |     0.109734 |     0.000000 |     0.000000 |     0.464116 |     0.464116 |     0.000000 |     0.000000
  4.3500 |     0.109126 |     0.109126 |     0.000000 |     0.000000 |     0.462981 |     0.462981 |     0.000000 |     0.000000
  4.4000 |     0.108523 |     0.108523 |     0.000000 |     0.000000 |     0.461840 |     0.461840 |     0.000000 |     0.000000
  4.4500 |     0.107924 |     0.107924 |     0.000000 |     0.000000 |     0.460694 |     0.460694 |     0.000000 |     0.000000
  4.5000 |     0.107329 |     0.107329 |     0.000000 |     0.000000 |     0.459543 |     0.459543 |     0.000000 |     0.000000
  4.5500 |     0.106738 |     0.106738 |     0.000000 |     0.000000 |     0.458386 |     0.458386 |     0.000000 |     0.000000
  4.6000 |     0.106152 |     0.106152 |     0.000000 |     0.000000 |     0.457225 |     0.457225 |     0.000000 |     0.000000
  4.6500 |     0.105570 |     0.105570 |     0.000000 |     0.000000 |     0.456058 |     0.456058 |     0.000000 |     0.000000
  4.7000 |     0.104992 |     0.104992 |     0.000000 |     0.000000 |     0.454887 |     0.454887 |     0.000000 |     0.000000
  4.7500 |     0.104419 |     0.104419 |     0.000000 |     0.000000 |     0.453711 |     0.453711 |     0.000000 |     0.000000
  4.8000 |     0.103849 |     0.103849 |     0.000000 |     0.000000 |     0.452531 |     0.452531 |     0.000000 |     0.000000
  4.8500 |     0.103283 |     0.103283 |     0.000000 |     0.000000 |     0.451347 |     0.451347 |     0.000000 |     0.000000
  4.9000 |     0.102721 |     0.102721 |     0.000000 |     0.000000 |     0.450158 |     0.450158 |     0.000000 |     0.000000
  4.9500 |     0.102164 |     0.102164 |     0.000000 |     0.000000 |     0.448965 |     0.448965 |     0.000000 |     0.000000
  5.0000 |     0.101610 |     0.101610 |     0.000000 |     0.000000 |     0.447768 |     0.447768 |     0.000000 |     0.000000
------------------------------------------------------------------------------------------------------------------------
Starting model: DAISY_mamil4

DEBUG [MPHCPE]: Starting parameter estimation...
DEBUG [MPHCPE]: Analyzing identifiability with 2 points
DEBUG [MPHCPE]: Final analysis with 1 points
DEBUG [MPHCPE]: Final unidentifiable dict: Dict{Any, Any}()
DEBUG [MPHCPE]: Final varlist: Num[k12, k21, k01, k14, k13, k31, k41, x1(t), x2(t), x3(t), x4(t)]
We are trying these points:[40]
Using these observations and their derivatives:
Dict{Int64, Int64} with 2 entries:
  3 => 4
  1 => 5
total degree: 131072
using monodromy, line 917

Unidentifiability Analysis from MPHCPE:
All unidentifiable variables: Set{Any}()
Unidentifiable variables substitution dictionary: Dict{Any, Any}()
Trivially solvable variables: Dict{Any, Any}(_t40_x1ˍttt_t_ => 0.008649247171888419, _t40_x1ˍt_t_ => -0.008880148766737705, _t40_x1_t_ => 0.27127992409305035, _t40_x1ˍtt_t_ => -0.0012386551700842574, _t40_x1ˍtttt_t_ => -0.025664175623376195, _t40_x1ˍttttt_t_ => 0.07130512373669262)

DEBUG [ODEPEtestwrapper]: Processing solution 1

DEBUG [ODEPEtestwrapper]: Processing solution 2

=== Model: DAISY_mamil4 ===

Found 2 distinct solution clusters:

Cluster 1: 1 similar solutions
Best solution (Error: 0.0):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
x1(t)        |   0.200000 |   0.200000 |   0.000000
x2(t)        |   0.400000 |   0.400000 |   0.000000
x3(t)        |   0.600000 |   0.800000 |   0.333333
x4(t)        |   0.800000 |   0.600000 |   0.250000
k01          |   0.125000 |   0.125000 |   0.000000
k12          |   0.250000 |   0.250000 |   0.000000
k13          |   0.375000 |   0.500000 |   0.333333
k14          |   0.500000 |   0.375000 |   0.250000
k21          |   0.625000 |   0.625000 |   0.000000
k31          |   0.750000 |   0.874999 |   0.166666
k41          |   0.875000 |   0.750001 |   0.142857

Cluster 2: 1 similar solutions
Best solution (Error: 0.0):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
x1(t)        |   0.200000 |   0.200000 |   0.000000
x2(t)        |   0.400000 |   0.400000 |   0.000000
x3(t)        |   0.600000 |   0.600000 |   0.000000
x4(t)        |   0.800000 |   0.800000 |   0.000000
k01          |   0.125000 |   0.125000 |   0.000000
k12          |   0.250000 |   0.250000 |   0.000000
k13          |   0.375000 |   0.375000 |   0.000000
k14          |   0.500000 |   0.500000 |   0.000000
k21          |   0.625000 |   0.625000 |   0.000000
k31          |   0.750000 |   0.750001 |   0.000001
k41          |   0.875000 |   0.874999 |   0.000001

Best maximum relative error for DAISY_mamil4 (excluding ALL unidentifiable parameters): 1.0e-6

Observables Statistics:
--------------------------------------------------
Variable      | Mean        | Std         | Min         | Max         | Range       | Turns
--------------------------------------------------
y1(t)        |   0.261010 |   0.013331 |   0.200000 |   0.276523 |   0.076523 |          1
y2(t)        |   0.510778 |   0.054858 |   0.400000 |   0.578097 |   0.178097 |          0
y3(t)        |   1.145954 |   0.101927 |   1.010354 |   1.400000 |   0.389646 |          0

Error Statistics for Best Solution:
--------------------------------------------------

Error Statistics by Observable:
--------------------------------------------------
Observable   | Error Type | Mean        | Std         | Min         | Max         | Range
--------------------------------------------------
y1(t)        | Absolute   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y1(t)        | Relative   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y2(t)        | Absolute   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y2(t)        | Relative   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y3(t)        | Absolute   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y3(t)        | Relative   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000

Detailed Time Series Comparison:
------------------------------------------------------------------------------------------------------------------------
t | y1(t)_act    | y1(t)_pred   | abs_err      | rel_err      | y2(t)_act    | y2(t)_pred   | abs_err      | rel_err      | y3(t)_act    | y3(t)_pred   | abs_err      | rel_err     
------------------------------------------------------------------------------------------------------------------------
  0.0000 |     0.200000 |     0.200000 |     0.000000 |     0.000000 |     0.400000 |     0.400000 |     0.000000 |     0.000000 |     1.400000 |     1.400000 |     0.000000 |     0.000000
  0.0500 |     0.211630 |     0.211630 |     0.000000 |     0.000000 |     0.401428 |     0.401428 |     0.000000 |     0.000000 |     1.385655 |     1.385655 |     0.000000 |     0.000000
  0.1000 |     0.221673 |     0.221673 |     0.000000 |     0.000000 |     0.403173 |     0.403173 |     0.000000 |     0.000000 |     1.372512 |     1.372512 |     0.000000 |     0.000000
  0.1500 |     0.230333 |     0.230333 |     0.000000 |     0.000000 |     0.405187 |     0.405187 |     0.000000 |     0.000000 |     1.360424 |     1.360424 |     0.000000 |     0.000000
  0.2000 |     0.237790 |     0.237790 |     0.000000 |     0.000000 |     0.407426 |     0.407426 |     0.000000 |     0.000000 |     1.349266 |     1.349266 |     0.000000 |     0.000000
  0.2500 |     0.244198 |     0.244198 |     0.000000 |     0.000000 |     0.409852 |     0.409852 |     0.000000 |     0.000000 |     1.338924 |     1.338924 |     0.000000 |     0.000000
  0.3000 |     0.249695 |     0.249695 |     0.000000 |     0.000000 |     0.412432 |     0.412432 |     0.000000 |     0.000000 |     1.329304 |     1.329304 |     0.000000 |     0.000000
  0.3500 |     0.254397 |     0.254397 |     0.000000 |     0.000000 |     0.415138 |     0.415138 |     0.000000 |     0.000000 |     1.320319 |     1.320319 |     0.000000 |     0.000000
  0.4000 |     0.258409 |     0.258409 |     0.000000 |     0.000000 |     0.417946 |     0.417946 |     0.000000 |     0.000000 |     1.311897 |     1.311897 |     0.000000 |     0.000000
  0.4500 |     0.261821 |     0.261821 |     0.000000 |     0.000000 |     0.420834 |     0.420834 |     0.000000 |     0.000000 |     1.303972 |     1.303972 |     0.000000 |     0.000000
  0.5000 |     0.264709 |     0.264709 |     0.000000 |     0.000000 |     0.423783 |     0.423783 |     0.000000 |     0.000000 |     1.296488 |     1.296488 |     0.000000 |     0.000000
  0.5500 |     0.267143 |     0.267143 |     0.000000 |     0.000000 |     0.426778 |     0.426778 |     0.000000 |     0.000000 |     1.289397 |     1.289397 |     0.000000 |     0.000000
  0.6000 |     0.269182 |     0.269182 |     0.000000 |     0.000000 |     0.429806 |     0.429806 |     0.000000 |     0.000000 |     1.282654 |     1.282654 |     0.000000 |     0.000000
  0.6500 |     0.270878 |     0.270878 |     0.000000 |     0.000000 |     0.432853 |     0.432853 |     0.000000 |     0.000000 |     1.276222 |     1.276222 |     0.000000 |     0.000000
  0.7000 |     0.272276 |     0.272276 |     0.000000 |     0.000000 |     0.435911 |     0.435911 |     0.000000 |     0.000000 |     1.270069 |     1.270069 |     0.000000 |     0.000000
  0.7500 |     0.273415 |     0.273415 |     0.000000 |     0.000000 |     0.438970 |     0.438970 |     0.000000 |     0.000000 |     1.264166 |     1.264166 |     0.000000 |     0.000000
  0.8000 |     0.274329 |     0.274329 |     0.000000 |     0.000000 |     0.442023 |     0.442023 |     0.000000 |     0.000000 |     1.258487 |     1.258487 |     0.000000 |     0.000000
  0.8500 |     0.275049 |     0.275049 |     0.000000 |     0.000000 |     0.445063 |     0.445063 |     0.000000 |     0.000000 |     1.253011 |     1.253011 |     0.000000 |     0.000000
  0.9000 |     0.275599 |     0.275599 |     0.000000 |     0.000000 |     0.448085 |     0.448085 |     0.000000 |     0.000000 |     1.247717 |     1.247717 |     0.000000 |     0.000000
  0.9500 |     0.276003 |     0.276003 |     0.000000 |     0.000000 |     0.451085 |     0.451085 |     0.000000 |     0.000000 |     1.242590 |     1.242590 |     0.000000 |     0.000000
  1.0000 |     0.276281 |     0.276281 |     0.000000 |     0.000000 |     0.454057 |     0.454057 |     0.000000 |     0.000000 |     1.237614 |     1.237614 |     0.000000 |     0.000000
  1.0500 |     0.276449 |     0.276449 |     0.000000 |     0.000000 |     0.457000 |     0.457000 |     0.000000 |     0.000000 |     1.232776 |     1.232776 |     0.000000 |     0.000000
  1.1000 |     0.276523 |     0.276523 |     0.000000 |     0.000000 |     0.459909 |     0.459909 |     0.000000 |     0.000000 |     1.228064 |     1.228064 |     0.000000 |     0.000000
  1.1500 |     0.276515 |     0.276515 |     0.000000 |     0.000000 |     0.462784 |     0.462784 |     0.000000 |     0.000000 |     1.223469 |     1.223469 |     0.000000 |     0.000000
  1.2000 |     0.276437 |     0.276437 |     0.000000 |     0.000000 |     0.465621 |     0.465621 |     0.000000 |     0.000000 |     1.218982 |     1.218982 |     0.000000 |     0.000000
  1.2500 |     0.276298 |     0.276298 |     0.000000 |     0.000000 |     0.468420 |     0.468420 |     0.000000 |     0.000000 |     1.214595 |     1.214595 |     0.000000 |     0.000000
  1.3000 |     0.276107 |     0.276107 |     0.000000 |     0.000000 |     0.471179 |     0.471179 |     0.000000 |     0.000000 |     1.210300 |     1.210300 |     0.000000 |     0.000000
  1.3500 |     0.275872 |     0.275872 |     0.000000 |     0.000000 |     0.473897 |     0.473897 |     0.000000 |     0.000000 |     1.206092 |     1.206092 |     0.000000 |     0.000000
  1.4000 |     0.275600 |     0.275600 |     0.000000 |     0.000000 |     0.476574 |     0.476574 |     0.000000 |     0.000000 |     1.201965 |     1.201965 |     0.000000 |     0.000000
  1.4500 |     0.275294 |     0.275294 |     0.000000 |     0.000000 |     0.479208 |     0.479208 |     0.000000 |     0.000000 |     1.197915 |     1.197915 |     0.000000 |     0.000000
  1.5000 |     0.274962 |     0.274962 |     0.000000 |     0.000000 |     0.481799 |     0.481799 |     0.000000 |     0.000000 |     1.193936 |     1.193936 |     0.000000 |     0.000000
  1.5500 |     0.274606 |     0.274606 |     0.000000 |     0.000000 |     0.484348 |     0.484348 |     0.000000 |     0.000000 |     1.190026 |     1.190026 |     0.000000 |     0.000000
  1.6000 |     0.274231 |     0.274231 |     0.000000 |     0.000000 |     0.486853 |     0.486853 |     0.000000 |     0.000000 |     1.186181 |     1.186181 |     0.000000 |     0.000000
  1.6500 |     0.273839 |     0.273839 |     0.000000 |     0.000000 |     0.489316 |     0.489316 |     0.000000 |     0.000000 |     1.182397 |     1.182397 |     0.000000 |     0.000000
  1.7000 |     0.273434 |     0.273434 |     0.000000 |     0.000000 |     0.491735 |     0.491735 |     0.000000 |     0.000000 |     1.178672 |     1.178672 |     0.000000 |     0.000000
  1.7500 |     0.273018 |     0.273018 |     0.000000 |     0.000000 |     0.494112 |     0.494112 |     0.000000 |     0.000000 |     1.175004 |     1.175004 |     0.000000 |     0.000000
  1.8000 |     0.272593 |     0.272593 |     0.000000 |     0.000000 |     0.496446 |     0.496446 |     0.000000 |     0.000000 |     1.171390 |     1.171390 |     0.000000 |     0.000000
  1.8500 |     0.272160 |     0.272160 |     0.000000 |     0.000000 |     0.498738 |     0.498738 |     0.000000 |     0.000000 |     1.167828 |     1.167828 |     0.000000 |     0.000000
  1.9000 |     0.271722 |     0.271722 |     0.000000 |     0.000000 |     0.500988 |     0.500988 |     0.000000 |     0.000000 |     1.164317 |     1.164317 |     0.000000 |     0.000000
  1.9500 |     0.271280 |     0.271280 |     0.000000 |     0.000000 |     0.503196 |     0.503196 |     0.000000 |     0.000000 |     1.160854 |     1.160854 |     0.000000 |     0.000000
  2.0000 |     0.270835 |     0.270835 |     0.000000 |     0.000000 |     0.505363 |     0.505363 |     0.000000 |     0.000000 |     1.157438 |     1.157438 |     0.000000 |     0.000000
  2.0500 |     0.270387 |     0.270387 |     0.000000 |     0.000000 |     0.507489 |     0.507489 |     0.000000 |     0.000000 |     1.154068 |     1.154068 |     0.000000 |     0.000000
  2.1000 |     0.269938 |     0.269938 |     0.000000 |     0.000000 |     0.509575 |     0.509575 |     0.000000 |     0.000000 |     1.150742 |     1.150742 |     0.000000 |     0.000000
  2.1500 |     0.269489 |     0.269489 |     0.000000 |     0.000000 |     0.511621 |     0.511621 |     0.000000 |     0.000000 |     1.147460 |     1.147460 |     0.000000 |     0.000000
  2.2000 |     0.269040 |     0.269040 |     0.000000 |     0.000000 |     0.513628 |     0.513628 |     0.000000 |     0.000000 |     1.144219 |     1.144219 |     0.000000 |     0.000000
  2.2500 |     0.268592 |     0.268592 |     0.000000 |     0.000000 |     0.515596 |     0.515596 |     0.000000 |     0.000000 |     1.141020 |     1.141020 |     0.000000 |     0.000000
  2.3000 |     0.268144 |     0.268144 |     0.000000 |     0.000000 |     0.517525 |     0.517525 |     0.000000 |     0.000000 |     1.137860 |     1.137860 |     0.000000 |     0.000000
  2.3500 |     0.267699 |     0.267699 |     0.000000 |     0.000000 |     0.519417 |     0.519417 |     0.000000 |     0.000000 |     1.134740 |     1.134740 |     0.000000 |     0.000000
  2.4000 |     0.267255 |     0.267255 |     0.000000 |     0.000000 |     0.521271 |     0.521271 |     0.000000 |     0.000000 |     1.131658 |     1.131658 |     0.000000 |     0.000000
  2.4500 |     0.266813 |     0.266813 |     0.000000 |     0.000000 |     0.523089 |     0.523089 |     0.000000 |     0.000000 |     1.128613 |     1.128613 |     0.000000 |     0.000000
  2.5000 |     0.266374 |     0.266374 |     0.000000 |     0.000000 |     0.524870 |     0.524870 |     0.000000 |     0.000000 |     1.125605 |     1.125605 |     0.000000 |     0.000000
  2.5500 |     0.265938 |     0.265938 |     0.000000 |     0.000000 |     0.526616 |     0.526616 |     0.000000 |     0.000000 |     1.122632 |     1.122632 |     0.000000 |     0.000000
  2.6000 |     0.265504 |     0.265504 |     0.000000 |     0.000000 |     0.528326 |     0.528326 |     0.000000 |     0.000000 |     1.119695 |     1.119695 |     0.000000 |     0.000000
  2.6500 |     0.265073 |     0.265073 |     0.000000 |     0.000000 |     0.530002 |     0.530002 |     0.000000 |     0.000000 |     1.116792 |     1.116792 |     0.000000 |     0.000000
  2.7000 |     0.264645 |     0.264645 |     0.000000 |     0.000000 |     0.531643 |     0.531643 |     0.000000 |     0.000000 |     1.113923 |     1.113923 |     0.000000 |     0.000000
  2.7500 |     0.264220 |     0.264220 |     0.000000 |     0.000000 |     0.533251 |     0.533251 |     0.000000 |     0.000000 |     1.111087 |     1.111087 |     0.000000 |     0.000000
  2.8000 |     0.263799 |     0.263799 |     0.000000 |     0.000000 |     0.534826 |     0.534826 |     0.000000 |     0.000000 |     1.108284 |     1.108284 |     0.000000 |     0.000000
  2.8500 |     0.263380 |     0.263380 |     0.000000 |     0.000000 |     0.536368 |     0.536368 |     0.000000 |     0.000000 |     1.105513 |     1.105513 |     0.000000 |     0.000000
  2.9000 |     0.262965 |     0.262965 |     0.000000 |     0.000000 |     0.537878 |     0.537878 |     0.000000 |     0.000000 |     1.102773 |     1.102773 |     0.000000 |     0.000000
  2.9500 |     0.262553 |     0.262553 |     0.000000 |     0.000000 |     0.539356 |     0.539356 |     0.000000 |     0.000000 |     1.100064 |     1.100064 |     0.000000 |     0.000000
  3.0000 |     0.262145 |     0.262145 |     0.000000 |     0.000000 |     0.540804 |     0.540804 |     0.000000 |     0.000000 |     1.097386 |     1.097386 |     0.000000 |     0.000000
  3.0500 |     0.261739 |     0.261739 |     0.000000 |     0.000000 |     0.542221 |     0.542221 |     0.000000 |     0.000000 |     1.094737 |     1.094737 |     0.000000 |     0.000000
  3.1000 |     0.261337 |     0.261337 |     0.000000 |     0.000000 |     0.543607 |     0.543607 |     0.000000 |     0.000000 |     1.092118 |     1.092118 |     0.000000 |     0.000000
  3.1500 |     0.260939 |     0.260939 |     0.000000 |     0.000000 |     0.544964 |     0.544964 |     0.000000 |     0.000000 |     1.089527 |     1.089527 |     0.000000 |     0.000000
  3.2000 |     0.260543 |     0.260543 |     0.000000 |     0.000000 |     0.546292 |     0.546292 |     0.000000 |     0.000000 |     1.086966 |     1.086966 |     0.000000 |     0.000000
  3.2500 |     0.260151 |     0.260151 |     0.000000 |     0.000000 |     0.547591 |     0.547591 |     0.000000 |     0.000000 |     1.084432 |     1.084432 |     0.000000 |     0.000000
  3.3000 |     0.259762 |     0.259762 |     0.000000 |     0.000000 |     0.548862 |     0.548862 |     0.000000 |     0.000000 |     1.081925 |     1.081925 |     0.000000 |     0.000000
  3.3500 |     0.259376 |     0.259376 |     0.000000 |     0.000000 |     0.550105 |     0.550105 |     0.000000 |     0.000000 |     1.079446 |     1.079446 |     0.000000 |     0.000000
  3.4000 |     0.258994 |     0.258994 |     0.000000 |     0.000000 |     0.551320 |     0.551320 |     0.000000 |     0.000000 |     1.076993 |     1.076993 |     0.000000 |     0.000000
  3.4500 |     0.258614 |     0.258614 |     0.000000 |     0.000000 |     0.552509 |     0.552509 |     0.000000 |     0.000000 |     1.074566 |     1.074566 |     0.000000 |     0.000000
  3.5000 |     0.258238 |     0.258238 |     0.000000 |     0.000000 |     0.553671 |     0.553671 |     0.000000 |     0.000000 |     1.072165 |     1.072165 |     0.000000 |     0.000000
  3.5500 |     0.257864 |     0.257864 |     0.000000 |     0.000000 |     0.554807 |     0.554807 |     0.000000 |     0.000000 |     1.069790 |     1.069790 |     0.000000 |     0.000000
  3.6000 |     0.257494 |     0.257494 |     0.000000 |     0.000000 |     0.555917 |     0.555918 |     0.000000 |     0.000000 |     1.067439 |     1.067439 |     0.000000 |     0.000000
  3.6500 |     0.257126 |     0.257126 |     0.000000 |     0.000000 |     0.557003 |     0.557003 |     0.000000 |     0.000000 |     1.065113 |     1.065113 |     0.000000 |     0.000000
  3.7000 |     0.256762 |     0.256762 |     0.000000 |     0.000000 |     0.558063 |     0.558063 |     0.000000 |     0.000000 |     1.062812 |     1.062812 |     0.000000 |     0.000000
  3.7500 |     0.256400 |     0.256400 |     0.000000 |     0.000000 |     0.559099 |     0.559099 |     0.000000 |     0.000000 |     1.060534 |     1.060534 |     0.000000 |     0.000000
  3.8000 |     0.256042 |     0.256042 |     0.000000 |     0.000000 |     0.560111 |     0.560111 |     0.000000 |     0.000000 |     1.058279 |     1.058279 |     0.000000 |     0.000000
  3.8500 |     0.255686 |     0.255686 |     0.000000 |     0.000000 |     0.561099 |     0.561099 |     0.000000 |     0.000000 |     1.056048 |     1.056048 |     0.000000 |     0.000000
  3.9000 |     0.255332 |     0.255332 |     0.000000 |     0.000000 |     0.562064 |     0.562064 |     0.000000 |     0.000000 |     1.053839 |     1.053839 |     0.000000 |     0.000000
  3.9500 |     0.254982 |     0.254982 |     0.000000 |     0.000000 |     0.563006 |     0.563006 |     0.000000 |     0.000000 |     1.051653 |     1.051653 |     0.000000 |     0.000000
  4.0000 |     0.254634 |     0.254634 |     0.000000 |     0.000000 |     0.563925 |     0.563925 |     0.000000 |     0.000000 |     1.049489 |     1.049489 |     0.000000 |     0.000000
  4.0500 |     0.254289 |     0.254289 |     0.000000 |     0.000000 |     0.564822 |     0.564822 |     0.000000 |     0.000000 |     1.047346 |     1.047346 |     0.000000 |     0.000000
  4.1000 |     0.253946 |     0.253946 |     0.000000 |     0.000000 |     0.565698 |     0.565698 |     0.000000 |     0.000000 |     1.045225 |     1.045225 |     0.000000 |     0.000000
  4.1500 |     0.253607 |     0.253607 |     0.000000 |     0.000000 |     0.566552 |     0.566552 |     0.000000 |     0.000000 |     1.043125 |     1.043125 |     0.000000 |     0.000000
  4.2000 |     0.253269 |     0.253269 |     0.000000 |     0.000000 |     0.567384 |     0.567384 |     0.000000 |     0.000000 |     1.041046 |     1.041046 |     0.000000 |     0.000000
  4.2500 |     0.252934 |     0.252934 |     0.000000 |     0.000000 |     0.568196 |     0.568196 |     0.000000 |     0.000000 |     1.038987 |     1.038987 |     0.000000 |     0.000000
  4.3000 |     0.252601 |     0.252601 |     0.000000 |     0.000000 |     0.568988 |     0.568988 |     0.000000 |     0.000000 |     1.036948 |     1.036948 |     0.000000 |     0.000000
  4.3500 |     0.252271 |     0.252271 |     0.000000 |     0.000000 |     0.569759 |     0.569759 |     0.000000 |     0.000000 |     1.034929 |     1.034929 |     0.000000 |     0.000000
  4.4000 |     0.251944 |     0.251944 |     0.000000 |     0.000000 |     0.570511 |     0.570511 |     0.000000 |     0.000000 |     1.032930 |     1.032930 |     0.000000 |     0.000000
  4.4500 |     0.251618 |     0.251618 |     0.000000 |     0.000000 |     0.571243 |     0.571243 |     0.000000 |     0.000000 |     1.030949 |     1.030949 |     0.000000 |     0.000000
  4.5000 |     0.251295 |     0.251295 |     0.000000 |     0.000000 |     0.571956 |     0.571956 |     0.000000 |     0.000000 |     1.028988 |     1.028988 |     0.000000 |     0.000000
  4.5500 |     0.250974 |     0.250974 |     0.000000 |     0.000000 |     0.572650 |     0.572650 |     0.000000 |     0.000000 |     1.027045 |     1.027045 |     0.000000 |     0.000000
  4.6000 |     0.250655 |     0.250655 |     0.000000 |     0.000000 |     0.573326 |     0.573326 |     0.000000 |     0.000000 |     1.025121 |     1.025121 |     0.000000 |     0.000000
  4.6500 |     0.250339 |     0.250339 |     0.000000 |     0.000000 |     0.573983 |     0.573983 |     0.000000 |     0.000000 |     1.023215 |     1.023215 |     0.000000 |     0.000000
  4.7000 |     0.250024 |     0.250024 |     0.000000 |     0.000000 |     0.574623 |     0.574623 |     0.000000 |     0.000000 |     1.021326 |     1.021326 |     0.000000 |     0.000000
  4.7500 |     0.249712 |     0.249712 |     0.000000 |     0.000000 |     0.575244 |     0.575244 |     0.000000 |     0.000000 |     1.019455 |     1.019455 |     0.000000 |     0.000000
  4.8000 |     0.249402 |     0.249402 |     0.000000 |     0.000000 |     0.575849 |     0.575849 |     0.000000 |     0.000000 |     1.017601 |     1.017601 |     0.000000 |     0.000000
  4.8500 |     0.249093 |     0.249093 |     0.000000 |     0.000000 |     0.576436 |     0.576436 |     0.000000 |     0.000000 |     1.015764 |     1.015764 |     0.000000 |     0.000000
  4.9000 |     0.248787 |     0.248787 |     0.000000 |     0.000000 |     0.577006 |     0.577006 |     0.000000 |     0.000000 |     1.013944 |     1.013944 |     0.000000 |     0.000000
  4.9500 |     0.248483 |     0.248483 |     0.000000 |     0.000000 |     0.577560 |     0.577560 |     0.000000 |     0.000000 |     1.012141 |     1.012141 |     0.000000 |     0.000000
  5.0000 |     0.248181 |     0.248181 |     0.000000 |     0.000000 |     0.578097 |     0.578097 |     0.000000 |     0.000000 |     1.010354 |     1.010354 |     0.000000 |     0.000000
------------------------------------------------------------------------------------------------------------------------
Starting model: slowfast

DEBUG [MPHCPE]: Starting parameter estimation...
DEBUG [MPHCPE]: Analyzing identifiability with 2 points
DEBUG [MPHCPE]: Final analysis with 1 points
DEBUG [MPHCPE]: Final unidentifiable dict: Dict{Any, Any}()
DEBUG [MPHCPE]: Final varlist: Num[k2, k1, eB, xA(t), xB(t), xC(t), eA(t), eC(t)]
We are trying these points:[37]
Using these observations and their derivatives:
Dict{Int64, Int64} with 4 entries:
  4 => 0
  2 => 2
  3 => 0
  1 => 2
total degree: 512
using monodromy, line 917

Unidentifiability Analysis from MPHCPE:
All unidentifiable variables: Set{Any}()
Unidentifiable variables substitution dictionary: Dict{Any, Any}()
Trivially solvable variables: Dict{Any, Any}(_t37_xC_t_ => 0.8364139586331155, _t37_eA_t_ => 0.666, _t37_eC_t_ => 0.833, _t37_xCˍtt_t_ => -0.01533754902285267, _t37_eAˍtt_t_ => 0, _t37_eCˍt_t_ => 0, _t37_eCˍtt_t_ => 0, _t37_eAˍt_t_ => 0, _t37_xCˍt_t_ => 0.047547738924968996)

DEBUG [ODEPEtestwrapper]: Processing solution 1

DEBUG [ODEPEtestwrapper]: Processing solution 2

=== Model: slowfast ===

Found 2 distinct solution clusters:

Cluster 1: 1 similar solutions
Best solution (Error: 0.0):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
xA(t)        |   0.166000 |   0.166000 |   0.000000
xB(t)        |   0.333000 |   0.333000 |   0.000000
xC(t)        |   0.500000 |   0.500000 |   0.000000
eA(t)        |   0.666000 |   0.666000 |   0.000000
eC(t)        |   0.833000 |   0.833000 |   0.000000
k1           |   0.250000 |   0.250000 |   0.000000
k2           |   0.500000 |   0.500000 |   0.000000
eB           |   0.750000 |   0.750000 |   0.000000

Cluster 2: 1 similar solutions
Best solution (Error: 0.0):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
xA(t)        |   0.166000 |  -0.167000 |   2.006024
xB(t)        |   0.333000 |   0.666000 |   1.000000
xC(t)        |   0.500000 |   0.500000 |   0.000000
eA(t)        |   0.666000 |   0.666000 |   0.000000
eC(t)        |   0.833000 |   0.833000 |   0.000000
k1           |   0.250000 |   0.500000 |   1.000000
k2           |   0.500000 |   0.250000 |   0.500000
eB           |   0.750000 |   0.708000 |   0.056000

Best maximum relative error for slowfast (excluding ALL unidentifiable parameters): 0.0

Observables Statistics:
--------------------------------------------------
Variable      | Mean        | Std         | Min         | Max         | Range       | Turns
--------------------------------------------------
y1(t)        |   0.842837 |   0.126863 |   0.500000 |   0.970623 |   0.470623 |          0
y2(t)        |   0.814061 |   0.014111 |   0.776806 |   0.828667 |   0.051861 |          0
y3(t)        |   0.666000 |   0.000000 |   0.666000 |   0.666000 |   0.000000 |          0
y4(t)        |   0.833000 |   0.000000 |   0.833000 |   0.833000 |   0.000000 |          0

Error Statistics for Best Solution:
--------------------------------------------------

Error Statistics by Observable:
--------------------------------------------------
Observable   | Error Type | Mean        | Std         | Min         | Max         | Range
--------------------------------------------------
y1(t)        | Absolute   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y1(t)        | Relative   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y2(t)        | Absolute   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y2(t)        | Relative   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y3(t)        | Absolute   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y3(t)        | Relative   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y4(t)        | Absolute   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y4(t)        | Relative   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000

Detailed Time Series Comparison:
------------------------------------------------------------------------------------------------------------------------
t | y1(t)_act    | y1(t)_pred   | abs_err      | rel_err      | y2(t)_act    | y2(t)_pred   | abs_err      | rel_err      | y3(t)_act    | y3(t)_pred   | abs_err      | rel_err      | y4(t)_act    | y4(t)_pred   | abs_err      | rel_err     
------------------------------------------------------------------------------------------------------------------------
  0.0000 |     0.500000 |     0.500000 |     0.000000 |     0.000000 |     0.776806 |     0.776806 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  0.1000 |     0.516342 |     0.516342 |     0.000000 |     0.000000 |     0.778507 |     0.778507 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  0.2000 |     0.532084 |     0.532084 |     0.000000 |     0.000000 |     0.780149 |     0.780149 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  0.3000 |     0.547251 |     0.547251 |     0.000000 |     0.000000 |     0.781735 |     0.781735 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  0.4000 |     0.561866 |     0.561866 |     0.000000 |     0.000000 |     0.783268 |     0.783268 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  0.5000 |     0.575951 |     0.575951 |     0.000000 |     0.000000 |     0.784748 |     0.784748 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  0.6000 |     0.589528 |     0.589528 |     0.000000 |     0.000000 |     0.786179 |     0.786179 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  0.7000 |     0.602617 |     0.602617 |     0.000000 |     0.000000 |     0.787562 |     0.787562 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  0.8000 |     0.615238 |     0.615238 |     0.000000 |     0.000000 |     0.788898 |     0.788898 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  0.9000 |     0.627409 |     0.627409 |     0.000000 |     0.000000 |     0.790190 |     0.790190 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  1.0000 |     0.639148 |     0.639148 |     0.000000 |     0.000000 |     0.791440 |     0.791440 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  1.1000 |     0.650471 |     0.650471 |     0.000000 |     0.000000 |     0.792648 |     0.792648 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  1.2000 |     0.661397 |     0.661397 |     0.000000 |     0.000000 |     0.793816 |     0.793816 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  1.3000 |     0.671939 |     0.671939 |     0.000000 |     0.000000 |     0.794946 |     0.794946 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  1.4000 |     0.682114 |     0.682114 |     0.000000 |     0.000000 |     0.796039 |     0.796039 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  1.5000 |     0.691935 |     0.691935 |     0.000000 |     0.000000 |     0.797097 |     0.797097 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  1.6000 |     0.701416 |     0.701416 |     0.000000 |     0.000000 |     0.798121 |     0.798121 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  1.7000 |     0.710570 |     0.710570 |     0.000000 |     0.000000 |     0.799111 |     0.799111 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  1.8000 |     0.719410 |     0.719410 |     0.000000 |     0.000000 |     0.800070 |     0.800070 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  1.9000 |     0.727948 |     0.727948 |     0.000000 |     0.000000 |     0.800998 |     0.800998 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  2.0000 |     0.736196 |     0.736196 |     0.000000 |     0.000000 |     0.801897 |     0.801897 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  2.1000 |     0.744164 |     0.744164 |     0.000000 |     0.000000 |     0.802767 |     0.802767 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  2.2000 |     0.751863 |     0.751863 |     0.000000 |     0.000000 |     0.803610 |     0.803610 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  2.3000 |     0.759304 |     0.759304 |     0.000000 |     0.000000 |     0.804426 |     0.804426 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  2.4000 |     0.766495 |     0.766495 |     0.000000 |     0.000000 |     0.805216 |     0.805216 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  2.5000 |     0.773447 |     0.773447 |     0.000000 |     0.000000 |     0.805982 |     0.805982 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  2.6000 |     0.780168 |     0.780168 |     0.000000 |     0.000000 |     0.806725 |     0.806725 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  2.7000 |     0.786667 |     0.786667 |     0.000000 |     0.000000 |     0.807444 |     0.807444 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  2.8000 |     0.792952 |     0.792952 |     0.000000 |     0.000000 |     0.808141 |     0.808141 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  2.9000 |     0.799031 |     0.799031 |     0.000000 |     0.000000 |     0.808816 |     0.808816 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  3.0000 |     0.804912 |     0.804912 |     0.000000 |     0.000000 |     0.809471 |     0.809471 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  3.1000 |     0.810601 |     0.810601 |     0.000000 |     0.000000 |     0.810106 |     0.810106 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  3.2000 |     0.816106 |     0.816106 |     0.000000 |     0.000000 |     0.810721 |     0.810721 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  3.3000 |     0.821434 |     0.821434 |     0.000000 |     0.000000 |     0.811318 |     0.811318 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  3.4000 |     0.826590 |     0.826590 |     0.000000 |     0.000000 |     0.811897 |     0.811897 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  3.5000 |     0.831582 |     0.831582 |     0.000000 |     0.000000 |     0.812459 |     0.812459 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  3.6000 |     0.836414 |     0.836414 |     0.000000 |     0.000000 |     0.813003 |     0.813003 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  3.7000 |     0.841093 |     0.841093 |     0.000000 |     0.000000 |     0.813531 |     0.813531 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  3.8000 |     0.845624 |     0.845624 |     0.000000 |     0.000000 |     0.814044 |     0.814044 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  3.9000 |     0.850012 |     0.850012 |     0.000000 |     0.000000 |     0.814541 |     0.814541 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  4.0000 |     0.854263 |     0.854263 |     0.000000 |     0.000000 |     0.815024 |     0.815024 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  4.1000 |     0.858381 |     0.858381 |     0.000000 |     0.000000 |     0.815493 |     0.815493 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  4.2000 |     0.862370 |     0.862370 |     0.000000 |     0.000000 |     0.815947 |     0.815947 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  4.3000 |     0.866236 |     0.866236 |     0.000000 |     0.000000 |     0.816389 |     0.816389 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  4.4000 |     0.869983 |     0.869983 |     0.000000 |     0.000000 |     0.816817 |     0.816817 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  4.5000 |     0.873614 |     0.873614 |     0.000000 |     0.000000 |     0.817233 |     0.817233 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  4.6000 |     0.877133 |     0.877133 |     0.000000 |     0.000000 |     0.817637 |     0.817637 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  4.7000 |     0.880545 |     0.880545 |     0.000000 |     0.000000 |     0.818029 |     0.818029 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  4.8000 |     0.883854 |     0.883854 |     0.000000 |     0.000000 |     0.818410 |     0.818410 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  4.9000 |     0.887061 |     0.887061 |     0.000000 |     0.000000 |     0.818780 |     0.818780 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  5.0000 |     0.890172 |     0.890172 |     0.000000 |     0.000000 |     0.819139 |     0.819139 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  5.1000 |     0.893189 |     0.893189 |     0.000000 |     0.000000 |     0.819488 |     0.819488 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  5.2000 |     0.896116 |     0.896116 |     0.000000 |     0.000000 |     0.819827 |     0.819827 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  5.3000 |     0.898955 |     0.898955 |     0.000000 |     0.000000 |     0.820157 |     0.820157 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  5.4000 |     0.901709 |     0.901709 |     0.000000 |     0.000000 |     0.820477 |     0.820477 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  5.5000 |     0.904381 |     0.904381 |     0.000000 |     0.000000 |     0.820788 |     0.820788 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  5.6000 |     0.906975 |     0.906975 |     0.000000 |     0.000000 |     0.821090 |     0.821090 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  5.7000 |     0.909491 |     0.909491 |     0.000000 |     0.000000 |     0.821384 |     0.821384 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  5.8000 |     0.911934 |     0.911934 |     0.000000 |     0.000000 |     0.821670 |     0.821670 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  5.9000 |     0.914305 |     0.914305 |     0.000000 |     0.000000 |     0.821947 |     0.821947 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  6.0000 |     0.916606 |     0.916606 |     0.000000 |     0.000000 |     0.822217 |     0.822217 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  6.1000 |     0.918841 |     0.918841 |     0.000000 |     0.000000 |     0.822479 |     0.822479 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  6.2000 |     0.921010 |     0.921010 |     0.000000 |     0.000000 |     0.822734 |     0.822734 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  6.3000 |     0.923117 |     0.923117 |     0.000000 |     0.000000 |     0.822982 |     0.822982 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  6.4000 |     0.925163 |     0.925163 |     0.000000 |     0.000000 |     0.823223 |     0.823223 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  6.5000 |     0.927150 |     0.927150 |     0.000000 |     0.000000 |     0.823458 |     0.823458 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  6.6000 |     0.929080 |     0.929080 |     0.000000 |     0.000000 |     0.823686 |     0.823686 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  6.7000 |     0.930955 |     0.930955 |     0.000000 |     0.000000 |     0.823907 |     0.823907 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  6.8000 |     0.932776 |     0.932776 |     0.000000 |     0.000000 |     0.824123 |     0.824123 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  6.9000 |     0.934545 |     0.934545 |     0.000000 |     0.000000 |     0.824333 |     0.824333 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  7.0000 |     0.936264 |     0.936264 |     0.000000 |     0.000000 |     0.824537 |     0.824537 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  7.1000 |     0.937934 |     0.937934 |     0.000000 |     0.000000 |     0.824735 |     0.824735 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  7.2000 |     0.939558 |     0.939558 |     0.000000 |     0.000000 |     0.824928 |     0.824928 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  7.3000 |     0.941135 |     0.941135 |     0.000000 |     0.000000 |     0.825116 |     0.825116 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  7.4000 |     0.942668 |     0.942668 |     0.000000 |     0.000000 |     0.825299 |     0.825299 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  7.5000 |     0.944159 |     0.944159 |     0.000000 |     0.000000 |     0.825477 |     0.825477 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  7.6000 |     0.945607 |     0.945607 |     0.000000 |     0.000000 |     0.825650 |     0.825650 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  7.7000 |     0.947016 |     0.947016 |     0.000000 |     0.000000 |     0.825818 |     0.825818 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  7.8000 |     0.948385 |     0.948385 |     0.000000 |     0.000000 |     0.825982 |     0.825982 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  7.9000 |     0.949716 |     0.949716 |     0.000000 |     0.000000 |     0.826142 |     0.826142 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  8.0000 |     0.951010 |     0.951010 |     0.000000 |     0.000000 |     0.826297 |     0.826297 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  8.1000 |     0.952269 |     0.952269 |     0.000000 |     0.000000 |     0.826448 |     0.826448 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  8.2000 |     0.953492 |     0.953492 |     0.000000 |     0.000000 |     0.826595 |     0.826595 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  8.3000 |     0.954683 |     0.954683 |     0.000000 |     0.000000 |     0.826738 |     0.826738 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  8.4000 |     0.955840 |     0.955840 |     0.000000 |     0.000000 |     0.826877 |     0.826877 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  8.5000 |     0.956966 |     0.956966 |     0.000000 |     0.000000 |     0.827013 |     0.827013 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  8.6000 |     0.958061 |     0.958061 |     0.000000 |     0.000000 |     0.827145 |     0.827145 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  8.7000 |     0.959127 |     0.959127 |     0.000000 |     0.000000 |     0.827273 |     0.827273 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  8.8000 |     0.960163 |     0.960163 |     0.000000 |     0.000000 |     0.827398 |     0.827398 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  8.9000 |     0.961171 |     0.961171 |     0.000000 |     0.000000 |     0.827520 |     0.827520 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  9.0000 |     0.962152 |     0.962152 |     0.000000 |     0.000000 |     0.827639 |     0.827639 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  9.1000 |     0.963107 |     0.963107 |     0.000000 |     0.000000 |     0.827754 |     0.827754 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  9.2000 |     0.964035 |     0.964035 |     0.000000 |     0.000000 |     0.827867 |     0.827867 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  9.3000 |     0.964939 |     0.964939 |     0.000000 |     0.000000 |     0.827976 |     0.827976 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  9.4000 |     0.965819 |     0.965819 |     0.000000 |     0.000000 |     0.828083 |     0.828083 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  9.5000 |     0.966674 |     0.966674 |     0.000000 |     0.000000 |     0.828187 |     0.828187 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  9.6000 |     0.967507 |     0.967507 |     0.000000 |     0.000000 |     0.828288 |     0.828288 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  9.7000 |     0.968318 |     0.968318 |     0.000000 |     0.000000 |     0.828387 |     0.828387 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  9.8000 |     0.969107 |     0.969107 |     0.000000 |     0.000000 |     0.828483 |     0.828483 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
  9.9000 |     0.969875 |     0.969875 |     0.000000 |     0.000000 |     0.828576 |     0.828576 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
 10.0000 |     0.970623 |     0.970623 |     0.000000 |     0.000000 |     0.828667 |     0.828667 |     0.000000 |     0.000000 |     0.666000 |     0.666000 |     0.000000 |     0.000000 |     0.833000 |     0.833000 |     0.000000 |     0.000000
------------------------------------------------------------------------------------------------------------------------
Starting model: hiv

DEBUG [MPHCPE]: Starting parameter estimation...
DEBUG [MPHCPE]: Analyzing identifiability with 2 points
DEBUG [MPHCPE]: Final analysis with 1 points
DEBUG [MPHCPE]: Final unidentifiable dict: Dict{Any, Any}()
DEBUG [MPHCPE]: Final varlist: Num[a, lm, d, u, k, q, h, b, beta, c, x(t), y(t), v(t), w(t), z(t)]
We are trying these points:[6]
Using these observations and their derivatives:
Dict{Int64, Int64} with 4 entries:
  4 => 2
  2 => 3
  3 => 3
  1 => 3
total degree: 93312
using monodromy, line 917
┌ Warning: Interrupted. Larger maxiters is needed. If you are using an integrator for non-stiff ODEs or an automatic switching algorithm (the default), you may want to consider using a method for stiff equations. See the solver pages for more details (e.g. https://docs.sciml.ai/DiffEqDocs/stable/solvers/ode_solve/#Stiff-Problems).
└ @ SciMLBase ~/.julia/packages/SciMLBase/fB2hR/src/integrator_interface.jl:589
┌ Warning: Interrupted. Larger maxiters is needed. If you are using an integrator for non-stiff ODEs or an automatic switching algorithm (the default), you may want to consider using a method for stiff equations. See the solver pages for more details (e.g. https://docs.sciml.ai/DiffEqDocs/stable/solvers/ode_solve/#Stiff-Problems).
└ @ SciMLBase ~/.julia/packages/SciMLBase/fB2hR/src/integrator_interface.jl:589

Unidentifiability Analysis from MPHCPE:
All unidentifiable variables: Set{Any}()
Unidentifiable variables substitution dictionary: Dict{Any, Any}()
Trivially solvable variables: Dict{Any, Any}(_t6_wˍttt_t_ => -0.0009366406783044567, _t6_wˍtt_t_ => -0.0005116820644275322, _t6_w_t_ => 1.0027381494595182, _t6_z_t_ => 5.008208869040465e-7, _t6_zˍtt_t_ => -9.192486323928258e-8, _t6_xˍt_t_ => -9.826401095229812, _t6_zˍt_t_ => 4.5773505554448366e-7, _t6_zˍttt_t_ => -8.672597493439142e-8, _t6_xˍtt_t_ => 0.09826519960552105, _t6_wˍt_t_ => 0.0030094206390742784, _t6_xˍttt_t_ => -0.0009857126424321905, _t6_x_t_ => 987.6399038572883)

DEBUG [ODEPEtestwrapper]: Processing solution 1

DEBUG [ODEPEtestwrapper]: Processing solution 2

DEBUG [ODEPEtestwrapper]: Processing solution 3
┌ Warning: At t=13.583082009796495, dt was forced below floating point epsilon 1.7763568394002505e-15, and step error estimate = NaN. Aborting. There is either an error in your model specification or the true solution is unstable (or the true solution can not be represented in the precision of Float64).
└ @ SciMLBase ~/.julia/packages/SciMLBase/fB2hR/src/integrator_interface.jl:623

DEBUG [ODEPEtestwrapper]: Processing solution 4

=== Model: hiv ===

Found 2 distinct solution clusters:

Cluster 1: 1 similar solutions
Best solution (Error: 0.232476):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
x(t)         | 1000.000000 | 998.805702 |   0.001194
y(t)         |   0.000000 |   0.000000 |   0.000000
v(t)         |   0.001000 |   0.001000 |   0.000261
w(t)         |   1.000000 |   1.004985 |   0.004985
z(t)         |   0.000000 |   0.000001 |   0.000001
lm           |   1.000000 |   0.050000 |   0.950000
d            |   0.010000 |   0.010000 |   0.000000
beta         |   0.000020 |   0.000020 |   0.000521
a            |   0.500000 |   0.499990 |   0.000020
k            |  50.000000 |  49.972677 |   0.000546
u            |   3.000000 |   3.000010 |   0.000003
c            |   0.050000 |   0.999479 |  18.989590
q            |   0.100000 |   0.100000 |   0.000000
b            |   0.002000 |   0.002000 |   0.000000
h            |   0.100000 |   0.100000 |   0.000000

Cluster 2: 1 similar solutions
Best solution (Error: 0.03152):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
x(t)         | 1000.000000 | 1000.000054 |   0.000000
y(t)         |   0.000000 |  -0.000295 |   0.000295
v(t)         |   0.001000 |   0.001021 |   0.021306
w(t)         |   1.000000 |   0.999641 |   0.000359
z(t)         |   0.000000 |  -0.000000 |   0.000000
lm           |   1.000000 |   0.088297 |   0.911703
d            |   0.010000 |   0.010041 |   0.004140
beta         |   0.000020 |  -0.002803 | 141.163398
a            |   0.500000 |   3.228344 |   5.456688
k            |  50.000000 |   0.517782 |   0.989644
u            |   3.000000 |  -0.310685 |   1.103562
c            |   0.050000 |  -0.006129 |   1.122578
q            |   0.100000 |   0.100000 |   0.000000
b            |   0.002000 |   0.002000 |   0.000000
h            |   0.100000 |   0.100000 |   0.000000

Best maximum relative error for hiv (excluding ALL unidentifiable parameters): 18.98959

Observables Statistics:
--------------------------------------------------
Variable      | Mean        | Std         | Min         | Max         | Range       | Turns
--------------------------------------------------
y1(t)        |   1.001177 |   0.007953 |   0.983672 |   1.010031 |   0.026359 |          2
y2(t)        |   0.000001 |   0.000000 |   0.000000 |   0.000002 |   0.000002 |          1
y3(t)        | 885.418675 |  64.456805 | 779.906765 | 1000.000000 | 220.093235 |          0
y4(t)        |   0.000044 |   0.000114 |   0.000001 |   0.001000 |   0.000999 |          0

Error Statistics for Best Solution:
--------------------------------------------------

Error Statistics by Observable:
--------------------------------------------------
Observable   | Error Type | Mean        | Std         | Min         | Max         | Range
--------------------------------------------------
y1(t)        | Absolute   |   0.342135 |   0.114055 |   0.000359 |   0.439341 |   0.438982
y1(t)        | Relative   |   0.342167 |   0.115282 |   0.000359 |   0.446634 |   0.446274
y2(t)        | Absolute   |   0.000016 |   0.000005 |   0.000000 |   0.000022 |   0.000022
y2(t)        | Relative   |  17.179040 |  35.127818 |  12.596894 | 366.407301 | 353.810408
y3(t)        | Absolute   |   1.070513 |   0.594999 |   0.000054 |   2.029004 |   2.028951
y3(t)        | Relative   |   0.001264 |   0.000763 |   0.000000 |   0.002602 |   0.002602
y4(t)        | Absolute   |   0.000028 |   0.000027 |   0.000000 |   0.000274 |   0.000274
y4(t)        | Relative   |   4.865452 |   5.989230 |   0.000778 |  23.751177 |  23.750398

Detailed Time Series Comparison:
------------------------------------------------------------------------------------------------------------------------
t | y1(t)_act    | y1(t)_pred   | abs_err      | rel_err      | y2(t)_act    | y2(t)_pred   | abs_err      | rel_err      | y3(t)_act    | y3(t)_pred   | abs_err      | rel_err      | y4(t)_act    | y4(t)_pred   | abs_err      | rel_err     
------------------------------------------------------------------------------------------------------------------------
  0.0000 |     1.000000 |     0.999641 |     0.000359 |     0.000359 |     0.000000 |    -0.000000 |     0.000000 |   366.407301 |  1000.000000 |  1000.000054 |     0.000054 |     0.000000 |     0.001000 |     0.000726 |     0.000274 |     0.274140
  0.2500 |     0.999974 |     0.988551 |     0.011423 |     0.011424 |     0.000000 |    -0.000001 |     0.000001 |    23.994984 |   997.515603 |   997.492044 |     0.023559 |     0.000024 |     0.000494 |     0.000410 |     0.000084 |     0.169709
  0.5000 |     1.000488 |     0.972690 |     0.027798 |     0.027785 |     0.000000 |    -0.000003 |     0.000003 |    18.617439 |   995.037411 |   994.990322 |     0.047090 |     0.000047 |     0.000273 |     0.000251 |     0.000022 |     0.079249
  0.7500 |     1.001202 |     0.955120 |     0.046083 |     0.046027 |     0.000000 |    -0.000004 |     0.000004 |    16.990348 |   992.565408 |   992.494856 |     0.070552 |     0.000071 |     0.000175 |     0.000171 |     0.000004 |     0.022771
  1.0000 |     1.001973 |     0.937313 |     0.064660 |     0.064532 |     0.000000 |    -0.000006 |     0.000006 |    16.212844 |   990.099577 |   990.005624 |     0.093953 |     0.000095 |     0.000131 |     0.000130 |     0.000000 |     0.001998
  1.2500 |     1.002738 |     0.919948 |     0.082790 |     0.082564 |     0.000001 |    -0.000007 |     0.000008 |    15.741422 |   987.639904 |   987.522609 |     0.117294 |     0.000119 |     0.000109 |     0.000109 |     0.000000 |     0.000778
  1.5000 |     1.003473 |     0.903315 |     0.100158 |     0.099811 |     0.000001 |    -0.000009 |     0.000009 |    15.407653 |   985.186372 |   985.045795 |     0.140577 |     0.000143 |     0.000098 |     0.000098 |     0.000000 |     0.002570
  1.7500 |     1.004166 |     0.887515 |     0.116651 |     0.116167 |     0.000001 |    -0.000010 |     0.000011 |    15.145798 |   982.738966 |   982.575165 |     0.163801 |     0.000167 |     0.000091 |     0.000092 |     0.000001 |     0.010365
  2.0000 |     1.004816 |     0.872564 |     0.132252 |     0.131618 |     0.000001 |    -0.000011 |     0.000012 |    14.926407 |   980.297671 |   980.110705 |     0.186966 |     0.000191 |     0.000086 |     0.000089 |     0.000002 |     0.024686
  2.2500 |     1.005420 |     0.858435 |     0.146985 |     0.146193 |     0.000001 |    -0.000012 |     0.000013 |    14.734915 |   977.862472 |   977.652401 |     0.210071 |     0.000215 |     0.000083 |     0.000086 |     0.000004 |     0.044027
  2.5000 |     1.005981 |     0.845087 |     0.160894 |     0.159937 |     0.000001 |    -0.000013 |     0.000014 |    14.563487 |   975.433353 |   975.200238 |     0.233114 |     0.000239 |     0.000079 |     0.000084 |     0.000005 |     0.066824
  2.7500 |     1.006498 |     0.832472 |     0.174027 |     0.172903 |     0.000001 |    -0.000014 |     0.000015 |    14.407577 |   973.010299 |   972.754203 |     0.256097 |     0.000263 |     0.000076 |     0.000083 |     0.000007 |     0.091949
  3.0000 |     1.006975 |     0.820541 |     0.186433 |     0.185142 |     0.000001 |    -0.000015 |     0.000016 |    14.264341 |   970.593296 |   970.314279 |     0.279017 |     0.000287 |     0.000073 |     0.000082 |     0.000009 |     0.118696
  3.2500 |     1.007410 |     0.809249 |     0.198161 |     0.196703 |     0.000001 |    -0.000016 |     0.000017 |    14.131882 |   968.182327 |   967.880454 |     0.301873 |     0.000312 |     0.000070 |     0.000080 |     0.000010 |     0.146657
  3.5000 |     1.007808 |     0.798552 |     0.209255 |     0.207634 |     0.000001 |    -0.000017 |     0.000018 |    14.008849 |   965.777378 |   965.452712 |     0.324666 |     0.000336 |     0.000067 |     0.000079 |     0.000012 |     0.175615
  3.7500 |     1.008168 |     0.788410 |     0.219757 |     0.217977 |     0.000001 |    -0.000017 |     0.000018 |    13.894232 |   963.378434 |   963.031039 |     0.347395 |     0.000361 |     0.000065 |     0.000078 |     0.000013 |     0.205468
  4.0000 |     1.008491 |     0.778786 |     0.229706 |     0.227771 |     0.000001 |    -0.000018 |     0.000019 |    13.787243 |   960.985481 |   960.615422 |     0.370059 |     0.000385 |     0.000062 |     0.000077 |     0.000015 |     0.236178
  4.2500 |     1.008781 |     0.769645 |     0.239136 |     0.237054 |     0.000001 |    -0.000018 |     0.000020 |    13.687244 |   958.598502 |   958.205845 |     0.392657 |     0.000410 |     0.000060 |     0.000076 |     0.000016 |     0.267748
  4.5000 |     1.009036 |     0.760955 |     0.248081 |     0.245860 |     0.000001 |    -0.000019 |     0.000020 |    13.593705 |   956.217483 |   955.802293 |     0.415189 |     0.000434 |     0.000057 |     0.000075 |     0.000017 |     0.300201
  4.7500 |     1.009260 |     0.752688 |     0.256572 |     0.254218 |     0.000002 |    -0.000019 |     0.000020 |    13.506176 |   953.842409 |   953.404754 |     0.437655 |     0.000459 |     0.000055 |     0.000074 |     0.000018 |     0.333574
  5.0000 |     1.009453 |     0.744817 |     0.264636 |     0.262158 |     0.000002 |    -0.000019 |     0.000021 |    13.424268 |   951.473265 |   951.013212 |     0.460053 |     0.000484 |     0.000053 |     0.000072 |     0.000019 |     0.367912
  5.2500 |     1.009616 |     0.737316 |     0.272300 |     0.269706 |     0.000002 |    -0.000019 |     0.000021 |    13.347642 |   949.110037 |   948.627652 |     0.482385 |     0.000508 |     0.000051 |     0.000071 |     0.000020 |     0.403264
  5.5000 |     1.009750 |     0.730164 |     0.279587 |     0.276887 |     0.000002 |    -0.000020 |     0.000021 |    13.275998 |   946.752709 |   946.248061 |     0.504648 |     0.000533 |     0.000049 |     0.000070 |     0.000021 |     0.439684
  5.7500 |     1.009857 |     0.723338 |     0.286520 |     0.283723 |     0.000002 |    -0.000020 |     0.000022 |    13.209065 |   944.401268 |   943.874424 |     0.526844 |     0.000558 |     0.000047 |     0.000069 |     0.000022 |     0.477226
  6.0000 |     1.009938 |     0.716818 |     0.293120 |     0.290235 |     0.000002 |    -0.000020 |     0.000022 |    13.146602 |   942.055698 |   941.506727 |     0.548971 |     0.000583 |     0.000045 |     0.000068 |     0.000023 |     0.515950
  6.2500 |     1.009993 |     0.710587 |     0.299405 |     0.296443 |     0.000002 |    -0.000020 |     0.000022 |    13.088390 |   939.715984 |   939.144955 |     0.571030 |     0.000608 |     0.000043 |     0.000067 |     0.000024 |     0.555918
  6.5000 |     1.010024 |     0.704628 |     0.305395 |     0.302365 |     0.000002 |    -0.000020 |     0.000022 |    13.034230 |   937.382113 |   936.789093 |     0.593020 |     0.000633 |     0.000041 |     0.000066 |     0.000025 |     0.597192
  6.7500 |     1.010031 |     0.698925 |     0.311106 |     0.308016 |     0.000002 |    -0.000020 |     0.000022 |    12.983938 |   935.054068 |   934.439128 |     0.614940 |     0.000658 |     0.000040 |     0.000065 |     0.000025 |     0.639840
  7.0000 |     1.010016 |     0.693463 |     0.316553 |     0.313414 |     0.000002 |    -0.000020 |     0.000022 |    12.937348 |   932.731837 |   932.095046 |     0.636792 |     0.000683 |     0.000038 |     0.000064 |     0.000026 |     0.683930
  7.2500 |     1.009979 |     0.688228 |     0.321750 |     0.318572 |     0.000002 |    -0.000020 |     0.000022 |    12.894305 |   930.415404 |   929.756831 |     0.658574 |     0.000708 |     0.000036 |     0.000063 |     0.000027 |     0.729536
  7.5000 |     1.009921 |     0.683208 |     0.326713 |     0.323503 |     0.000002 |    -0.000020 |     0.000022 |    12.854666 |   928.104755 |   927.424469 |     0.680286 |     0.000733 |     0.000035 |     0.000062 |     0.000027 |     0.776732
  7.7500 |     1.009844 |     0.678392 |     0.331452 |     0.328221 |     0.000002 |    -0.000020 |     0.000022 |    12.818299 |   925.799875 |   925.097947 |     0.701928 |     0.000758 |     0.000033 |     0.000061 |     0.000028 |     0.825597
  8.0000 |     1.009747 |     0.673767 |     0.335981 |     0.332737 |     0.000002 |    -0.000020 |     0.000022 |    12.785081 |   923.500751 |   922.777250 |     0.723501 |     0.000783 |     0.000032 |     0.000060 |     0.000028 |     0.876215
  8.2500 |     1.009632 |     0.669323 |     0.340309 |     0.337063 |     0.000002 |    -0.000020 |     0.000022 |    12.754900 |   921.207366 |   920.462363 |     0.745004 |     0.000809 |     0.000031 |     0.000059 |     0.000028 |     0.928670
  8.5000 |     1.009500 |     0.665051 |     0.344449 |     0.341207 |     0.000002 |    -0.000020 |     0.000022 |    12.727647 |   918.919709 |   918.153273 |     0.766436 |     0.000834 |     0.000029 |     0.000058 |     0.000029 |     0.983053
  8.7500 |     1.009351 |     0.660942 |     0.348409 |     0.345181 |     0.000002 |    -0.000020 |     0.000022 |    12.703224 |   916.637763 |   915.849964 |     0.787798 |     0.000859 |     0.000028 |     0.000057 |     0.000029 |     1.039458
  9.0000 |     1.009186 |     0.656987 |     0.352198 |     0.348993 |     0.000002 |    -0.000020 |     0.000022 |    12.681538 |   914.361515 |   913.552424 |     0.809091 |     0.000885 |     0.000027 |     0.000056 |     0.000030 |     1.097985
  9.2500 |     1.009005 |     0.653179 |     0.355826 |     0.352651 |     0.000002 |    -0.000020 |     0.000022 |    12.662504 |   912.090950 |   911.260638 |     0.830312 |     0.000910 |     0.000026 |     0.000056 |     0.000030 |     1.158737
  9.5000 |     1.008810 |     0.649509 |     0.359301 |     0.356163 |     0.000002 |    -0.000020 |     0.000021 |    12.646038 |   909.826055 |   908.974591 |     0.851464 |     0.000936 |     0.000025 |     0.000055 |     0.000030 |     1.221822
  9.7500 |     1.008600 |     0.645971 |     0.362629 |     0.359537 |     0.000002 |    -0.000020 |     0.000021 |    12.632066 |   907.566815 |   906.694270 |     0.872545 |     0.000961 |     0.000024 |     0.000054 |     0.000030 |     1.287356
 10.0000 |     1.008377 |     0.642558 |     0.365819 |     0.362780 |     0.000002 |    -0.000019 |     0.000021 |    12.620517 |   905.313216 |   904.419660 |     0.893556 |     0.000987 |     0.000023 |     0.000053 |     0.000031 |     1.355457
 10.2500 |     1.008141 |     0.639264 |     0.368877 |     0.365899 |     0.000002 |    -0.000019 |     0.000021 |    12.611322 |   903.065244 |   902.150748 |     0.914496 |     0.001013 |     0.000022 |     0.000052 |     0.000031 |     1.426252
 10.5000 |     1.007893 |     0.636083 |     0.371810 |     0.368898 |     0.000002 |    -0.000019 |     0.000021 |    12.604420 |   900.822885 |   899.887519 |     0.935366 |     0.001038 |     0.000021 |     0.000051 |     0.000031 |     1.499872
 10.7500 |     1.007633 |     0.633010 |     0.374623 |     0.371785 |     0.000002 |    -0.000019 |     0.000021 |    12.599751 |   898.586125 |   897.629959 |     0.956166 |     0.001064 |     0.000020 |     0.000051 |     0.000031 |     1.576457
 11.0000 |     1.007361 |     0.630039 |     0.377322 |     0.374565 |     0.000002 |    -0.000019 |     0.000020 |    12.597259 |   896.354950 |   895.378054 |     0.976896 |     0.001090 |     0.000019 |     0.000050 |     0.000031 |     1.656154
 11.2500 |     1.007079 |     0.627166 |     0.379913 |     0.377243 |     0.000002 |    -0.000019 |     0.000020 |    12.596894 |   894.129345 |   893.131790 |     0.997555 |     0.001116 |     0.000018 |     0.000049 |     0.000031 |     1.739115
 11.5000 |     1.006786 |     0.624385 |     0.382401 |     0.379823 |     0.000002 |    -0.000018 |     0.000020 |    12.598605 |   891.909298 |   890.891154 |     1.018144 |     0.001142 |     0.000017 |     0.000049 |     0.000031 |     1.825503
 11.7500 |     1.006484 |     0.621694 |     0.384790 |     0.382311 |     0.000002 |    -0.000018 |     0.000020 |    12.602346 |   889.694794 |   888.656131 |     1.038663 |     0.001167 |     0.000016 |     0.000048 |     0.000031 |     1.915488
 12.0000 |     1.006172 |     0.619087 |     0.387085 |     0.384711 |     0.000002 |    -0.000018 |     0.000020 |    12.608074 |   887.485819 |   886.426707 |     1.059112 |     0.001193 |     0.000016 |     0.000047 |     0.000032 |     2.009250
 12.2500 |     1.005851 |     0.616560 |     0.389291 |     0.387026 |     0.000002 |    -0.000018 |     0.000019 |    12.615748 |   885.282360 |   884.202869 |     1.079491 |     0.001219 |     0.000015 |     0.000047 |     0.000032 |     2.106978
 12.5000 |     1.005522 |     0.614111 |     0.391411 |     0.389261 |     0.000002 |    -0.000018 |     0.000019 |    12.625331 |   883.084403 |   881.984603 |     1.099800 |     0.001245 |     0.000014 |     0.000046 |     0.000032 |     2.208872
 12.7500 |     1.005184 |     0.611735 |     0.393449 |     0.391420 |     0.000001 |    -0.000017 |     0.000019 |    12.636785 |   880.891934 |   879.771894 |     1.120039 |     0.001271 |     0.000014 |     0.000045 |     0.000032 |     2.315141
 13.0000 |     1.004838 |     0.609429 |     0.395409 |     0.393505 |     0.000001 |    -0.000017 |     0.000019 |    12.650078 |   878.704939 |   877.564730 |     1.140209 |     0.001298 |     0.000013 |     0.000045 |     0.000032 |     2.426007
 13.2500 |     1.004486 |     0.607191 |     0.397295 |     0.395521 |     0.000001 |    -0.000017 |     0.000018 |    12.665177 |   876.523404 |   875.363096 |     1.160309 |     0.001324 |     0.000012 |     0.000044 |     0.000032 |     2.541704
 13.5000 |     1.004126 |     0.605017 |     0.399109 |     0.397469 |     0.000001 |    -0.000017 |     0.000018 |    12.682053 |   874.347317 |   873.166978 |     1.180339 |     0.001350 |     0.000012 |     0.000043 |     0.000032 |     2.662478
 13.7500 |     1.003759 |     0.602904 |     0.400855 |     0.399354 |     0.000001 |    -0.000017 |     0.000018 |    12.700678 |   872.176663 |   870.976363 |     1.200300 |     0.001376 |     0.000011 |     0.000043 |     0.000032 |     2.788591
 14.0000 |     1.003386 |     0.600850 |     0.402536 |     0.401178 |     0.000001 |    -0.000016 |     0.000018 |    12.721026 |   870.011429 |   868.791238 |     1.220191 |     0.001403 |     0.000011 |     0.000042 |     0.000032 |     2.920316
 14.2500 |     1.003006 |     0.598852 |     0.404154 |     0.402943 |     0.000001 |    -0.000016 |     0.000018 |    12.743072 |   867.851601 |   866.611588 |     1.240013 |     0.001429 |     0.000010 |     0.000042 |     0.000031 |     3.057945
 14.5000 |     1.002621 |     0.596908 |     0.405713 |     0.404653 |     0.000001 |    -0.000016 |     0.000017 |    12.766794 |   865.697166 |   864.437400 |     1.259767 |     0.001455 |     0.000010 |     0.000041 |     0.000031 |     3.201785
 14.7500 |     1.002230 |     0.595016 |     0.407215 |     0.406309 |     0.000001 |    -0.000016 |     0.000017 |    12.792172 |   863.548111 |   862.268660 |     1.279451 |     0.001482 |     0.000009 |     0.000041 |     0.000031 |     3.352159
 15.0000 |     1.001834 |     0.593173 |     0.408662 |     0.407913 |     0.000001 |    -0.000016 |     0.000017 |    12.819184 |   861.404421 |   860.105355 |     1.299066 |     0.001508 |     0.000009 |     0.000040 |     0.000031 |     3.509409
 15.2500 |     1.001433 |     0.591377 |     0.410056 |     0.409469 |     0.000001 |    -0.000015 |     0.000017 |    12.847814 |   859.266084 |   857.947471 |     1.318613 |     0.001535 |     0.000008 |     0.000040 |     0.000031 |     3.673900
 15.5000 |     1.001027 |     0.589627 |     0.411400 |     0.410978 |     0.000001 |    -0.000015 |     0.000016 |    12.878044 |   857.133086 |   855.794996 |     1.338091 |     0.001561 |     0.000008 |     0.000039 |     0.000031 |     3.846013
 15.7500 |     1.000617 |     0.587921 |     0.412696 |     0.412441 |     0.000001 |    -0.000015 |     0.000016 |    12.909859 |   855.005414 |   853.647914 |     1.357500 |     0.001588 |     0.000008 |     0.000039 |     0.000031 |     4.026154
 16.0000 |     1.000202 |     0.586257 |     0.413945 |     0.413862 |     0.000001 |    -0.000015 |     0.000016 |    12.943245 |   852.883055 |   851.506213 |     1.376842 |     0.001614 |     0.000007 |     0.000038 |     0.000031 |     4.214752
 16.2500 |     0.999783 |     0.584632 |     0.415151 |     0.415241 |     0.000001 |    -0.000014 |     0.000016 |    12.978189 |   850.765995 |   849.369880 |     1.396115 |     0.001641 |     0.000007 |     0.000038 |     0.000031 |     4.412261
 16.5000 |     0.999360 |     0.583047 |     0.416314 |     0.416580 |     0.000001 |    -0.000014 |     0.000015 |    13.014680 |   848.654220 |   847.238900 |     1.415320 |     0.001668 |     0.000007 |     0.000037 |     0.000031 |     4.619163
 16.7500 |     0.998934 |     0.581498 |     0.417436 |     0.417881 |     0.000001 |    -0.000014 |     0.000015 |    13.052707 |   846.547719 |   845.113262 |     1.434457 |     0.001694 |     0.000006 |     0.000037 |     0.000031 |     4.835965
 17.0000 |     0.998504 |     0.579985 |     0.418519 |     0.419146 |     0.000001 |    -0.000014 |     0.000015 |    13.092260 |   844.446477 |   842.992950 |     1.453527 |     0.001721 |     0.000006 |     0.000037 |     0.000031 |     5.063207
 17.2500 |     0.998070 |     0.578507 |     0.419564 |     0.420375 |     0.000001 |    -0.000014 |     0.000015 |    13.133332 |   842.350482 |   840.877953 |     1.472529 |     0.001748 |     0.000006 |     0.000036 |     0.000030 |     5.301460
 17.5000 |     0.997634 |     0.577061 |     0.420573 |     0.421571 |     0.000001 |    -0.000013 |     0.000015 |    13.175916 |   840.259720 |   838.768257 |     1.491464 |     0.001775 |     0.000005 |     0.000036 |     0.000030 |     5.551331
 17.7500 |     0.997194 |     0.575647 |     0.421548 |     0.422734 |     0.000001 |    -0.000013 |     0.000014 |    13.220005 |   838.174179 |   836.663848 |     1.510331 |     0.001802 |     0.000005 |     0.000035 |     0.000030 |     5.813461
 18.0000 |     0.996752 |     0.574263 |     0.422489 |     0.423866 |     0.000001 |    -0.000013 |     0.000014 |    13.265595 |   836.093845 |   834.564714 |     1.529132 |     0.001829 |     0.000005 |     0.000035 |     0.000030 |     6.088531
 18.2500 |     0.996307 |     0.572909 |     0.423398 |     0.424968 |     0.000001 |    -0.000013 |     0.000014 |    13.312682 |   834.018706 |   832.470841 |     1.547865 |     0.001856 |     0.000005 |     0.000035 |     0.000030 |     6.377263
 18.5000 |     0.995859 |     0.571583 |     0.424277 |     0.426041 |     0.000001 |    -0.000013 |     0.000014 |    13.361263 |   831.948747 |   830.382216 |     1.566532 |     0.001883 |     0.000004 |     0.000034 |     0.000030 |     6.680423
 18.7500 |     0.995409 |     0.570284 |     0.425125 |     0.427086 |     0.000001 |    -0.000012 |     0.000013 |    13.411335 |   829.883958 |   828.298826 |     1.585132 |     0.001910 |     0.000004 |     0.000034 |     0.000030 |     6.998824
 19.0000 |     0.994957 |     0.569011 |     0.425946 |     0.428105 |     0.000001 |    -0.000012 |     0.000013 |    13.462899 |   827.824323 |   826.220658 |     1.603666 |     0.001937 |     0.000004 |     0.000034 |     0.000030 |     7.333329
 19.2500 |     0.994503 |     0.567764 |     0.426739 |     0.429098 |     0.000001 |    -0.000012 |     0.000013 |    13.515954 |   825.769832 |   824.147699 |     1.622133 |     0.001964 |     0.000004 |     0.000033 |     0.000030 |     7.684854
 19.5000 |     0.994046 |     0.566541 |     0.427506 |     0.430066 |     0.000001 |    -0.000012 |     0.000013 |    13.570501 |   823.720470 |   822.079935 |     1.640534 |     0.001992 |     0.000004 |     0.000033 |     0.000029 |     8.054372
 19.7500 |     0.993588 |     0.565341 |     0.428247 |     0.431011 |     0.000001 |    -0.000012 |     0.000013 |    13.626542 |   821.676225 |   820.017355 |     1.658870 |     0.002019 |     0.000003 |     0.000033 |     0.000029 |     8.442916
 20.0000 |     0.993128 |     0.564164 |     0.428964 |     0.431932 |     0.000001 |    -0.000012 |     0.000012 |    13.684081 |   819.637084 |   817.959945 |     1.677140 |     0.002046 |     0.000003 |     0.000032 |     0.000029 |     8.851586
 20.2500 |     0.992666 |     0.563008 |     0.429658 |     0.432832 |     0.000001 |    -0.000011 |     0.000012 |    13.743120 |   817.603035 |   815.907691 |     1.695344 |     0.002074 |     0.000003 |     0.000032 |     0.000029 |     9.281548
 20.5000 |     0.992202 |     0.561874 |     0.430328 |     0.433710 |     0.000001 |    -0.000011 |     0.000012 |    13.803666 |   815.574065 |   813.860582 |     1.713483 |     0.002101 |     0.000003 |     0.000032 |     0.000029 |     9.734044
 20.7500 |     0.991737 |     0.560760 |     0.430978 |     0.434568 |     0.000001 |    -0.000011 |     0.000012 |    13.865723 |   813.550161 |   811.818604 |     1.731556 |     0.002128 |     0.000003 |     0.000032 |     0.000029 |    10.210392
 21.0000 |     0.991271 |     0.559665 |     0.431606 |     0.435406 |     0.000001 |    -0.000011 |     0.000012 |    13.929299 |   811.531310 |   809.781745 |     1.749565 |     0.002156 |     0.000003 |     0.000031 |     0.000029 |    10.711997
 21.2500 |     0.990803 |     0.558589 |     0.432214 |     0.436226 |     0.000001 |    -0.000011 |     0.000012 |    13.994401 |   809.517500 |   807.749991 |     1.767509 |     0.002183 |     0.000003 |     0.000031 |     0.000029 |    11.240353
 21.5000 |     0.990334 |     0.557532 |     0.432802 |     0.437026 |     0.000001 |    -0.000011 |     0.000011 |    14.061038 |   807.508718 |   805.723331 |     1.785388 |     0.002211 |     0.000002 |     0.000031 |     0.000028 |    11.797047
 21.7500 |     0.989864 |     0.556492 |     0.433372 |     0.437809 |     0.000001 |    -0.000010 |     0.000011 |    14.129220 |   805.504952 |   803.701750 |     1.803202 |     0.002239 |     0.000002 |     0.000031 |     0.000028 |    12.383773
 22.0000 |     0.989392 |     0.555469 |     0.433923 |     0.438575 |     0.000001 |    -0.000010 |     0.000011 |    14.198956 |   803.506189 |   801.685237 |     1.820952 |     0.002266 |     0.000002 |     0.000030 |     0.000028 |    13.002331
 22.2500 |     0.988920 |     0.554463 |     0.434457 |     0.439325 |     0.000001 |    -0.000010 |     0.000011 |    14.270259 |   801.512417 |   799.673778 |     1.838639 |     0.002294 |     0.000002 |     0.000030 |     0.000028 |    13.654639
 22.5000 |     0.988447 |     0.553472 |     0.434975 |     0.440059 |     0.000001 |    -0.000010 |     0.000011 |    14.343142 |   799.523623 |   797.667362 |     1.856261 |     0.002322 |     0.000002 |     0.000030 |     0.000028 |    14.342742
 22.7500 |     0.987972 |     0.552497 |     0.435476 |     0.440777 |     0.000001 |    -0.000010 |     0.000010 |    14.417617 |   797.539795 |   795.665976 |     1.873819 |     0.002349 |     0.000002 |     0.000030 |     0.000028 |    15.068816
 23.0000 |     0.987497 |     0.551536 |     0.435961 |     0.441481 |     0.000001 |    -0.000010 |     0.000010 |    14.493700 |   795.560920 |   793.669606 |     1.891314 |     0.002377 |     0.000002 |     0.000030 |     0.000028 |    15.835183
 23.2500 |     0.987021 |     0.550590 |     0.436431 |     0.442170 |     0.000001 |    -0.000009 |     0.000010 |    14.571406 |   793.586986 |   791.678241 |     1.908745 |     0.002405 |     0.000002 |     0.000029 |     0.000028 |    16.644317
 23.5000 |     0.986545 |     0.549658 |     0.436887 |     0.442845 |     0.000001 |    -0.000009 |     0.000010 |    14.650752 |   791.617981 |   789.691868 |     1.926113 |     0.002433 |     0.000002 |     0.000029 |     0.000028 |    17.498857
 23.7500 |     0.986067 |     0.548739 |     0.437328 |     0.443507 |     0.000001 |    -0.000009 |     0.000010 |    14.731754 |   789.653892 |   787.710474 |     1.943418 |     0.002461 |     0.000001 |     0.000029 |     0.000028 |    18.401616
 24.0000 |     0.985589 |     0.547833 |     0.437756 |     0.444157 |     0.000001 |    -0.000009 |     0.000010 |    14.814433 |   787.694707 |   785.734047 |     1.960661 |     0.002489 |     0.000001 |     0.000029 |     0.000027 |    19.355597
 24.2500 |     0.985111 |     0.546940 |     0.438171 |     0.444794 |     0.000001 |    -0.000009 |     0.000009 |    14.898808 |   785.740414 |   783.762574 |     1.977840 |     0.002517 |     0.000001 |     0.000029 |     0.000027 |    20.364006
 24.5000 |     0.984632 |     0.546059 |     0.438573 |     0.445418 |     0.000001 |    -0.000009 |     0.000009 |    14.984900 |   783.791001 |   781.796044 |     1.994957 |     0.002545 |     0.000001 |     0.000029 |     0.000027 |    21.430262
 24.7500 |     0.984152 |     0.545189 |     0.438963 |     0.446032 |     0.000001 |    -0.000009 |     0.000009 |    15.072730 |   781.846455 |   779.834443 |     2.012012 |     0.002573 |     0.000001 |     0.000028 |     0.000027 |    22.558019
 25.0000 |     0.983672 |     0.544331 |     0.439341 |     0.446634 |     0.000001 |    -0.000008 |     0.000009 |    15.162323 |   779.906765 |   777.877760 |     2.029004 |     0.002602 |     0.000001 |     0.000028 |     0.000027 |    23.751177
------------------------------------------------------------------------------------------------------------------------
Starting model: SEIR

DEBUG [MPHCPE]: Starting parameter estimation...
DEBUG [MPHCPE]: Analyzing identifiability with 2 points
DEBUG [MPHCPE]: Final analysis with 1 points
DEBUG [MPHCPE]: Final unidentifiable dict: Dict{Any, Any}()
DEBUG [MPHCPE]: Final varlist: Num[a, nu, b, S(t), E(t), In(t), N(t)]
We are trying these points:[73]
Using these observations and their derivatives:
Dict{Int64, Int64} with 2 entries:
  2 => 0
  1 => 5
total degree: 4096
using monodromy, line 917

Unidentifiability Analysis from MPHCPE:
All unidentifiable variables: Set{Any}()
Unidentifiable variables substitution dictionary: Dict{Any, Any}()
Trivially solvable variables: Dict{Any, Any}(_t73_N_t_ => 999.9999999999999, _t73_Inˍttttt_t_ => 5.2090664944159926e-5, _t73_Inˍtt_t_ => 0.002426697359235064, _t73_Nˍt_t_ => 0, _t73_In_t_ => 43.56131112935012, _t73_Inˍttt_t_ => -0.008421375022757971, _t73_Inˍtttt_t_ => -0.0006284472967950094, _t73_Nˍtt_t_ => 0, _t73_Inˍt_t_ => 1.8037626139739498, _t73_Nˍttt_t_ => 0)

DEBUG [ODEPEtestwrapper]: Processing solution 1

DEBUG [ODEPEtestwrapper]: Processing solution 2

DEBUG [ODEPEtestwrapper]: Processing solution 3

DEBUG [ODEPEtestwrapper]: Processing solution 4

=== Model: SEIR ===

Found 2 distinct solution clusters:

Cluster 1: 1 similar solutions
Best solution (Error: 0.0):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
S(t)         | 990.000000 | 742.500033 |   0.250000
E(t)         |  10.000000 |   7.499936 |   0.250006
In(t)        |   0.000000 |   0.000048 |   0.000048
N(t)         | 1000.000000 | 1000.000000 |   0.000000
a            |   0.200000 |   0.150000 |   0.250000
b            |   0.400000 |   0.400000 |   0.000000
nu           |   0.150000 |   0.200000 |   0.333333

Cluster 2: 1 similar solutions
Best solution (Error: 0.0):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
S(t)         | 990.000000 | 990.000047 |   0.000000
E(t)         |  10.000000 |   9.999932 |   0.000007
In(t)        |   0.000000 |   0.000047 |   0.000047
N(t)         | 1000.000000 | 1000.000000 |   0.000000
a            |   0.200000 |   0.200000 |   0.000000
b            |   0.400000 |   0.400000 |   0.000000
nu           |   0.150000 |   0.150000 |   0.000000

Best maximum relative error for SEIR (excluding ALL unidentifiable parameters): 4.7e-5

Observables Statistics:
--------------------------------------------------
Variable      | Mean        | Std         | Min         | Max         | Range       | Turns
--------------------------------------------------
y1(t)        |  27.975245 |  21.326411 |   0.000000 |  66.499621 |  66.499621 |          0
y2(t)        | 1000.000000 |   0.000000 | 1000.000000 | 1000.000000 |   0.000000 |          1

Error Statistics for Best Solution:
--------------------------------------------------

Error Statistics by Observable:
--------------------------------------------------
Observable   | Error Type | Mean        | Std         | Min         | Max         | Range
--------------------------------------------------
y1(t)        | Absolute   |   0.000002 |   0.000007 |   0.000000 |   0.000047 |   0.000047
y1(t)        | Relative   | 4609.579147 | 46325.697084 |   0.000000 | 465567.493758 | 465567.493758
y2(t)        | Absolute   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y2(t)        | Relative   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000

Detailed Time Series Comparison:
------------------------------------------------------------------------------------------------------------------------
t | y1(t)_act    | y1(t)_pred   | abs_err      | rel_err      | y2(t)_act    | y2(t)_pred   | abs_err      | rel_err     
------------------------------------------------------------------------------------------------------------------------
  0.0000 |     0.000000 |     0.000047 |     0.000047 | 465567.493758 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  0.6000 |     0.813213 |     0.813250 |     0.000036 |     0.000044 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  1.2000 |     1.480159 |     1.480187 |     0.000028 |     0.000019 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  1.8000 |     2.034906 |     2.034928 |     0.000022 |     0.000011 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  2.4000 |     2.503985 |     2.504002 |     0.000017 |     0.000007 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  3.0000 |     2.908072 |     2.908085 |     0.000013 |     0.000005 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  3.6000 |     3.263291 |     3.263301 |     0.000010 |     0.000003 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  4.2000 |     3.582232 |     3.582240 |     0.000008 |     0.000002 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  4.8000 |     3.874740 |     3.874746 |     0.000006 |     0.000002 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  5.4000 |     4.148530 |     4.148534 |     0.000005 |     0.000001 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  6.0000 |     4.409662 |     4.409666 |     0.000004 |     0.000001 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  6.6000 |     4.662916 |     4.662919 |     0.000003 |     0.000001 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  7.2000 |     4.912074 |     4.912077 |     0.000002 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  7.8000 |     5.160149 |     5.160150 |     0.000002 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  8.4000 |     5.409553 |     5.409555 |     0.000001 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  9.0000 |     5.662241 |     5.662242 |     0.000001 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  9.6000 |     5.919806 |     5.919807 |     0.000001 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 10.2000 |     6.183566 |     6.183567 |     0.000001 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 10.8000 |     6.454627 |     6.454627 |     0.000001 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 11.4000 |     6.733929 |     6.733929 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 12.0000 |     7.022287 |     7.022288 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 12.6000 |     7.320420 |     7.320420 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 13.2000 |     7.628971 |     7.628971 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 13.8000 |     7.948527 |     7.948527 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 14.4000 |     8.279633 |     8.279633 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 15.0000 |     8.622799 |     8.622799 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 15.6000 |     8.978512 |     8.978512 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 16.2000 |     9.347239 |     9.347239 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 16.8000 |     9.729431 |     9.729431 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 17.4000 |    10.125528 |    10.125528 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 18.0000 |    10.535960 |    10.535960 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 18.6000 |    10.961149 |    10.961149 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 19.2000 |    11.401509 |    11.401509 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 19.8000 |    11.857445 |    11.857445 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 20.4000 |    12.329355 |    12.329355 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 21.0000 |    12.817628 |    12.817628 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 21.6000 |    13.322644 |    13.322644 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 22.2000 |    13.844771 |    13.844771 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 22.8000 |    14.384367 |    14.384367 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 23.4000 |    14.941772 |    14.941772 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 24.0000 |    15.517313 |    15.517313 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 24.6000 |    16.111299 |    16.111299 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 25.2000 |    16.724015 |    16.724015 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 25.8000 |    17.355728 |    17.355728 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 26.4000 |    18.006675 |    18.006675 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 27.0000 |    18.677067 |    18.677067 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 27.6000 |    19.367083 |    19.367083 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 28.2000 |    20.076867 |    20.076867 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 28.8000 |    20.806527 |    20.806527 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 29.4000 |    21.556128 |    21.556128 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 30.0000 |    22.325691 |    22.325691 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 30.6000 |    23.115191 |    23.115191 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 31.2000 |    23.924549 |    23.924549 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 31.8000 |    24.753632 |    24.753632 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 32.4000 |    25.602250 |    25.602250 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 33.0000 |    26.470148 |    26.470148 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 33.6000 |    27.357006 |    27.357006 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 34.2000 |    28.262436 |    28.262436 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 34.8000 |    29.185976 |    29.185976 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 35.4000 |    30.127087 |    30.127087 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 36.0000 |    31.085153 |    31.085153 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 36.6000 |    32.059474 |    32.059474 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 37.2000 |    33.049265 |    33.049265 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 37.8000 |    34.053656 |    34.053656 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 38.4000 |    35.071685 |    35.071685 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 39.0000 |    36.102302 |    36.102302 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 39.6000 |    37.144362 |    37.144362 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 40.2000 |    38.196629 |    38.196629 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 40.8000 |    39.257773 |    39.257773 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 41.4000 |    40.326373 |    40.326373 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 42.0000 |    41.400913 |    41.400913 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 42.6000 |    42.479790 |    42.479790 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 43.2000 |    43.561311 |    43.561311 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 43.8000 |    44.643699 |    44.643699 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 44.4000 |    45.725095 |    45.725095 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 45.0000 |    46.803564 |    46.803564 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 45.6000 |    47.877098 |    47.877098 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 46.2000 |    48.943624 |    48.943624 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 46.8000 |    50.001010 |    50.001010 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 47.4000 |    51.047072 |    51.047072 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 48.0000 |    52.079583 |    52.079583 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 48.6000 |    53.096281 |    53.096281 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 49.2000 |    54.094876 |    54.094876 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 49.8000 |    55.073068 |    55.073068 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 50.4000 |    56.028546 |    56.028546 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 51.0000 |    56.959009 |    56.959009 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 51.6000 |    57.862173 |    57.862173 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 52.2000 |    58.735779 |    58.735779 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 52.8000 |    59.577613 |    59.577613 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 53.4000 |    60.385510 |    60.385510 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 54.0000 |    61.157371 |    61.157371 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 54.6000 |    61.891171 |    61.891171 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 55.2000 |    62.584972 |    62.584972 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 55.8000 |    63.236934 |    63.236934 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 56.4000 |    63.845324 |    63.845324 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 57.0000 |    64.408528 |    64.408528 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 57.6000 |    64.925060 |    64.925060 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 58.2000 |    65.393568 |    65.393568 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 58.8000 |    65.812844 |    65.812844 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 59.4000 |    66.181829 |    66.181829 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
 60.0000 |    66.499621 |    66.499621 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
------------------------------------------------------------------------------------------------------------------------
Starting model: treatment

DEBUG [MPHCPE]: Starting parameter estimation...
DEBUG [MPHCPE]: Analyzing identifiability with 2 points
DEBUG [MPHCPE]: Final analysis with 1 points
DEBUG [MPHCPE]: Final unidentifiable dict: Dict{Any, Any}(a => 0.20026180739093913)
DEBUG [MPHCPE]: Final varlist: Num[nu, d, g, b, In(t), N(t), S(t), Tr(t)]
We are trying these points:[98]
Using these observations and their derivatives:
Dict{Int64, Int64} with 2 entries:
  2 => 0
  1 => 6
total degree: 1259712
using monodromy, line 917

Unidentifiability Analysis from MPHCPE:
All unidentifiable variables: Set(Any[a, S(t), d, g, b, In(t)])
Unidentifiable variables substitution dictionary: Dict{Any, Any}(a => 0.20026180739093913)
Trivially solvable variables: Dict{Any, Any}(_t98_N_t_ => 1000.0, _t98_Nˍt_t_ => 0, _t98_Tr_t_ => 4.0152390726743175, _t98_Trˍtttttt_t_ => -0.0004442259669303894, _t98_Nˍttt_t_ => 0, _t98_Trˍttttt_t_ => 0.0011400675866752863, _t98_Nˍtttt_t_ => 0, _t98_Trˍtt_t_ => 0.0409011865987452, _t98_Trˍtttt_t_ => -0.0035804090584861115, _t98_Nˍtt_t_ => 0, _t98_Trˍt_t_ => 0.8083487636159603, _t98_Trˍttt_t_ => 0.024096545721022267)

DEBUG [ODEPEtestwrapper]: Processing solution 1

DEBUG [ODEPEtestwrapper]: Processing solution 2

DEBUG [ODEPEtestwrapper]: Processing solution 3

DEBUG [ODEPEtestwrapper]: Processing solution 4

DEBUG [ODEPEtestwrapper]: Processing solution 5

DEBUG [ODEPEtestwrapper]: Processing solution 6

DEBUG [ODEPEtestwrapper]: Processing solution 7

DEBUG [ODEPEtestwrapper]: Processing solution 8

DEBUG [ODEPEtestwrapper]: Processing solution 9

DEBUG [ODEPEtestwrapper]: Processing solution 10

DEBUG [ODEPEtestwrapper]: Processing solution 11

DEBUG [ODEPEtestwrapper]: Processing solution 12

=== Model: treatment ===

All structurally unidentifiable parameters:
--------------------------------------------------
These parameters cannot be uniquely determined from the data:
  • a
  • S(t)
  • d
  • g
  • b
  • In(t)


Minimal set of fixed values to make remaining parameters identifiable:
--------------------------------------------------
These parameters were fixed to make the system identifiable:
  • a = 0.200262


Found 9 distinct solution clusters:

Cluster 1: 2 similar solutions
Best solution (Error: 0.058494):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
In(t)        |  10.000000 | -11.198384 |   2.119838
N(t)         | 1000.000000 | 1000.000000 |   0.000000
S(t)         | 990.000000 | -151.767608 |   1.153301
Tr(t)        |   0.000000 |   2.952626 |   2.952626
a            |   0.200000 |   0.200262 |   0.001309
b            |   0.300000 |  -0.152534 |   1.508447
d            |   1.500000 |  -1.347171 |   1.898114
g            |   0.100000 |  -0.074843 |   1.748429
nu           |   0.150000 |   0.125419 |   0.163874

Cluster 2: 2 similar solutions
Best solution (Error: 0.002316):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
In(t)        |  10.000000 |  10.419926 |   0.041993
N(t)         | 1000.000000 | 1000.000000 |   0.000000
S(t)         | 990.000000 |  -0.002853 |   1.000003
Tr(t)        |   0.000000 |   0.135374 |   0.135374
a            |   0.200000 |   0.200262 |   0.001309
b            |   0.300000 | -95.677662 | 319.925541
d            |   1.500000 |   0.218043 |   0.854638
g            |   0.100000 |   0.089954 |   0.100463
nu           |   0.150000 |  -0.138415 |   1.922765

Cluster 3: 2 similar solutions
Best solution (Error: 0.000358):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
In(t)        |  10.000000 |  -2.947486 |   1.294749
N(t)         | 1000.000000 | 1000.000000 |   0.000000
S(t)         | 990.000000 |   0.002319 |   0.999998
Tr(t)        |   0.000000 |   0.021532 |   0.021532
a            |   0.200000 |   0.200262 |   0.001309
b            |   0.300000 | 361.018354 | 1202.394513
d            |   1.500000 |   1.209783 |   0.193478
g            |   0.100000 |  -0.338677 |   4.386766
nu           |   0.150000 |   0.290216 |   0.934770

Cluster 4: 1 similar solutions
Best solution (Error: 9.3e-5):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
In(t)        |  10.000000 |  -7.249287 |   1.724929
N(t)         | 1000.000000 | 1000.000000 |   0.000000
S(t)         | 990.000000 |   4.121931 |   0.995836
Tr(t)        |   0.000000 |  -0.011187 |   0.011187
a            |   0.200000 |   0.200262 |   0.001309
b            |   0.300000 | -57.214551 | 191.715169
d            |   1.500000 |  -1.891944 |   2.261296
g            |   0.100000 |  -0.140642 |   2.406421
nu           |   0.150000 |  -0.118508 |   1.790056

Cluster 5: 1 similar solutions
Best solution (Error: 9.3e-5):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
In(t)        |  10.000000 |  -3.192151 |   1.319215
N(t)         | 1000.000000 | 1000.000000 |   0.000000
S(t)         | 990.000000 |   1.818606 |   0.998163
Tr(t)        |   0.000000 |  -0.011187 |   0.011187
a            |   0.200000 |   0.200262 |   0.001309
b            |   0.300000 | -129.678723 | 433.262409
d            |   1.500000 |  -0.275932 |   1.183955
g            |   0.100000 |  -0.318770 |   4.187701
nu           |   0.150000 |   0.059620 |   0.602535

Cluster 6: 1 similar solutions
Best solution (Error: 8.0e-6):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
In(t)        |  10.000000 |  10.534792 |   0.053479
N(t)         | 1000.000000 | 1000.000000 |   0.000000
S(t)         | 990.000000 |   0.000085 |   1.000000
Tr(t)        |   0.000000 |   0.000937 |   0.000937
a            |   0.200000 |   0.200262 |   0.001309
b            |   0.300000 | -234.807867 | 783.692891
d            |   1.500000 |   0.228956 |   0.847363
g            |   0.100000 |   0.094785 |   0.052147
nu           |   0.150000 |  -0.143382 |   1.955878

Cluster 7: 1 similar solutions
Best solution (Error: 8.0e-6):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
In(t)        |  10.000000 |  -2.906950 |   1.290695
N(t)         | 1000.000000 | 1000.000000 |   0.000000
S(t)         | 990.000000 |  -0.000023 |   1.000000
Tr(t)        |   0.000000 |   0.000937 |   0.000937
a            |   0.200000 |   0.200262 |   0.001309
b            |   0.300000 | 851.294217 | 2836.647389
d            |   1.500000 |   1.212673 |   0.191551
g            |   0.100000 |  -0.343644 |   4.436435
nu           |   0.150000 |   0.295047 |   0.966981

Cluster 8: 1 similar solutions
Best solution (Error: 0.0):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
In(t)        |  10.000000 | -15.347082 |   2.534708
N(t)         | 1000.000000 | 1000.000000 |   0.000000
S(t)         | 990.000000 | -1500.591170 |   2.515749
Tr(t)        |   0.000000 |   0.000008 |   0.000008
a            |   0.200000 |   0.200262 |   0.001309
b            |   0.300000 |  -0.202079 |   1.673597
d            |   1.500000 |   0.498447 |   0.667702
g            |   0.100000 |  -0.065159 |   1.651585
nu           |   0.150000 |   0.321126 |   1.140842

Cluster 9: 1 similar solutions
Best solution (Error: 0.0):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
In(t)        |  10.000000 |   8.273657 |   0.172634
N(t)         | 1000.000000 | 1000.000000 |   0.000000
S(t)         | 990.000000 | 808.974322 |   0.182854
Tr(t)        |   0.000000 |   0.000008 |   0.000008
a            |   0.200000 |   0.200262 |   0.001309
b            |   0.300000 |   0.374842 |   0.249475
d            |   1.500000 |   1.270389 |   0.153074
g            |   0.100000 |   0.120864 |   0.208645
nu           |   0.150000 |   0.135103 |   0.099311

Best maximum relative error for treatment (excluding ALL unidentifiable parameters): 0.099311

Observables Statistics:
--------------------------------------------------
Variable      | Mean        | Std         | Min         | Max         | Range       | Turns
--------------------------------------------------
y1(t)        |   2.137923 |   1.190178 |   0.000000 |   4.136965 |   4.136965 |          0
y2(t)        | 1000.000000 |   0.000000 | 1000.000000 | 1000.000000 |   0.000000 |          0

Error Statistics for Best Solution:
--------------------------------------------------

Error Statistics by Observable:
--------------------------------------------------
Observable   | Error Type | Mean        | Std         | Min         | Max         | Range
--------------------------------------------------
y1(t)        | Absolute   |   0.000001 |   0.000002 |   0.000000 |   0.000008 |   0.000008
y1(t)        | Relative   | 758.167363 | 7619.487660 |   0.000000 | 76574.903285 | 76574.903285
y2(t)        | Absolute   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y2(t)        | Relative   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000

Detailed Time Series Comparison:
------------------------------------------------------------------------------------------------------------------------
t | y1(t)_act    | y1(t)_pred   | abs_err      | rel_err      | y2(t)_act    | y2(t)_pred   | abs_err      | rel_err     
------------------------------------------------------------------------------------------------------------------------
  0.0000 |     0.000000 |     0.000008 |     0.000008 | 76574.903285 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  0.0500 |     0.049810 |     0.049817 |     0.000007 |     0.000144 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  0.1000 |     0.099246 |     0.099253 |     0.000007 |     0.000068 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  0.1500 |     0.148316 |     0.148322 |     0.000006 |     0.000043 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  0.2000 |     0.197028 |     0.197034 |     0.000006 |     0.000030 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  0.2500 |     0.245389 |     0.245395 |     0.000006 |     0.000023 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  0.3000 |     0.293409 |     0.293414 |     0.000005 |     0.000018 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  0.3500 |     0.341094 |     0.341099 |     0.000005 |     0.000014 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  0.4000 |     0.388453 |     0.388457 |     0.000005 |     0.000012 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  0.4500 |     0.435492 |     0.435496 |     0.000004 |     0.000010 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  0.5000 |     0.482219 |     0.482223 |     0.000004 |     0.000008 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  0.5500 |     0.528642 |     0.528646 |     0.000004 |     0.000007 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  0.6000 |     0.574768 |     0.574772 |     0.000003 |     0.000006 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  0.6500 |     0.620604 |     0.620607 |     0.000003 |     0.000005 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  0.7000 |     0.666157 |     0.666160 |     0.000003 |     0.000004 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  0.7500 |     0.711435 |     0.711438 |     0.000003 |     0.000004 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  0.8000 |     0.756443 |     0.756446 |     0.000003 |     0.000003 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  0.8500 |     0.801190 |     0.801192 |     0.000002 |     0.000003 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  0.9000 |     0.845681 |     0.845683 |     0.000002 |     0.000003 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  0.9500 |     0.889924 |     0.889926 |     0.000002 |     0.000002 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  1.0000 |     0.933924 |     0.933926 |     0.000002 |     0.000002 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  1.0500 |     0.977689 |     0.977691 |     0.000002 |     0.000002 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  1.1000 |     1.021225 |     1.021227 |     0.000002 |     0.000002 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  1.1500 |     1.064539 |     1.064540 |     0.000001 |     0.000001 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  1.2000 |     1.107635 |     1.107637 |     0.000001 |     0.000001 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  1.2500 |     1.150522 |     1.150523 |     0.000001 |     0.000001 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  1.3000 |     1.193204 |     1.193206 |     0.000001 |     0.000001 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  1.3500 |     1.235689 |     1.235690 |     0.000001 |     0.000001 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  1.4000 |     1.277981 |     1.277982 |     0.000001 |     0.000001 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  1.4500 |     1.320087 |     1.320088 |     0.000001 |     0.000001 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  1.5000 |     1.362013 |     1.362014 |     0.000001 |     0.000001 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  1.5500 |     1.403765 |     1.403765 |     0.000001 |     0.000001 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  1.6000 |     1.445347 |     1.445348 |     0.000001 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  1.6500 |     1.486766 |     1.486767 |     0.000001 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  1.7000 |     1.528028 |     1.528028 |     0.000001 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  1.7500 |     1.569137 |     1.569138 |     0.000001 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  1.8000 |     1.610100 |     1.610101 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  1.8500 |     1.650922 |     1.650922 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  1.9000 |     1.691608 |     1.691608 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  1.9500 |     1.732163 |     1.732163 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  2.0000 |     1.772592 |     1.772593 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  2.0500 |     1.812902 |     1.812902 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  2.1000 |     1.853096 |     1.853096 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  2.1500 |     1.893180 |     1.893180 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  2.2000 |     1.933158 |     1.933159 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  2.2500 |     1.973037 |     1.973037 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  2.3000 |     2.012820 |     2.012820 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  2.3500 |     2.052513 |     2.052513 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  2.4000 |     2.092119 |     2.092119 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  2.4500 |     2.131645 |     2.131645 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  2.5000 |     2.171094 |     2.171094 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  2.5500 |     2.210472 |     2.210472 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  2.6000 |     2.249782 |     2.249782 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  2.6500 |     2.289030 |     2.289030 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  2.7000 |     2.328219 |     2.328219 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  2.7500 |     2.367355 |     2.367355 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  2.8000 |     2.406441 |     2.406441 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  2.8500 |     2.445482 |     2.445482 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  2.9000 |     2.484482 |     2.484482 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  2.9500 |     2.523446 |     2.523446 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  3.0000 |     2.562378 |     2.562378 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  3.0500 |     2.601281 |     2.601282 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  3.1000 |     2.640161 |     2.640161 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  3.1500 |     2.679021 |     2.679021 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  3.2000 |     2.717864 |     2.717864 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  3.2500 |     2.756696 |     2.756696 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  3.3000 |     2.795521 |     2.795521 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  3.3500 |     2.834341 |     2.834341 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  3.4000 |     2.873161 |     2.873161 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  3.4500 |     2.911985 |     2.911985 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  3.5000 |     2.950816 |     2.950816 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  3.5500 |     2.989659 |     2.989659 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  3.6000 |     3.028518 |     3.028518 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  3.6500 |     3.067395 |     3.067395 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  3.7000 |     3.106294 |     3.106294 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  3.7500 |     3.145220 |     3.145220 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  3.8000 |     3.184176 |     3.184176 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  3.8500 |     3.223165 |     3.223165 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  3.9000 |     3.262192 |     3.262192 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  3.9500 |     3.301259 |     3.301259 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  4.0000 |     3.340369 |     3.340369 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  4.0500 |     3.379528 |     3.379528 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  4.1000 |     3.418737 |     3.418737 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  4.1500 |     3.458001 |     3.458001 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  4.2000 |     3.497322 |     3.497322 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  4.2500 |     3.536704 |     3.536704 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  4.3000 |     3.576151 |     3.576151 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  4.3500 |     3.615666 |     3.615666 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  4.4000 |     3.655251 |     3.655251 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  4.4500 |     3.694911 |     3.694911 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  4.5000 |     3.734648 |     3.734648 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  4.5500 |     3.774465 |     3.774465 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  4.6000 |     3.814367 |     3.814367 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  4.6500 |     3.854355 |     3.854355 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  4.7000 |     3.894433 |     3.894433 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  4.7500 |     3.934605 |     3.934605 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  4.8000 |     3.974872 |     3.974872 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  4.8500 |     4.015239 |     4.015239 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  4.9000 |     4.055708 |     4.055708 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  4.9500 |     4.096282 |     4.096282 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
  5.0000 |     4.136965 |     4.136965 |     0.000000 |     0.000000 |  1000.000000 |  1000.000000 |     0.000000 |     0.000000
------------------------------------------------------------------------------------------------------------------------
Starting model: BioHydrogenation

DEBUG [MPHCPE]: Starting parameter estimation...
DEBUG [MPHCPE]: Analyzing identifiability with 2 points
DEBUG [MPHCPE]: Final analysis with 1 points
DEBUG [MPHCPE]: Final unidentifiable dict: Dict{Any, Any}(x7(t) => 0.20532992996946098)
DEBUG [MPHCPE]: Final varlist: Num[k9, k7, k10, k6, k5, k8, x4(t), x5(t), x6(t)]
We are trying these points:[31]
Using these observations and their derivatives:
Dict{Int64, Int64} with 2 entries:
  2 => 5
  1 => 2
total degree: 73728
using monodromy, line 917

Unidentifiability Analysis from MPHCPE:
All unidentifiable variables: Set(Any[x7(t)])
Unidentifiable variables substitution dictionary: Dict{Any, Any}(x7(t) => 0.20532992996946098)
Trivially solvable variables: Dict{Any, Any}(_t31_x5ˍttt_t_ => 0.01848549053732995, _t31_x5ˍtttt_t_ => -0.017456305788073223, _t31_x4ˍtt_t_ => 0.010488778205427707, _t31_x5ˍtt_t_ => -0.04075506585068922, _t31_x5_t_ => 0.413897521517611, _t31_x5ˍttttt_t_ => 0.01972263999050483, _t31_x4_t_ => 3.5108642549428595, _t31_x5ˍt_t_ => 0.2347309404096758, _t31_x4ˍt_t_ => -0.3185402590703479)

DEBUG [ODEPEtestwrapper]: Processing solution 1

DEBUG [ODEPEtestwrapper]: Processing solution 2

DEBUG [ODEPEtestwrapper]: Processing solution 3

DEBUG [ODEPEtestwrapper]: Processing solution 4

DEBUG [ODEPEtestwrapper]: Processing solution 5

DEBUG [ODEPEtestwrapper]: Processing solution 6

=== Model: BioHydrogenation ===

All structurally unidentifiable parameters:
--------------------------------------------------
These parameters cannot be uniquely determined from the data:
  • x7(t)


Minimal set of fixed values to make remaining parameters identifiable:
--------------------------------------------------
These parameters were fixed to make the system identifiable:
  • x7(t) = 0.205330


Found 5 distinct solution clusters:

Cluster 1: 2 similar solutions
Best solution (Error: 0.000846):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
x4(t)        |   4.000000 |   4.000000 |   0.000000
x5(t)        |   0.000000 |   0.013265 |   0.013265
x6(t)        |   0.000000 |  -0.168932 |   0.168932
x7(t)        |   0.000000 |   0.214176 |   0.214176
k5           |   0.500000 |   0.500000 |   0.000000
k6           |   2.000000 |   2.000000 |   0.000000
k7           |   0.300000 |   0.173018 |   0.423273
k8           |   1.000000 |   0.512146 |   0.487854
k9           |   0.200000 |   0.000000 |   1.000000
k10          |   5.000000 |   0.000000 |   1.000000

Cluster 2: 1 similar solutions
Best solution (Error: 2.0e-6):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
x4(t)        |   4.000000 |   4.000000 |   0.000000
x5(t)        |   0.000000 |   0.000001 |   0.000001
x6(t)        |   0.000000 |  -4.967611 |   4.967611
x7(t)        |   0.000000 |  -0.391959 |   0.391959
k5           |   0.500000 |   0.500000 |   0.000000
k6           |   2.000000 |   2.000000 |   0.000000
k7           |   0.300000 |  -0.067341 |   1.224472
k8           |   1.000000 |   4.743193 |   3.743193
k9           |   0.200000 |  -0.193512 |   1.967560
k10          |   5.000000 |  -8.636194 |   2.727239

Cluster 3: 1 similar solutions
Best solution (Error: 2.0e-6):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
x4(t)        |   4.000000 |   4.000000 |   0.000000
x5(t)        |   0.000000 |   0.000001 |   0.000001
x6(t)        |   0.000000 |   3.668583 |   3.668583
x7(t)        |   0.000000 |  -0.391959 |   0.391959
k5           |   0.500000 |   0.500000 |   0.000000
k6           |   2.000000 |   2.000000 |   0.000000
k7           |   0.300000 |  -0.067341 |   1.224472
k8           |   1.000000 |  -3.893001 |   4.893001
k9           |   0.200000 |   0.193512 |   0.032440
k10          |   5.000000 |   8.636194 |   0.727239

Cluster 4: 1 similar solutions
Best solution (Error: 0.0):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
x4(t)        |   4.000000 |   4.000000 |   0.000000
x5(t)        |   0.000000 |  -0.000000 |   0.000000
x6(t)        |   0.000000 |  -4.991563 |   4.991563
x7(t)        |   0.000000 |   0.197744 |   0.197744
k5           |   0.500000 |   0.500000 |   0.000000
k6           |   2.000000 |   2.000000 |   0.000000
k7           |   0.300000 |   0.299989 |   0.000038
k8           |   1.000000 |   5.991526 |   4.991526
k9           |   0.200000 |  -0.200033 |   2.000163
k10          |   5.000000 |  -4.991631 |   1.998326

Cluster 5: 1 similar solutions
Best solution (Error: 0.0):
--------------------------------------------------
Variable      | True Value  | Estimated   | Rel. Error
--------------------------------------------------
x4(t)        |   4.000000 |   4.000000 |   0.000000
x5(t)        |   0.000000 |  -0.000000 |   0.000000
x6(t)        |   0.000000 |   0.000068 |   0.000068
x7(t)        |   0.000000 |   0.197744 |   0.197744
k5           |   0.500000 |   0.500000 |   0.000000
k6           |   2.000000 |   2.000000 |   0.000000
k7           |   0.300000 |   0.299989 |   0.000038
k8           |   1.000000 |   0.999895 |   0.000105
k9           |   0.200000 |   0.200033 |   0.000163
k10          |   5.000000 |   4.991631 |   0.001674

Best maximum relative error for BioHydrogenation (excluding ALL unidentifiable parameters): 0.001674

Observables Statistics:
--------------------------------------------------
Variable      | Mean        | Std         | Min         | Max         | Range       | Turns
--------------------------------------------------
y1(t)        |   3.209832 |   0.449917 |   2.466770 |   4.000000 |   1.533230 |          0
y2(t)        |   0.597881 |   0.304688 |   0.000000 |   1.057085 |   1.057085 |          0

Error Statistics for Best Solution:
--------------------------------------------------

Error Statistics by Observable:
--------------------------------------------------
Observable   | Error Type | Mean        | Std         | Min         | Max         | Range
--------------------------------------------------
y1(t)        | Absolute   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y1(t)        | Relative   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y2(t)        | Absolute   |   0.000000 |   0.000000 |   0.000000 |   0.000000 |   0.000000
y2(t)        | Relative   |   0.198031 |   1.990191 |   0.000000 |  20.001176 |  20.001176

Detailed Time Series Comparison:
------------------------------------------------------------------------------------------------------------------------
t | y1(t)_act    | y1(t)_pred   | abs_err      | rel_err      | y2(t)_act    | y2(t)_pred   | abs_err      | rel_err     
------------------------------------------------------------------------------------------------------------------------
  0.0000 |     4.000000 |     4.000000 |     0.000000 |     0.000000 |     0.000000 |    -0.000000 |     0.000000 |    20.001176
  0.0500 |     3.983345 |     3.983345 |     0.000000 |     0.000000 |     0.016532 |     0.016532 |     0.000000 |     0.000000
  0.1000 |     3.966713 |     3.966713 |     0.000000 |     0.000000 |     0.032803 |     0.032803 |     0.000000 |     0.000000
  0.1500 |     3.950105 |     3.950105 |     0.000000 |     0.000000 |     0.048824 |     0.048824 |     0.000000 |     0.000000
  0.2000 |     3.933520 |     3.933520 |     0.000000 |     0.000000 |     0.064605 |     0.064605 |     0.000000 |     0.000000
  0.2500 |     3.916958 |     3.916958 |     0.000000 |     0.000000 |     0.080156 |     0.080156 |     0.000000 |     0.000000
  0.3000 |     3.900420 |     3.900420 |     0.000000 |     0.000000 |     0.095487 |     0.095487 |     0.000000 |     0.000000
  0.3500 |     3.883906 |     3.883906 |     0.000000 |     0.000000 |     0.110606 |     0.110606 |     0.000000 |     0.000000
  0.4000 |     3.867416 |     3.867416 |     0.000000 |     0.000000 |     0.125521 |     0.125521 |     0.000000 |     0.000000
  0.4500 |     3.850949 |     3.850949 |     0.000000 |     0.000000 |     0.140239 |     0.140239 |     0.000000 |     0.000000
  0.5000 |     3.834507 |     3.834507 |     0.000000 |     0.000000 |     0.154769 |     0.154769 |     0.000000 |     0.000000
  0.5500 |     3.818089 |     3.818089 |     0.000000 |     0.000000 |     0.169117 |     0.169117 |     0.000000 |     0.000000
  0.6000 |     3.801695 |     3.801695 |     0.000000 |     0.000000 |     0.183289 |     0.183289 |     0.000000 |     0.000000
  0.6500 |     3.785325 |     3.785325 |     0.000000 |     0.000000 |     0.197292 |     0.197292 |     0.000000 |     0.000000
  0.7000 |     3.768980 |     3.768980 |     0.000000 |     0.000000 |     0.211130 |     0.211130 |     0.000000 |     0.000000
  0.7500 |     3.752659 |     3.752659 |     0.000000 |     0.000000 |     0.224810 |     0.224810 |     0.000000 |     0.000000
  0.8000 |     3.736363 |     3.736363 |     0.000000 |     0.000000 |     0.238337 |     0.238337 |     0.000000 |     0.000000
  0.8500 |     3.720092 |     3.720092 |     0.000000 |     0.000000 |     0.251715 |     0.251715 |     0.000000 |     0.000000
  0.9000 |     3.703846 |     3.703846 |     0.000000 |     0.000000 |     0.264949 |     0.264949 |     0.000000 |     0.000000
  0.9500 |     3.687624 |     3.687624 |     0.000000 |     0.000000 |     0.278043 |     0.278043 |     0.000000 |     0.000000
  1.0000 |     3.671428 |     3.671428 |     0.000000 |     0.000000 |     0.291001 |     0.291001 |     0.000000 |     0.000000
  1.0500 |     3.655256 |     3.655256 |     0.000000 |     0.000000 |     0.303828 |     0.303828 |     0.000000 |     0.000000
  1.1000 |     3.639110 |     3.639110 |     0.000000 |     0.000000 |     0.316527 |     0.316527 |     0.000000 |     0.000000
  1.1500 |     3.622990 |     3.622990 |     0.000000 |     0.000000 |     0.329101 |     0.329101 |     0.000000 |     0.000000
  1.2000 |     3.606894 |     3.606894 |     0.000000 |     0.000000 |     0.341555 |     0.341555 |     0.000000 |     0.000000
  1.2500 |     3.590825 |     3.590825 |     0.000000 |     0.000000 |     0.353890 |     0.353890 |     0.000000 |     0.000000
  1.3000 |     3.574781 |     3.574781 |     0.000000 |     0.000000 |     0.366110 |     0.366110 |     0.000000 |     0.000000
  1.3500 |     3.558763 |     3.558763 |     0.000000 |     0.000000 |     0.378219 |     0.378219 |     0.000000 |     0.000000
  1.4000 |     3.542771 |     3.542771 |     0.000000 |     0.000000 |     0.390217 |     0.390217 |     0.000000 |     0.000000
  1.4500 |     3.526804 |     3.526804 |     0.000000 |     0.000000 |     0.402110 |     0.402110 |     0.000000 |     0.000000
  1.5000 |     3.510864 |     3.510864 |     0.000000 |     0.000000 |     0.413898 |     0.413898 |     0.000000 |     0.000000
  1.5500 |     3.494950 |     3.494950 |     0.000000 |     0.000000 |     0.425584 |     0.425584 |     0.000000 |     0.000000
  1.6000 |     3.479063 |     3.479063 |     0.000000 |     0.000000 |     0.437170 |     0.437170 |     0.000000 |     0.000000
  1.6500 |     3.463202 |     3.463202 |     0.000000 |     0.000000 |     0.448659 |     0.448659 |     0.000000 |     0.000000
  1.7000 |     3.447367 |     3.447367 |     0.000000 |     0.000000 |     0.460052 |     0.460052 |     0.000000 |     0.000000
  1.7500 |     3.431559 |     3.431559 |     0.000000 |     0.000000 |     0.471352 |     0.471352 |     0.000000 |     0.000000
  1.8000 |     3.415778 |     3.415778 |     0.000000 |     0.000000 |     0.482560 |     0.482560 |     0.000000 |     0.000000
  1.8500 |     3.400024 |     3.400024 |     0.000000 |     0.000000 |     0.493679 |     0.493679 |     0.000000 |     0.000000
  1.9000 |     3.384297 |     3.384297 |     0.000000 |     0.000000 |     0.504710 |     0.504710 |     0.000000 |     0.000000
  1.9500 |     3.368596 |     3.368596 |     0.000000 |     0.000000 |     0.515654 |     0.515654 |     0.000000 |     0.000000
  2.0000 |     3.352923 |     3.352923 |     0.000000 |     0.000000 |     0.526513 |     0.526513 |     0.000000 |     0.000000
  2.0500 |     3.337278 |     3.337278 |     0.000000 |     0.000000 |     0.537289 |     0.537289 |     0.000000 |     0.000000
  2.1000 |     3.321660 |     3.321660 |     0.000000 |     0.000000 |     0.547983 |     0.547983 |     0.000000 |     0.000000
  2.1500 |     3.306069 |     3.306069 |     0.000000 |     0.000000 |     0.558596 |     0.558596 |     0.000000 |     0.000000
  2.2000 |     3.290506 |     3.290506 |     0.000000 |     0.000000 |     0.569130 |     0.569130 |     0.000000 |     0.000000
  2.2500 |     3.274971 |     3.274971 |     0.000000 |     0.000000 |     0.579586 |     0.579586 |     0.000000 |     0.000000
  2.3000 |     3.259463 |     3.259463 |     0.000000 |     0.000000 |     0.589966 |     0.589966 |     0.000000 |     0.000000
  2.3500 |     3.243984 |     3.243984 |     0.000000 |     0.000000 |     0.600270 |     0.600270 |     0.000000 |     0.000000
  2.4000 |     3.228533 |     3.228533 |     0.000000 |     0.000000 |     0.610499 |     0.610499 |     0.000000 |     0.000000
  2.4500 |     3.213110 |     3.213110 |     0.000000 |     0.000000 |     0.620655 |     0.620655 |     0.000000 |     0.000000
  2.5000 |     3.197715 |     3.197715 |     0.000000 |     0.000000 |     0.630739 |     0.630739 |     0.000000 |     0.000000
  2.5500 |     3.182349 |     3.182349 |     0.000000 |     0.000000 |     0.640751 |     0.640751 |     0.000000 |     0.000000
  2.6000 |     3.167012 |     3.167012 |     0.000000 |     0.000000 |     0.650693 |     0.650693 |     0.000000 |     0.000000
  2.6500 |     3.151703 |     3.151703 |     0.000000 |     0.000000 |     0.660565 |     0.660565 |     0.000000 |     0.000000
  2.7000 |     3.136423 |     3.136423 |     0.000000 |     0.000000 |     0.670369 |     0.670369 |     0.000000 |     0.000000
  2.7500 |     3.121172 |     3.121172 |     0.000000 |     0.000000 |     0.680105 |     0.680105 |     0.000000 |     0.000000
  2.8000 |     3.105950 |     3.105950 |     0.000000 |     0.000000 |     0.689774 |     0.689774 |     0.000000 |     0.000000
  2.8500 |     3.090757 |     3.090757 |     0.000000 |     0.000000 |     0.699376 |     0.699376 |     0.000000 |     0.000000
  2.9000 |     3.075593 |     3.075593 |     0.000000 |     0.000000 |     0.708913 |     0.708913 |     0.000000 |     0.000000
  2.9500 |     3.060459 |     3.060459 |     0.000000 |     0.000000 |     0.718386 |     0.718386 |     0.000000 |     0.000000
  3.0000 |     3.045354 |     3.045354 |     0.000000 |     0.000000 |     0.727794 |     0.727794 |     0.000000 |     0.000000
  3.0500 |     3.030279 |     3.030279 |     0.000000 |     0.000000 |     0.737139 |     0.737139 |     0.000000 |     0.000000
  3.1000 |     3.015234 |     3.015234 |     0.000000 |     0.000000 |     0.746421 |     0.746421 |     0.000000 |     0.000000
  3.1500 |     3.000218 |     3.000218 |     0.000000 |     0.000000 |     0.755641 |     0.755641 |     0.000000 |     0.000000
  3.2000 |     2.985233 |     2.985233 |     0.000000 |     0.000000 |     0.764800 |     0.764800 |     0.000000 |     0.000000
  3.2500 |     2.970278 |     2.970278 |     0.000000 |     0.000000 |     0.773897 |     0.773897 |     0.000000 |     0.000000
  3.3000 |     2.955353 |     2.955353 |     0.000000 |     0.000000 |     0.782934 |     0.782934 |     0.000000 |     0.000000
  3.3500 |     2.940458 |     2.940458 |     0.000000 |     0.000000 |     0.791912 |     0.791912 |     0.000000 |     0.000000
  3.4000 |     2.925594 |     2.925594 |     0.000000 |     0.000000 |     0.800829 |     0.800829 |     0.000000 |     0.000000
  3.4500 |     2.910760 |     2.910760 |     0.000000 |     0.000000 |     0.809688 |     0.809688 |     0.000000 |     0.000000
  3.5000 |     2.895957 |     2.895957 |     0.000000 |     0.000000 |     0.818489 |     0.818489 |     0.000000 |     0.000000
  3.5500 |     2.881185 |     2.881185 |     0.000000 |     0.000000 |     0.827231 |     0.827231 |     0.000000 |     0.000000
  3.6000 |     2.866444 |     2.866444 |     0.000000 |     0.000000 |     0.835916 |     0.835916 |     0.000000 |     0.000000
  3.6500 |     2.851734 |     2.851734 |     0.000000 |     0.000000 |     0.844544 |     0.844544 |     0.000000 |     0.000000
  3.7000 |     2.837055 |     2.837055 |     0.000000 |     0.000000 |     0.853115 |     0.853115 |     0.000000 |     0.000000
  3.7500 |     2.822408 |     2.822408 |     0.000000 |     0.000000 |     0.861629 |     0.861629 |     0.000000 |     0.000000
  3.8000 |     2.807792 |     2.807792 |     0.000000 |     0.000000 |     0.870088 |     0.870088 |     0.000000 |     0.000000
  3.8500 |     2.793208 |     2.793208 |     0.000000 |     0.000000 |     0.878491 |     0.878491 |     0.000000 |     0.000000
  3.9000 |     2.778655 |     2.778655 |     0.000000 |     0.000000 |     0.886839 |     0.886839 |     0.000000 |     0.000000
  3.9500 |     2.764134 |     2.764134 |     0.000000 |     0.000000 |     0.895132 |     0.895132 |     0.000000 |     0.000000
  4.0000 |     2.749645 |     2.749645 |     0.000000 |     0.000000 |     0.903371 |     0.903371 |     0.000000 |     0.000000
  4.0500 |     2.735188 |     2.735188 |     0.000000 |     0.000000 |     0.911555 |     0.911555 |     0.000000 |     0.000000
  4.1000 |     2.720764 |     2.720764 |     0.000000 |     0.000000 |     0.919685 |     0.919685 |     0.000000 |     0.000000
  4.1500 |     2.706371 |     2.706371 |     0.000000 |     0.000000 |     0.927762 |     0.927762 |     0.000000 |     0.000000
  4.2000 |     2.692011 |     2.692011 |     0.000000 |     0.000000 |     0.935785 |     0.935785 |     0.000000 |     0.000000
  4.2500 |     2.677684 |     2.677684 |     0.000000 |     0.000000 |     0.943755 |     0.943755 |     0.000000 |     0.000000
  4.3000 |     2.663390 |     2.663390 |     0.000000 |     0.000000 |     0.951672 |     0.951672 |     0.000000 |     0.000000
  4.3500 |     2.649128 |     2.649128 |     0.000000 |     0.000000 |     0.959536 |     0.959536 |     0.000000 |     0.000000
  4.4000 |     2.634899 |     2.634899 |     0.000000 |     0.000000 |     0.967349 |     0.967349 |     0.000000 |     0.000000
  4.4500 |     2.620703 |     2.620703 |     0.000000 |     0.000000 |     0.975109 |     0.975109 |     0.000000 |     0.000000
  4.5000 |     2.606541 |     2.606541 |     0.000000 |     0.000000 |     0.982817 |     0.982817 |     0.000000 |     0.000000
  4.5500 |     2.592412 |     2.592412 |     0.000000 |     0.000000 |     0.990473 |     0.990473 |     0.000000 |     0.000000
  4.6000 |     2.578316 |     2.578316 |     0.000000 |     0.000000 |     0.998078 |     0.998078 |     0.000000 |     0.000000
  4.6500 |     2.564254 |     2.564254 |     0.000000 |     0.000000 |     1.005631 |     1.005631 |     0.000000 |     0.000000
  4.7000 |     2.550225 |     2.550225 |     0.000000 |     0.000000 |     1.013134 |     1.013134 |     0.000000 |     0.000000
  4.7500 |     2.536231 |     2.536231 |     0.000000 |     0.000000 |     1.020585 |     1.020585 |     0.000000 |     0.000000
  4.8000 |     2.522270 |     2.522270 |     0.000000 |     0.000000 |     1.027986 |     1.027986 |     0.000000 |     0.000000
  4.8500 |     2.508344 |     2.508344 |     0.000000 |     0.000000 |     1.035336 |     1.035336 |     0.000000 |     0.000000
  4.9000 |     2.494451 |     2.494451 |     0.000000 |     0.000000 |     1.042636 |     1.042636 |     0.000000 |     0.000000
  4.9500 |     2.480593 |     2.480593 |     0.000000 |     0.000000 |     1.049886 |     1.049886 |     0.000000 |     0.000000
  5.0000 |     2.466770 |     2.466770 |     0.000000 |     0.000000 |     1.057085 |     1.057085 |     0.000000 |     0.000000
------------------------------------------------------------------------------------------------------------------------
Starting model: Crauste

DEBUG [MPHCPE]: Starting parameter estimation...
DEBUG [MPHCPE]: Analyzing identifiability with 2 points
DEBUG [MPHCPE]: Final analysis with 1 points
DEBUG [MPHCPE]: Final unidentifiable dict: Dict{Any, Any}()
DEBUG [MPHCPE]: Final varlist: Num[mu_LE, mu_PE, delta_EL, mu_M, mu_LL, rho_E, mu_PL, mu_N, mu_P, delta_LM, delta_NE, mu_EE, rho_P, N(t), E(t), S(t), M(t), P(t)]
We are trying these points:[78]
Using these observations and their derivatives:
Dict{Int64, Int64} with 4 entries:
  4 => 0
  2 => 4
  3 => 5
  1 => 5
total degree: 26873856
using monodromy, line 917
┌ Warning: Caught FiniteException. The solution set is positive-dimensional.
└ @ ODEParameterEstimation ~/.julia/dev/ODEParameterEstimation/src/equation_solvers.jl:109
┌ Warning: Attempting to reduce dimension by adding a random linear equation.
└ @ ODEParameterEstimation ~/.julia/dev/ODEParameterEstimation/src/equation_solvers.jl:110
┌ Warning: Caught FiniteException. The solution set is positive-dimensional.
└ @ ODEParameterEstimation ~/.julia/dev/ODEParameterEstimation/src/equation_solvers.jl:109
┌ Warning: Attempting to reduce dimension by adding a random linear equation.
└ @ ODEParameterEstimation ~/.julia/dev/ODEParameterEstimation/src/equation_solvers.jl:110
┌ Warning: Caught FiniteException. The solution set is positive-dimensional.
└ @ ODEParameterEstimation ~/.julia/dev/ODEParameterEstimation/src/equation_solvers.jl:109
┌ Warning: Attempting to reduce dimension by adding a random linear equation.
└ @ ODEParameterEstimation ~/.julia/dev/ODEParameterEstimation/src/equation_solvers.jl:110
Caught error: HomotopyContinuation.FiniteException(3)
Attempting to reduce dimension by adding a random linear equation.
Caught error: HomotopyContinuation.FiniteException(2)
Attempting to reduce dimension by adding a random linear equation.
Caught error: HomotopyContinuation.FiniteException(1)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x2edddd382953bf6b, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x2edddd382953bf6b, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x2edddd382953bf6b, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754209488, 140666695011808, 140669128570928)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (12, 15, 20))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xc272e97a), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9a90c09f06cc1b99, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9a90c09f06cc1b99, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9a90c09f06cc1b99, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754210384, 140672668971024, 433223315514)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667113416160, 140672668971024, 430485637812))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xe106e499), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc6a52afc2c0837b3, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc6a52afc2c0837b3, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc6a52afc2c0837b3, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667081422608, 140667081422688, -1)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140669960824016, 140672594017312, 140672586388624))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x12306786), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x2ee876934402b053, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x2ee876934402b053, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x2ee876934402b053, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140666694225072, 140667138360912, 140672668971024)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140666694226000, 140666694226576, 140668178902672))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x2cda1bd5), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xdc6b705aa891e547, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xdc6b705aa891e547, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xdc6b705aa891e547, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140666706752736, 0, 140667547478032)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667094817920, 0, 140672586388624))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xe09592b5), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9f8045973b85bf18, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9f8045973b85bf18, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9f8045973b85bf18, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (2, 0, -1)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140669945771472, 140672594017312, 140672586388624))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x59746bf4), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x4ffeb9ee434b7cdb, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x4ffeb9ee434b7cdb, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x4ffeb9ee434b7cdb, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672606079232, 140672606079232, 432568191126)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140669945799440, 140672594017312, 140672586388624))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x85ff2f73), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc715712e1ea63b14, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc715712e1ea63b14, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc715712e1ea63b14, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140669945799440, 140672594017312, 140672586388624)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 432615044614))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x85f75fd1), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x62c6a50381cc17e9, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x62c6a50381cc17e9, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x62c6a50381cc17e9, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140668982713712, 140668982713808, 433697120899)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 432568191126))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x8995596d), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9275c5e0a01c18d2, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9275c5e0a01c18d2, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9275c5e0a01c18d2, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754209936, 140666710157392, 432568191126)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140666710157808, 140666710157824, 140672586388624))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xb78af7ab), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x706fc54502615238, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x706fc54502615238, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x706fc54502615238, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672753986624, 140672753999168, 432615044614)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672753993344, 140672668971024, 140666694978656))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xe925325c), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x43787add2c9c85af, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x43787add2c9c85af, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x43787add2c9c85af, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140669129201648, 140672606088176, 429842730931)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 432372403599))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x600e7751), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xef5653848710f9ef, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xef5653848710f9ef, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xef5653848710f9ef, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (12, 13, 18)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667130245488, 140666626498304, -1))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x29b32f85), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf490280da82be07d, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf490280da82be07d, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf490280da82be07d, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (4, 0, -1)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (4, 0, -1))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xc89ae6db), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xe69b5b406848f9f9, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xe69b5b406848f9f9, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xe69b5b406848f9f9, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754209936, 140667536640480, 431212969092)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667536640192, 140667536640304, 432568191126))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xe122b002), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xdd0d10c0e81c0176, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xdd0d10c0e81c0176, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xdd0d10c0e81c0176, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 415953540099)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 416556515685))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xe0f4d422), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x72de71c18db1158a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x72de71c18db1158a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x72de71c18db1158a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 416219488455)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 413197388129))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xef9ab9c4), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf3cb104c42be6c71, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf3cb104c42be6c71, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf3cb104c42be6c71, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 433324147024)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140666601973249, 140672569418480, 140667487492256))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x691c6db2), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5d545398fb2d9ec2, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5d545398fb2d9ec2, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5d545398fb2d9ec2, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667151832576, 140667151832592, 140668768878592)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672723261616, 140672723261648, 429496729600))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xc7745c71), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xad2910e9ebcbd259, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xad2910e9ebcbd259, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xad2910e9ebcbd259, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140669973677968, 140669973678000, 140672586388624)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140669971888656, 140666610213696, 433697120899))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xb7ffbeb9), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x82c2f2ebd6b69588, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x82c2f2ebd6b69588, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x82c2f2ebd6b69588, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140669945799440, 140672594017312, 140672586388624)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140669019283376, 140669019283408, -3233865573731605885))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x4a232c29), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x3119cc78a575cd0d, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x3119cc78a575cd0d, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x3119cc78a575cd0d, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754209936, 140672753982592, 432568191126)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754209040, 140672753983936, 140672586388624))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xa712a362), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x289bf7358743c49a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x289bf7358743c49a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x289bf7358743c49a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 430255752588)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (12, 15, 19))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x58418072), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xe21521aad838e351, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xe21521aad838e351, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xe21521aad838e351, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, -281041279589757)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 432568191126))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x62fd28a4), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x279404d44228ab89, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x279404d44228ab89, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x279404d44228ab89, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (12, 15, 20)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672606078432, 140672606079232, 431022498104))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xcd51cd0f), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x269f28eb9ca6ed92, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x269f28eb9ca6ed92, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x269f28eb9ca6ed92, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (7, 0, -1)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (7, 0, -1))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x344b7d96), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x69ef21e495bf88e9, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x69ef21e495bf88e9, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x69ef21e495bf88e9, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 140666624497104)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 140672606079168))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xa28c269c), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x39d547f6472f94b9, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x39d547f6472f94b9, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x39d547f6472f94b9, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140664473912032, 0, -3443564432463120890)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (1, 1, 140667029590016))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x795a3225), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9bf8f3e39b6c4851, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9bf8f3e39b6c4851, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9bf8f3e39b6c4851, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (2, 0, -1)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140669945771472, 140672594017312, 140672586388624))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xfec44de5), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x276a42e8128225bb, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x276a42e8128225bb, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x276a42e8128225bb, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754209040, 140672753992448, 433697120899)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672753990208, 140672754003648, 432568191126))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xf7d29e5b), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x84531676efdfac58, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x84531676efdfac58, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x84531676efdfac58, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 414119464569)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140670291799200, 140670015773200, 0))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x8a82ab74), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x027a06dc6fac7bcf, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x027a06dc6fac7bcf, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x027a06dc6fac7bcf, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140668986882305, 140672583691472, 140672586388624)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 415517908801))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x56d9f586), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x4ba8be1a3fb9550d, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x4ba8be1a3fb9550d, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x4ba8be1a3fb9550d, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, -3092565424783803531)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 143766575936))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x903ee7ac), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x88ba8eb5cc53a19d, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x88ba8eb5cc53a19d, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x88ba8eb5cc53a19d, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 415295599011)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 412316860416))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x1a13106a), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x1749a87140963c47, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x1749a87140963c47, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x1749a87140963c47, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672753980352, 140672753980800, 140672753981248)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140666621248416, 140672606079168, 140667728737040))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x6d9551df), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xad8fcda7a98f4aef, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xad8fcda7a98f4aef, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xad8fcda7a98f4aef, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672606079168, 140667599268560, 140672606088240)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 433482078020))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xc05c61e6), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc5476d0f1b995822, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc5476d0f1b995822, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc5476d0f1b995822, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672554337936, 140672554337936, 140672554337936)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (7, 0, -1))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xf40fa181), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf0932495d8e76a1a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf0932495d8e76a1a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf0932495d8e76a1a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (1, 1, 140672753981248)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (2, 1, -281330640536715))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x94491634), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc26c563bcc6a16b3, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc26c563bcc6a16b3, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc26c563bcc6a16b3, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667142143808, 140672753983488, 13)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754861304, 140672753975312, 140672606088240))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x7256bbce), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x70b2ccd0b330b750, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x70b2ccd0b330b750, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x70b2ccd0b330b750, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667671995536, 140667671995568, 429496729600)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 429496729600))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x9ade7dad), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf80dfc9fd3dbc3bc, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf80dfc9fd3dbc3bc, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf80dfc9fd3dbc3bc, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754089216, 140672754086080, -1)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140668202511280, 140668202511440, 433538337303))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xd9c36649), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc871df4b79e0e475, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc871df4b79e0e475, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc871df4b79e0e475, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754209040, 140667066961264, 140672586388624)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667066961424, 140667066961440, 140672586388624))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x9ee2b9e1), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xbd3d083ee4f83650, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xbd3d083ee4f83650, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xbd3d083ee4f83650, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672687829616, 140672687829648, 433697120899)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (45, 58, 432568191126))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x3490a54e), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x0d77dbd859dfb3a2, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x0d77dbd859dfb3a2, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x0d77dbd859dfb3a2, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140666623415760, 0, 0)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672709294832, 140672709294896, 0))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x34bb8fa8), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5f2bf149695a6025, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5f2bf149695a6025, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5f2bf149695a6025, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672553650528, 140672553650480, 431671320452)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 141733920768))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xade0101c), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x973b768d2452febf, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x973b768d2452febf, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x973b768d2452febf, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667746411920, 140667746411952, 432568191126)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672554337936, 140672554337936, 140672586388624))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x66048e6f), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xee5bc6a188db7374, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xee5bc6a188db7374, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xee5bc6a188db7374, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667689559248, 140672753975304, 430568126030)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667689559216, 140672554337936, 140672586388624))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x1d9c182b), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x6dd9ae476b668a9c, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x6dd9ae476b668a9c, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x6dd9ae476b668a9c, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (7, 0, -1)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (7, 0, -1))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x1e4925c8), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xd5c5ef56762015c8, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xd5c5ef56762015c8, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xd5c5ef56762015c8, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (1, 0, 430837795345)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667465602752, 140666647546560, 140672668971024))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x8da27802), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x4bd41195c4d29628, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x4bd41195c4d29628, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x4bd41195c4d29628, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667581628304, 0, 140672586388624)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667723542576, 140667723542608, 140672586388624))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x1dc03475), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xdbd333fe2abd78cb, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xdbd333fe2abd78cb, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xdbd333fe2abd78cb, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672554337936, 0, 144134349528)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, -281333242789216))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x0adc3e05), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x4b24591f1b31fe11, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x4b24591f1b31fe11, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x4b24591f1b31fe11, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 414456568875)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, -3309863836669366665))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x979f946b), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x8f3f89244f2a5b8e, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x8f3f89244f2a5b8e, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x8f3f89244f2a5b8e, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 0)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140666588809776, 140666588809792, 140672586388624))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xa6517247), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x382df2adb8ecbacd, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x382df2adb8ecbacd, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x382df2adb8ecbacd, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 145497057941)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140669952710576, 140667466444864, 145425018960))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xce522ad8), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xd4c4689124ddfa86, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xd4c4689124ddfa86, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xd4c4689124ddfa86, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672726220368, 140672726220496, 140672586388624)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (59, 26, 432615044614))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x5d23b887), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xe1b49a757bc1f0de, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xe1b49a757bc1f0de, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xe1b49a757bc1f0de, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140668992594704, 140668992594736, 0)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667672535600, 140667672535696, 140667672535824))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x3e279849), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xe92b7f0dbd94fc71, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xe92b7f0dbd94fc71, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xe92b7f0dbd94fc71, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672554337936, 140672554337936, 433697120899)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (1, 0, 140667672573328))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xbb6ffea4), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x00b59b9d86787591, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x00b59b9d86787591, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x00b59b9d86787591, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (1, 0, 0)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672753975304, 140667540338288, 140672753981696))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x26da7c48), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x61be9ce838cac581, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x61be9ce838cac581, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x61be9ce838cac581, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 144336173941)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667486160272, 0, -1))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x958cd556), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x1b7fb40d9f703c6b, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x1b7fb40d9f703c6b, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x1b7fb40d9f703c6b, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 145078913516)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 430676333739))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x21d5dcae), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x6da75f6483720984, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x6da75f6483720984, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x6da75f6483720984, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (736, 672, 2886218023584)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (3, 4, 415657553662))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x2c69a221), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x0650f4f28de6f7fe, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x0650f4f28de6f7fe, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x0650f4f28de6f7fe, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (6, 7, 140668768878592)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672606079232, 140672606079168, 4))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x66af0000), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xb39ead449e29659c, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xb39ead449e29659c, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xb39ead449e29659c, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667078806496, 140672668971024, 433326239897)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 1, 1))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xa71c5c65), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x90f3fd0755b3aec1, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x90f3fd0755b3aec1, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x90f3fd0755b3aec1, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672668972801, 140669018229200, 142998533470)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 142273203075))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x39b05270), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x16a6a0ffef179570, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x16a6a0ffef179570, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x16a6a0ffef179570, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (8589934607, 8589934607, 140672753981248)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (824633721024, 824633721024, 141733920768))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xddf71b49), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x152d0362d22b2a3e, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x152d0362d22b2a3e, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x152d0362d22b2a3e, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672753980800, 140672753981248, -3286782870482138986)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140669945799440, 140672594017312, 140672586388624))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xafdc68b5), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x27e6e44fc64cfc91, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x27e6e44fc64cfc91, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x27e6e44fc64cfc91, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140668226079184, 140668226079216, 432568191126)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140666627041872, 0, 0))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x1361688f), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9ca2cfa933ec1cfe, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9ca2cfa933ec1cfe, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9ca2cfa933ec1cfe, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672554337936, 140672554337936, 140672554337936)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 431500080803))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xfe4a3f36), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x253d1cb63308a415, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x253d1cb63308a415, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x253d1cb63308a415, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, -281329145942861)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, -281331604745676))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xcc55c0c0), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x4dd427a9367548d9, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x4dd427a9367548d9, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x4dd427a9367548d9, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (68719476743, 30064771088, 145758481856)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (3161095930592, 3161095930592, 142998533470))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xd7d171eb), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xd5270c2e21a0ab82, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xd5270c2e21a0ab82, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xd5270c2e21a0ab82, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672606078912, 140672551714208, 140672586388624)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667750620528, 140667750620560, 140667750620592))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x0307c20e), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xff23281dbee8ec6a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xff23281dbee8ec6a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xff23281dbee8ec6a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672606088193, 140672572458832, 140666645722992)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 412316860416))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x38402614), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc3ed5787e57398f7, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc3ed5787e57398f7, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc3ed5787e57398f7, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672571667936, 140672606088240, 140672753975304)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140668981538800, 140667494041504, 140672554337936))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x2e2b1b89), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x50f8deada4ed2432, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x50f8deada4ed2432, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x50f8deada4ed2432, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (4, 0, -1)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140666648319552, 140666648319568, -3211629054771855360))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x5f93ef99), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5e36f45cdd61468a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5e36f45cdd61468a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5e36f45cdd61468a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140668962662672, 140672606088240, 145774886606)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672554337936, 140672554337936, 142938593589))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x38c7ed99), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xbfb8b4e5ea394366, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xbfb8b4e5ea394366, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xbfb8b4e5ea394366, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 431258267457)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (3, 4, 5))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x4dd60fe4), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf450fa396594d63c, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf450fa396594d63c, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf450fa396594d63c, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (105, 105, 145193074045)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 143331987590))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x2abcad8e), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x6df334239ce56d08, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x6df334239ce56d08, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x6df334239ce56d08, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 142998533470)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672668972801, 140672565870272, 141733920768))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xdbcd449b), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x16325cd2f9205fe6, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x16325cd2f9205fe6, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x16325cd2f9205fe6, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (3, 4, 5)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (2, 3, 4))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xa1367e85), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xdfd945a66af2c798, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xdfd945a66af2c798, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xdfd945a66af2c798, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (20753281979104, 0, -281043589174124)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (4294967297, 140668768878592, -281044406386151))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x79833aac), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x199bd0f5a5e2e913, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x199bd0f5a5e2e913, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x199bd0f5a5e2e913, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667032382288, 140667032382384, 0)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672606088176, 140672551968528, 0))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xb76e70c3), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xcc0298796f198493, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xcc0298796f198493, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xcc0298796f198493, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 144937129017)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 143615082948))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xa254f2a3), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x1a5e72ad6367ebe8, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x1a5e72ad6367ebe8, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x1a5e72ad6367ebe8, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 420322893078)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 142722958686))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x09e8fcb5), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x47e5165b3abe7671, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x47e5165b3abe7671, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x47e5165b3abe7671, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 0)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 0))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xa984f74c), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x0de328364764d366, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x0de328364764d366, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x0de328364764d366, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, -3114801661822126101)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672668972801, 140672565870272, 431833253244))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xa0236a2f), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xd73ba1ff811d366a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xd73ba1ff811d366a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xd73ba1ff811d366a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672721602032, 140672721602064, 140672753981696)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (28999619189344, 28999619187424, 2886218027744))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x55b2e051), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xd5ef2977833b9842, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xd5ef2977833b9842, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xd5ef2977833b9842, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (20753281979104, 140668768879264, 433697120899)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672554337936, 140672554337936, 432568191126))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xaf1ae5ed), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xba7404744b46e88c, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xba7404744b46e88c, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xba7404744b46e88c, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672554337936, 140672554337936, 140672554337936)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672606079168, 140666714971024, 140672606088240))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xaedcfe9c), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xbc01830c0df1367b, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xbc01830c0df1367b, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xbc01830c0df1367b, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 429496730272)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667739498320, 140667104793600, 140668768878592))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xbe1bd326), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc82de5999620193c, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc82de5999620193c, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc82de5999620193c, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667125301249, 140667668420240, -1)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140666721768704, 140667572218064, -1))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xbee3c01e), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5b1dad0263ded97c, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5b1dad0263ded97c, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5b1dad0263ded97c, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, -281333242789888)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, -281331978177186))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xd43ea7ef), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf7e58c3a7cb14867, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf7e58c3a7cb14867, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf7e58c3a7cb14867, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667712988208, 140667712988272, 140666644143008)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140666604333504, 140667103383104, 140672606088240))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xe51123c7), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5b8ee0f46cae03be, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5b8ee0f46cae03be, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5b8ee0f46cae03be, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (1, 4294967297, 1)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (38654705670, 0, 433237518887))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xa1cff40c), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x07884bff0ae1869a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x07884bff0ae1869a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x07884bff0ae1869a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 1519571675789)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 416029077148))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x3bfc1d74), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x2d5e6dc8857dc105, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x2d5e6dc8857dc105, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x2d5e6dc8857dc105, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140669965406192, 140669965406224, -3234991765086364529)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 140668768878592, -3234991487012676330))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xee489721), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x903d9105f04fe91d, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x903d9105f04fe91d, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x903d9105f04fe91d, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140669975804528, 140667471616752, 140672552282960)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140666595230864, 140666595230752, 140672586388624))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x242dac34), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9f92506ca10643b4, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9f92506ca10643b4, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9f92506ca10643b4, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (4, 5, -3067232408899158016)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (3, 4, 5))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x33b346b7), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x847886acb670d05e, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x847886acb670d05e, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x847886acb670d05e, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667686128912, 140672606088240, 140672753983040)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672606079232, 140672606079232, 0))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xd3ebb901), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xb046f652a05ad8fb, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xb046f652a05ad8fb, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xb046f652a05ad8fb, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 140672586388624)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (1, 0, 140667685758160))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x35c290e8), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xa62073eba85258dd, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xa62073eba85258dd, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xa62073eba85258dd, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (7, 0, -1)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667073652384, 140667073652400, -1))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x98b27ace), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9e5f9c943861c32c, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9e5f9c943861c32c, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9e5f9c943861c32c, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140666715319824, 0, 12)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 142722958686))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xfc30086c), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9f057863bc4f0de5, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9f057863bc4f0de5, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9f057863bc4f0de5, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140666659916032, 0, 211770779007)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667629446288, 140667629446320, 144174398428))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xd00c8c12), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xaef3f81d64763543, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xaef3f81d64763543, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xaef3f81d64763543, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672753981328, 140672753981776, 140672753982224)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140666678905904, 140672754041280, 12))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xff5d6792), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x94e2c90610d09415, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x94e2c90610d09415, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x94e2c90610d09415, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 414109758227)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667474777776, 0, 414193444113))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x08a88fe4), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xa61c6cd4d03a0e9a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xa61c6cd4d03a0e9a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xa61c6cd4d03a0e9a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (2886218027712, 0, 414463239957)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (20753281979104, 140668768878592, 412832132427))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xe89ddff5), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xb9707088d85f8162, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xb9707088d85f8162, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xb9707088d85f8162, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (1, 0, 0)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672753980800, 140672753981248, 140672753981696))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x4353df79), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc676b55b58ef2063, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc676b55b58ef2063, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc676b55b58ef2063, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 1)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140668215816816, 140666664569280, 140672586388624))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x616411aa), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x51225f1b3778f0c7, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x51225f1b3778f0c7, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x51225f1b3778f0c7, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140669013043696, 140667591902160, 140672554337936)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672606088240, 140666629081808, 140672606088240))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xc538b6ab), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xaeb8027d3401f86b, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xaeb8027d3401f86b, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xaeb8027d3401f86b, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (1, 0, 142235599044)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 420322893078))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x8340bdb2), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xb9032e4ac225a150, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xb9032e4ac225a150, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xb9032e4ac225a150, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754502800, 140672755671896, -1)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667153135472, 0, -1))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xd771cb1a), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x1f84dd21dd34b859, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x1f84dd21dd34b859, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x1f84dd21dd34b859, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 414957068061)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 145994301089))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x26252bf5), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x0a40fc8943e99f63, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x0a40fc8943e99f63, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x0a40fc8943e99f63, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 413068194132)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 413426492695))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x9cdd1095), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xed323d8fbe0b3559, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xed323d8fbe0b3559, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xed323d8fbe0b3559, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 420322893078)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 142722958686))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x2a94f511), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x20a2d79b17bc73c6, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x20a2d79b17bc73c6, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x20a2d79b17bc73c6, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 429496729600)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 429496729600))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x942a9985), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xe06085f6de7ec219, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xe06085f6de7ec219, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xe06085f6de7ec219, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754209936, 140672754040832, 432357227787)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (2, 0, -1))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xe04d63d9), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x8d4d798b9bb3ac90, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x8d4d798b9bb3ac90, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x8d4d798b9bb3ac90, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (4, 5, 0)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (3, 4, 5))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x976a943c), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5af4935cb1342253, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5af4935cb1342253, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5af4935cb1342253, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754522264, 0, -281045305086212)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672668972801, 140672587249536, 144134349528))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x58635beb), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x2d4e2137073c0345, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x2d4e2137073c0345, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x2d4e2137073c0345, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 140672554337936)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667728805648, 140667048039584, 5))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xc13648eb), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5ed98983183fb136, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5ed98983183fb136, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5ed98983183fb136, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (20615843025632, 140668768878592, 142722958686)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (4294967297, 140668768878592, 420322893078))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x67895919), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x50abe73535cb9acb, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x50abe73535cb9acb, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x50abe73535cb9acb, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754209488, 140672754068608, 140672753975304)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754209488, 140672754076672, -1))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x4471e274), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x4b720cfb8631edc9, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x4b720cfb8631edc9, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x4b720cfb8631edc9, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754066816, 140672754079360, 140667661607472)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754073536, 140672668971024, 4))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x995d876a), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x7cf2603831ac9b6b, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x7cf2603831ac9b6b, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x7cf2603831ac9b6b, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667629570608, 140667629570640, 140672754064576)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 1516207961761))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x6594af58), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5b101a21c994bd04, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5b101a21c994bd04, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5b101a21c994bd04, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 145022849501)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 145022849501))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x97fceb02), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x04bbe8e34e3f1976, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x04bbe8e34e3f1976, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x04bbe8e34e3f1976, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 142722958686)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 420322893078))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x7d0cbbc2), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xfeb14993c37ba04f, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xfeb14993c37ba04f, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xfeb14993c37ba04f, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140669968742480, 140669968742512, 140672586388624)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667079266817, 140672571693200, 430255752588))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xacf1a8ad), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xb9457b81c8566e9a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xb9457b81c8566e9a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xb9457b81c8566e9a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672591326976, 140669129944544, 140672605550608)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 144628617296))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x47f04ea5), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x46b2ec576bb4b791, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x46b2ec576bb4b791, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x46b2ec576bb4b791, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (4, 2, 5)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140666675171200, 0, -1))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x966c3f30), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf1f3b449b1c7c24e, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf1f3b449b1c7c24e, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf1f3b449b1c7c24e, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 142095431977)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 143230689993))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x66defaf9), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf0ba258d93dff326, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf0ba258d93dff326, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf0ba258d93dff326, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140669129924288, 140667152516784, -1)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140669129924096, 140672564358032, -1))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x97b4447f), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x3fb4678ab6edd10d, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x3fb4678ab6edd10d, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x3fb4678ab6edd10d, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672753981248, 140672753981696, -281060520141781)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 4800))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x8efe1aff), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xba26f473af132749, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xba26f473af132749, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xba26f473af132749, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672606088176, 140668176447568, 141733920768)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140666617254832, 0, 412933736544))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x81f10cd9), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xb50754b03bdd8012, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xb50754b03bdd8012, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xb50754b03bdd8012, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (2, 3, 414824640556)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 142335571622))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xb68e6f81), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x3c4fcc19de039af6, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x3c4fcc19de039af6, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x3c4fcc19de039af6, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140669963428240, 140669963428272, -281062659850240)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140669963428400, 140669963428432, 412316860416))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x94e73bd2), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xdb6cf45b0a0b2276, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xdb6cf45b0a0b2276, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xdb6cf45b0a0b2276, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754209936, 140672753985728, 144781437730)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (12, 0, 140669958521168))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x18829751), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x1b822fb10b6207d9, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x1b822fb10b6207d9, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x1b822fb10b6207d9, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140668214807088, 140668214807216, 0)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, -3077646965857583104))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xa4713cae), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x8a4c4fd27539a69a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x8a4c4fd27539a69a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x8a4c4fd27539a69a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667693087888, 140672554337936, 0)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (3, 4, 140672753981248))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xaf778a58), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xbfb99614272b941b, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xbfb99614272b941b, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xbfb99614272b941b, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667739245968, 140667555653856, 0)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 431625200564))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x7b46a8e0), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5310c3735d8a3f69, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5310c3735d8a3f69, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5310c3735d8a3f69, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754078912, 140672668971024, 140672668971024)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667636704944, 140667574136976, 140672668971024))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x47492094), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xe4c5ab780c486b86, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xe4c5ab780c486b86, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xe4c5ab780c486b86, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, -281330640536715)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, -281042180616065))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xe439d1c4), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xb4ff754ac2857e5e, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xb4ff754ac2857e5e, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xb4ff754ac2857e5e, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667596275713, 140669929536720, 430450635989)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 1241639832415))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x34a241f2), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5d764d595b68f612, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5d764d595b68f612, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5d764d595b68f612, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667730301424, 0, 431805706495)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 1516207961761))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x751faa27), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xb97657c22867ed53, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xb97657c22867ed53, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xb97657c22867ed53, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140668221795888, 140667527639120, 0)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140669984998672, 140672606088240, 0))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x894419aa), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x316f7b35d576bfb8, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x316f7b35d576bfb8, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x316f7b35d576bfb8, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (432349962274408448, 505247583195627520, 412316860416)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 413693021126))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x7ee31a01), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x558eef845bdf78bb, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x558eef845bdf78bb, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x558eef845bdf78bb, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, -281057652320347)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140668983950000, 140666693901904, -280233122846622))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x471ff1d8), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xb72c5c4a246c6959, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xb72c5c4a246c6959, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xb72c5c4a246c6959, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667722718096, 140672606088240, 413693021126)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672554337936, 140672554337936, 140668229411184))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x5c545f16), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc36d0c9bb059d569, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc36d0c9bb059d569, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc36d0c9bb059d569, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754046208, 140672754058752, 12)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754052928, 140672668971024, 12))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x965b1f22), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x723e7ad15a4e2794, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x723e7ad15a4e2794, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x723e7ad15a4e2794, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672753981328, 140672753987968, 142273203075)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (1, 0, 140672586388624))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xd175d5c1), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x34c64361e973b911, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x34c64361e973b911, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x34c64361e973b911, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667138976016, 140667138976112, -1)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 140666715272640))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x74ddf40d), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xabfdfe752329fa66, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xabfdfe752329fa66, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xabfdfe752329fa66, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667556433328, 140672606079168, 431765662189)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667123269904, 140669948737552, 140672586388624))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x8cd04eef), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf902c43a2cfd97aa, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf902c43a2cfd97aa, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf902c43a2cfd97aa, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 431622983002)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 0))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x7455ff91), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x0f03ac7492a0515e, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x0f03ac7492a0515e, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x0f03ac7492a0515e, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 420322893078)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 417324390309))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xd36e8b72), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x49e3ff290b750883, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x49e3ff290b750883, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x49e3ff290b750883, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672606088176, 140667750484368, 140672586388624)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672554337936, 140672554337936, 140672661714192))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x4f708631), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xa804a4cf81186116, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xa804a4cf81186116, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xa804a4cf81186116, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 4294967304)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140668991980272, 140667056612640, 4294967304))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xaf23c621), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x92284e32642d93e0, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x92284e32642d93e0, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x92284e32642d93e0, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667717630352, 140672753980352, 141733920768)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140668229166640, 140672606088240, 142298506900))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xbda4f540), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xdd65dba22bf41999, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xdd65dba22bf41999, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xdd65dba22bf41999, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 431625200564)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 1242779380730))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x264a6ab7), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xae5f742a850d6043, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xae5f742a850d6043, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xae5f742a850d6043, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (38, 49, 67)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672753983488, 140672753983936, 140672606088240))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x32d0189f), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x0b118833ce217d6f, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x0b118833ce217d6f, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x0b118833ce217d6f, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667620164112, 140667620164144, 145425018960)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (20753281979104, 140668768879264, 145497057941))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x45134c85), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x13d1f86b74723d76, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x13d1f86b74723d76, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x13d1f86b74723d76, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672554337936, 140672554337936, -1)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (1, 0, 140666606650048))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xabf48eb4), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xe88f4a84fc3f9bcc, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xe88f4a84fc3f9bcc, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xe88f4a84fc3f9bcc, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667627800336, 140667627800368, 143169197362)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (5, 0, 416611827712))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x3ba18722), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x1c0d39f173945fe9, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x1c0d39f173945fe9, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x1c0d39f173945fe9, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667551101472, 140672753983488, 0)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754861304, 140672753975312, 140672554337936))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x6238459e), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x64cbf9cd307fc181, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x64cbf9cd307fc181, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x64cbf9cd307fc181, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667691646000, 140667691646064, 4800)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672554337936, 140672554337936, 140672753982672))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xa14bc698), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xba804a1b9b18249b, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xba804a1b9b18249b, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xba804a1b9b18249b, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 142360570662)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 16777216, 143081066155))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xfb908625), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf779a42316201bdf, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf779a42316201bdf, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf779a42316201bdf, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140668990021808, 140667061825728, -1)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (3, -1, -1))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x76e370b5), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9f0c60a0ef66c257, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9f0c60a0ef66c257, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9f0c60a0ef66c257, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672554337936, 140672554337936, 412316860416)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (1, 0, 412316860416))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x38223564), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xd927c8fc9141c099, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xd927c8fc9141c099, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xd927c8fc9141c099, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672554337936, 140672554337936, 0)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (1, 0, 0))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x30e702d9), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5ccb4c7b4e6bf995, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5ccb4c7b4e6bf995, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5ccb4c7b4e6bf995, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754209488, 140672754036352, 420322893078)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754034112, 140672668971024, 417324390309))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x842ca11c), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xee7ea828cc29611b, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xee7ea828cc29611b, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xee7ea828cc29611b, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 140667469257392)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672554337936, 140672554337936, 432796094591))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x5247ddae), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf6c2f6ec2dc421ca, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf6c2f6ec2dc421ca, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf6c2f6ec2dc421ca, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, -281333242789888)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 141733920768))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xf465bc33), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x77f4b51330ae45a3, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x77f4b51330ae45a3, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x77f4b51330ae45a3, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754074432, 140672754078464, 0)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754090560, 140672754093248, 140666626966544))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x2e91f9dd), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x2b20d3499ac73ff8, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x2b20d3499ac73ff8, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x2b20d3499ac73ff8, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 143957027123)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140669014320592, 140672753981696, 1245418625329))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xb9d8919d), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x80fe5f7ccb681ed0, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x80fe5f7ccb681ed0, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x80fe5f7ccb681ed0, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672552282960, 140669129915280, 414304222483)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672552282960, 140669129915280, -281061130085300))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xa54bf6fd), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x7d4ed3ef90675443, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x7d4ed3ef90675443, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x7d4ed3ef90675443, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140669128597952, 140669128560512, 12)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140669951869392, 140667086334832, 5))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x1d12b656), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf4438d15ec261686, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf4438d15ec261686, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf4438d15ec261686, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 0)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 0))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xe3cc25e8), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xa259c92586195879, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xa259c92586195879, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xa259c92586195879, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (1, 140672571618864, 1519571675789)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 412316860416))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x48cab792), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xac2f154b24027e00, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xac2f154b24027e00, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xac2f154b24027e00, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (4, 1, 0)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667531240960, 140667531240912, 0))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xb30254ac), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xff044584dc891038, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xff044584dc891038, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xff044584dc891038, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667684788064, 140672754054720, 1519571675789)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754030976, 140672668971024, 140672753981696))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x65f3e5cf), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc48d0fe0f60d0c36, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc48d0fe0f60d0c36, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc48d0fe0f60d0c36, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, -279955405034867)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, -281060974603185))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x443e79a8), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x0e48fb4adade3ae5, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x0e48fb4adade3ae5, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x0e48fb4adade3ae5, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754861304, 140672754502800, 141733920768)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667569348816, 140672606088240, 141733920768))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xdca1ad75), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x0481a6dd3fb2e368, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x0481a6dd3fb2e368, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x0481a6dd3fb2e368, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667633355216, 140667633355248, 430700586136)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 432796094591))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x4dd030e5), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x6b7ce3590e736f5a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x6b7ce3590e736f5a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x6b7ce3590e736f5a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672606088240, 0, 0)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672554337936, 0, 140672753981696))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x918368d4), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xdf7b2fe29fc09856, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xdf7b2fe29fc09856, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xdf7b2fe29fc09856, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 413065198887)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 413175467021))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x167a5833), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x1d6f3ef5d4f8ffc8, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x1d6f3ef5d4f8ffc8, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x1d6f3ef5d4f8ffc8, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 433697120899)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140669922675632, 140667123270960, 0))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x2dd6e762), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf4a782aa292678f6, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf4a782aa292678f6, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf4a782aa292678f6, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140666697846528, 0, 142998533470)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140668958342256, 140668958342288, 431993952881))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x9dd83a26), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x3f7264ebf151efa6, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x3f7264ebf151efa6, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x3f7264ebf151efa6, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (736, 672, 2886218023584)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (1, 0, 0))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x6c381789), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x35450e12349895a7, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x35450e12349895a7, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x35450e12349895a7, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 141733920768)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672553650528, 140672553650480, 1519305477373))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xad4b2daf), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x6515a081bafcd7b4, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x6515a081bafcd7b4, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x6515a081bafcd7b4, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 433365727758)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 0))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xed4a972f), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xaf1c2f3ac54861dd, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xaf1c2f3ac54861dd, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xaf1c2f3ac54861dd, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 143399242529)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 140670189917528, -280231613652340))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xaf916a2a), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x3322671a317f1c5f, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x3322671a317f1c5f, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x3322671a317f1c5f, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 144355444382)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 143546249527))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xd89c0bd0), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x7a2d3bde7dd4eb7c, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x7a2d3bde7dd4eb7c, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x7a2d3bde7dd4eb7c, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140668194454320, 140668194454352, 140672754042624)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140668184619152, 140668184619312, -281042408519530))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xbe93ff0c), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xe3b517ddabe68e95, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xe3b517ddabe68e95, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xe3b517ddabe68e95, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 2)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, -281043471251435))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x5a4af8e7), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x4ef521a8b164d0c0, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x4ef521a8b164d0c0, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x4ef521a8b164d0c0, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672753986624, 140672753999168, 140672606088240)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672753993344, 140672668971024, 145311845910))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x78010f4c), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x4487b654298c1f2b, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x4487b654298c1f2b, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x4487b654298c1f2b, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140668972161136, 140672606088240, 414248745684)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672554337936, 140672554337936, -1))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xf5ec8005), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xb2cbed49ce4d2c84, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xb2cbed49ce4d2c84, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xb2cbed49ce4d2c84, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667729175632, 140667081659280, 140672753975304)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672753975304, 140672753975304, 140672753975304))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xedec9dcf), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x2aa6a15f3f672fc9, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x2aa6a15f3f672fc9, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x2aa6a15f3f672fc9, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 431807450088)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 431049014007))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x5b83e1b7), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xaa6718cd1afdce91, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xaa6718cd1afdce91, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xaa6718cd1afdce91, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667642138512, 140667642138544, 143331987590)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754074432, 140672754070400, 140672754071296))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xed0947f4), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x1b9b2b32a4cc4fa7, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x1b9b2b32a4cc4fa7, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x1b9b2b32a4cc4fa7, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (8589935616, 0, -281060341783080)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672753975304, 140672753975304, 140667091202400))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xd9537d06), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xafc6f40388a1a195, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xafc6f40388a1a195, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xafc6f40388a1a195, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140669129924288, 140666671771536, 429496729600)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140669129924288, 140666671771536, 140667627471856))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xe90cabf7), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x89af68ab5d76e915, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x89af68ab5d76e915, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x89af68ab5d76e915, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (4, 5, -1)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140666599754656, 140666599754672, 140672668971024))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xfc45ddf2), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x1988ee47ca5f89d2, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x1988ee47ca5f89d2, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x1988ee47ca5f89d2, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (20753281979072, 20753281981152, 4800)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (8589934594, 2, 0))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xb2664447), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x162f7bc274ee47f9, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x162f7bc274ee47f9, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x162f7bc274ee47f9, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140669129896736, 140669129662656, 4)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140669129896736, 140669129662656, 4))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x4568b0bc), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x1f16f30c21a3b08b, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x1f16f30c21a3b08b, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x1f16f30c21a3b08b, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 413969198574)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 416297906859))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xb0cf9f80), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xab8d51cfba494c87, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xab8d51cfba494c87, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xab8d51cfba494c87, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 145057979361)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 140670077943296, 1241742133183))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x53ffe70c), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x74ef3c514e4fa056, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x74ef3c514e4fa056, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x74ef3c514e4fa056, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 414109758227)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 414193444113))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x8899e4bf), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf70873ba37f4a386, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf70873ba37f4a386, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf70873ba37f4a386, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 145078913516)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667140095344, 140672606079232, 141733920768))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x7387f0d8), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xcd9a5c0e37e3abb4, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xcd9a5c0e37e3abb4, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xcd9a5c0e37e3abb4, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 144336173941)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 143592265743))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x1ec60817), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xd40d29698c6c09af, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xd40d29698c6c09af, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xd40d29698c6c09af, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672753975304, 140672753975304, 140672753975304)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672554337936, 140672554337936, 140672554337936))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xca26e7ff), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5ab288c9f12f254c, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5ab288c9f12f254c, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5ab288c9f12f254c, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (1, 1, -281332703507581)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754861304, 140672753975312, 432568191126))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xdbfcdf5c), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x73f88ea06c238e95, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x73f88ea06c238e95, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x73f88ea06c238e95, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 142696484420)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 144447790831))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x98a24a89), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xd05dc8103cf93a5d, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xd05dc8103cf93a5d, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xd05dc8103cf93a5d, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667498102112, 140667498102336, 412612316282)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 413880826023))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x3db07fa2), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x77f3cb3c406bad6f, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x77f3cb3c406bad6f, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x77f3cb3c406bad6f, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140669938863888, 0, 4)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667506409600, 140672606088240, 143953070804))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x50a21310), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xed33b8f06527cf82, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xed33b8f06527cf82, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xed33b8f06527cf82, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672753986176, 140672753998720, 415362944190)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672753992896, 140672668971024, 412595716760))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xf982ff0c), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5929b54ac78faab5, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5929b54ac78faab5, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5929b54ac78faab5, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667112835841, 140672572455712, 140672606088240)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667147826688, 140667147828672, 432956464382))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x20ff0d43), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x1b368a0d12db52ea, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x1b368a0d12db52ea, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x1b368a0d12db52ea, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672606079232, 140672606079232, 0)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 430093288911))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xd7f934c2), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x492532f2b95a2ba2, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x492532f2b95a2ba2, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x492532f2b95a2ba2, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (3, 4, 140664473911296)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, -4294967296))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x6e985174), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xd7301c09b7709163, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xd7301c09b7709163, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xd7301c09b7709163, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667052844208, 140666593548608, -1)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667052843824, 140672606088240, -1))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x8241b902), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x3001c31c5ac72582, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x3001c31c5ac72582, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x3001c31c5ac72582, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667136183920, 140672606079232, 415494064815)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 414057073274))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x551bad14), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xd56ad0f6df3838ad, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xd56ad0f6df3838ad, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xd56ad0f6df3838ad, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, -281330039581639)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, -281331816069343))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x40083cab), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xe8890bf998dc7a2a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xe8890bf998dc7a2a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xe8890bf998dc7a2a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140666612132368, 140666612132384, 143230689993)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667697394096, 140667697394224, 145464078932))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xcf85191f), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x81a7a03a0dfa8923, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x81a7a03a0dfa8923, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x81a7a03a0dfa8923, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754195840, 140672754209280, 3)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754203456, 140672668971024, 2886218027584))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xcbc13cb1), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x0085a4f813364f13, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x0085a4f813364f13, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x0085a4f813364f13, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (2, 1, 0)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (1, 1, 0))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x904b0114), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x038f3d50b51d91c9, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x038f3d50b51d91c9, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x038f3d50b51d91c9, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140668209566960, 140668209566992, 414870614635)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 414571028934))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xe4a0814c), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x275b4c6b8818406f, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x275b4c6b8818406f, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x275b4c6b8818406f, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667690872176, 140667688948800, 0)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667690871760, 140672606088240, 0))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x1d46b2e9), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x7e2f9482eb12aad5, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x7e2f9482eb12aad5, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x7e2f9482eb12aad5, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 412906766898)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 415765038056))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x442e5a57), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x1b73f34e82fced66, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x1b73f34e82fced66, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x1b73f34e82fced66, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672668972801, 140672573221520, -281330640536715)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 433596090608))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xaa8015a7), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x071d5b8cc79368a0, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x071d5b8cc79368a0, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x071d5b8cc79368a0, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (1, 140672571693200, -280231875657803)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140666695675792, 140666695675680, 431750191282))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xf925bfa8), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc995cc4b6b2623df, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc995cc4b6b2623df, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc995cc4b6b2623df, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 12)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667709236464, 140667521518656, -1))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xaff3d1b2), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x22111a95c4878116, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x22111a95c4878116, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x22111a95c4878116, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754209488, 140672754049792, 413693021126)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667127315584, 140667127315616, 415705857310))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xaea9436e), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xa00af146eeb32172, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xa00af146eeb32172, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xa00af146eeb32172, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672753980352, 140672753980800, 140672753981248)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, -281332760706059))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x2115c8bf), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xbd624f9fb5fdeb82, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xbd624f9fb5fdeb82, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xbd624f9fb5fdeb82, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (2, 12884901891, 3)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (9, 17, 19))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x967d1a6b), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x3d79937ad328b2e7, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x3d79937ad328b2e7, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x3d79937ad328b2e7, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667048936449, 140669019330128, 140672668971024)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140668176928304, 140668176928336, 412316860416))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x793e990d), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x941488002a3e59c5, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x941488002a3e59c5, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x941488002a3e59c5, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754502800, 140672755671896, 142505179895)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667687650256, 140672606088240, 142749237554))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x1f22c18d), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x0308c5cc369760e3, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x0308c5cc369760e3, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x0308c5cc369760e3, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 140668207543440)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 140672668971024))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xb6d4f66b), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x91cd7624f46592a8, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x91cd7624f46592a8, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x91cd7624f46592a8, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672753980352, 140672753980800, 433006834854)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672753985280, 140672753982144, 140672668971024))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x4a9026d0), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x72ad2d2c6ce430f6, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x72ad2d2c6ce430f6, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x72ad2d2c6ce430f6, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667050373264, 140667050373360, -1)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672554337936, 140672554337936, -281333242789888))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xcde8d9a1), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xe6bc1ed42f07bc0e, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xe6bc1ed42f07bc0e, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xe6bc1ed42f07bc0e, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672606079232, 140672606079232, 144285448855)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 430093288911))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x389693b8), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xdb277adbfa3116d7, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xdb277adbfa3116d7, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xdb277adbfa3116d7, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 145359804676)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 145085237924))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xeccc58c1), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xcf1d515206740a40, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xcf1d515206740a40, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xcf1d515206740a40, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 141733920768)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 141733920768))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x906aa2d2), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9e346b205882d6bc, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9e346b205882d6bc, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9e346b205882d6bc, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 140669970634832, 141733920768)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754209936, 140672754209936, 1))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xc8ce87f6), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc5925b7dc56a238c, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc5925b7dc56a238c, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc5925b7dc56a238c, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140669968461424, 140669968461456, 140672554337936)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (38654705670, 140668768878592, 140672606088240))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xdb148ea1), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x0b105262046fb59a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x0b105262046fb59a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x0b105262046fb59a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754544664, 140672754544448, 143944465724)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 145758481856))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x7a72e6c2), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x07a2f9b80af1f70d, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x07a2f9b80af1f70d, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x07a2f9b80af1f70d, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672606079232, 140672606079168, 144418076035)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (1, 140672571618864, 142636706597))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xd5e1ec52), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xd7506627a84294ee, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xd7506627a84294ee, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xd7506627a84294ee, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672753980352, 140672753980800, -281061967898998)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667475606416, 140667475606480, -281060164112458))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x1749d77a), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xec7f9379a2742fc2, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xec7f9379a2742fc2, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xec7f9379a2742fc2, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 0)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 0))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x12782c77), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x938325581d971276, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x938325581d971276, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x938325581d971276, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754209040, 140672753992448, 4)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672753990208, 140672754003648, 4))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x0bf947bc), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xdebc298c078cc145, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xdebc298c078cc145, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xdebc298c078cc145, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 140669132905360, 210719514911)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 145774886606))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xb3deb4f8), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc1c7a3428bc3c89a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc1c7a3428bc3c89a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc1c7a3428bc3c89a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (1, 1, 142722958686)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667709290608, 140667709290640, 420322893078))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x546c000f), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x83dab9955f450dc1, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x83dab9955f450dc1, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x83dab9955f450dc1, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140669976619216, 140669976619280, 140667116434816)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140669976622416, 140669976622448, 413791044917))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xad34fda8), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xed87e6bcd825e0e7, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xed87e6bcd825e0e7, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xed87e6bcd825e0e7, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672753981248, 140672753981696, -281331756591231)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672668972801, 140672577555536, 142878759877))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xd4a715a1), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x812fd9f05d26ce2a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x812fd9f05d26ce2a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x812fd9f05d26ce2a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672552011728, 140672552011728, 413008811658)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 414812598198))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xf74d2d10), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xfd3113df33519a4a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xfd3113df33519a4a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xfd3113df33519a4a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140669008147696, 140669008147728, 142938593589)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667571357728, 140672606079232, 431932795473))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x6e5efe48), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x1b2c8b202092df3d, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x1b2c8b202092df3d, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x1b2c8b202092df3d, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667136184272, 140667136184288, 141733920768)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 431622983002))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xe3efbb98), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc9191a265762a163, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc9191a265762a163, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc9191a265762a163, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 0)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 0))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x40b56b50), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9cfd2fdda81782f0, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9cfd2fdda81782f0, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9cfd2fdda81782f0, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140666713932928, 140666713932944, -281058388858415)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672606079232, 140672606079232, 140672753990208))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xfde4e22e), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xfbc6a530d99c0430, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xfbc6a530d99c0430, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xfbc6a530d99c0430, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 140664473911968)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672554337936, 140672554337936, 0))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x31f1dabc), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xb92583bacc085da2, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xb92583bacc085da2, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xb92583bacc085da2, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 412878751766)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 143111561263))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x6c7bea86), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xa7e9b27f4bbde64d, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xa7e9b27f4bbde64d, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xa7e9b27f4bbde64d, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672753994240, 140672753980880, 415324640014)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672753982672, 140672753995136, 0))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x06606b29), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x03c0d26f94266ac2, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x03c0d26f94266ac2, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x03c0d26f94266ac2, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672554337936, 140672554337936, 0)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 140669132905360, 210719514911))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x2f35280a), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x8ad93dc3aed2e834, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x8ad93dc3aed2e834, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x8ad93dc3aed2e834, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 414414727965)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 140669132905360, 214630310547))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xb0acb751), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x193656f7d8846aa6, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x193656f7d8846aa6, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x193656f7d8846aa6, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 416225717956)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667673177328, 140667673177360, 413476356580))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xa4c59fd2), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x3ee7e258f5346330, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x3ee7e258f5346330, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x3ee7e258f5346330, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (7, 0, -1)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (7, 0, -1))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x795bd6d4), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xaf47b674e2897937, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xaf47b674e2897937, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xaf47b674e2897937, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, -281059165760237)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, -281061051512712))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x8a00b4c6), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x8be36816e6345a34, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x8be36816e6345a34, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x8be36816e6345a34, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (20753281981152, 2886218023584, 0)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (4, 8, 1))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x6e5f8b3a), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xa46bad634df574bb, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xa46bad634df574bb, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xa46bad634df574bb, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754030976, 140672668971024, 414412969732)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667040279152, 140672754038144, 413641784044))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x876abe80), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x45c59d860e99e38d, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x45c59d860e99e38d, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x45c59d860e99e38d, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754044864, 140672754042624, 140672754042176)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (3, 4, -281329161162816))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xf5814ec4), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xebf011e5a188bced, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xebf011e5a188bced, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xebf011e5a188bced, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140669921416656, 140669921416688, 416468455000)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 142324217424))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x24a99765), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xd648cc559517effe, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xd648cc559517effe, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xd648cc559517effe, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, -281062556781995)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672753981248, 140672753981696, -281329200891811))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xb5eeef3e), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x3a0a048d951060da, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x3a0a048d951060da, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x3a0a048d951060da, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (7, 11, 140667584211968)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667584212032, 140672753986624, -281045377985537))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x1b24978b), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x142d56de78c6f3cb, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x142d56de78c6f3cb, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x142d56de78c6f3cb, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 16777216, 140672606088240)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 141733920768))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x5ceb1767), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc2d57cf1c7c27064, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc2d57cf1c7c27064, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc2d57cf1c7c27064, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 140667477243248)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140666596655088, 0, -1))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xb2c10f42), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xae3de1d729238e8e, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xae3de1d729238e8e, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xae3de1d729238e8e, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (20753281979104, 2886218022912, -280232197329926)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (1, 1, -280232197329926))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x08f46799), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x8ffd0978841a0751, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x8ffd0978841a0751, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x8ffd0978841a0751, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667525043024, 140672606088240, 140672606088240)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754502800, 140672755671896, 416611827712))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xfc9610f9), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xdd95f5a0cc1fc67f, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xdd95f5a0cc1fc67f, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xdd95f5a0cc1fc67f, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 140672554337936)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667642970160, 140666607235120, 5))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x223e18c3), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9df0e68fb11150c0, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9df0e68fb11150c0, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9df0e68fb11150c0, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140669946352432, 140669946352464, -281060226917721)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140669946352624, 140669946352656, -281329978204977))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xeb02c251), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x8b1813a0020ce1b0, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x8b1813a0020ce1b0, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x8b1813a0020ce1b0, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672554337936, 140672554337936, 140668972260336)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (1, 0, 140668970195776))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x249583e1), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xdfdcbf6fa72bea2a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xdfdcbf6fa72bea2a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xdfdcbf6fa72bea2a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 141848494374)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 144530840441))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x1999867d), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x0d393b560bd1d0c1, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x0d393b560bd1d0c1, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x0d393b560bd1d0c1, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (3, -1, -1)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667703136368, 140667703136400, 419972062759))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xf24abe50), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf453d27b02924f19, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf453d27b02924f19, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf453d27b02924f19, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (3, -1, 4)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (2, 3, 140672754061440))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xf6de375e), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x522d1d9d8fc56cc1, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x522d1d9d8fc56cc1, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x522d1d9d8fc56cc1, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (3, -1, -1)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667140030064, 140667140030096, 430093288911))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x8e74eec0), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x45861e121082229a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x45861e121082229a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x45861e121082229a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672606087136, 140672606088240, 0)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667674947184, 140672554337936, 431337773937))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xa599f8d6), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf4fbda4b559573ec, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf4fbda4b559573ec, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf4fbda4b559573ec, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672753992000, 140672753992448, 432357227787)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 29))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x8270c0be), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x3d6e6306748442f2, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x3d6e6306748442f2, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x3d6e6306748442f2, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 0)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667510399888, 140667062630384, 0))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x1825efaf), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xdc440320277cf224, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xdc440320277cf224, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xdc440320277cf224, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140669965001872, 140669965001968, 140672753981248)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 4))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xa16b7d4e), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xca7621b4a9efb787, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xca7621b4a9efb787, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xca7621b4a9efb787, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140669129896736, 140669129662656, 430985619037)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140669129896736, 140669129662656, 429671624444))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x979e4620), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x58adcbc5d591cd3d, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x58adcbc5d591cd3d, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x58adcbc5d591cd3d, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754209488, 140672754223168, 140669007505040)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754209488, 140672754231232, 140666699312464))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x6ee56073), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc13d346a4382ca05, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc13d346a4382ca05, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc13d346a4382ca05, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 145214916817)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667660539440, 140667660539472, 420322893078))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xeae8697a), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x2a10b20b0a681f7e, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x2a10b20b0a681f7e, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x2a10b20b0a681f7e, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667740153584, 140667740153616, 144937129017)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667520214352, 140667520214384, 146020604650))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xcee5ad21), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x4f0136ecc4cbe4c7, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x4f0136ecc4cbe4c7, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x4f0136ecc4cbe4c7, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, -281059258761411)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 140667082500944))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xd290855b), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xb5de24f62e92988c, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xb5de24f62e92988c, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xb5de24f62e92988c, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140669130300240, 140672754009024, 415381668470)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754524992, 140672753975312, 140672754675992))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xa80b51de), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc0bd177af25d3cc4, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc0bd177af25d3cc4, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc0bd177af25d3cc4, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667729014864, 140667729014896, 430789805004)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (1, 140672571618864, -1))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x4c3e2aac), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x4e2c3efdd9eaefe6, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x4e2c3efdd9eaefe6, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x4e2c3efdd9eaefe6, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667728825104, 1, 140672753975304)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754502800, 140672755671896, 432399664971))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x2de99057), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x18af95f82b8113a4, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x18af95f82b8113a4, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x18af95f82b8113a4, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (8, 10, 12)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (8, 10, 12))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xd3573923), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x308a5cbc617a052c, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x308a5cbc617a052c, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x308a5cbc617a052c, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672753975304, 140672753975304, 141927187177)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672554337936, 140672554337936, 414431038819))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xb72c3def), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9081be6686e9f849, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9081be6686e9f849, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9081be6686e9f849, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140668226922960, 140668226923024, 140667103952256)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140668226926192, 140668226926224, 140667556835408))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xd501370b), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x3346283eaa794936, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x3346283eaa794936, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x3346283eaa794936, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (20615843025632, 0, 213394070193)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (4294967297, 0, 412316860416))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xdb498b09), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xe709be961bcf0909, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xe709be961bcf0909, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xe709be961bcf0909, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 144489772776)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672587380480, 140672606088240, 143804124331))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x21cff2f0), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5a57d8e7f4967657, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5a57d8e7f4967657, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5a57d8e7f4967657, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140668998983792, 140668998983824, 0)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672554337936, 140672554337936, 0))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xb51cc9d3), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf8c611014c41a64b, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf8c611014c41a64b, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xf8c611014c41a64b, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672753984384, 140672753984832, 0)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140669127577344, 140672754515744, 140667042948464))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x3c0e21d0), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x389fac2ab3dbd67b, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x389fac2ab3dbd67b, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x389fac2ab3dbd67b, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140668225148912, 140668225148944, 145758481856)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (1, 140669935275408, -1))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x1df134f2), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xa6f8fb8b917c28ae, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xa6f8fb8b917c28ae, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xa6f8fb8b917c28ae, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 142216004597)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 142775187847))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x761d5c1c), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x29ac97486d57d360, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x29ac97486d57d360, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x29ac97486d57d360, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754209936, 140672753982592, -281044300376917)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140669920853552, 140669920853584, -1))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x014eba97), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9f931717e858a7bb, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9f931717e858a7bb, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9f931717e858a7bb, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672735415504, 140672735415536, 431236228693)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140668974688976, 140666643473248, 140667053523024))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xdbeb9300), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x0c66afcddc587b88, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x0c66afcddc587b88, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x0c66afcddc587b88, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667672054928, 140667047391520, 210453397510)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667672054736, 140672606088240, 141733921440))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x9c85abe9), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc19f18b5cbff000a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc19f18b5cbff000a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xc19f18b5cbff000a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (4294967297, 1, -1)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140670291799200, 140670015773200, 140672554337936))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x46cd6062), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x79580d790bcf13b7, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x79580d790bcf13b7, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x79580d790bcf13b7, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 0)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 0))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x8c316654), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x810c51be25c76567, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x810c51be25c76567, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x810c51be25c76567, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 413880826023)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667539446864, 140667539446896, 415263971333))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xda686ae4), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x43f3dd30c44e84f7, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x43f3dd30c44e84f7, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x43f3dd30c44e84f7, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (2, 12884901891, 3)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (2886218027744, 20753281979104, 2886218027584))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x349627b3), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x95213b9032a83f6a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x95213b9032a83f6a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x95213b9032a83f6a, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140666642171520, 140666642171552, -1)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672606088176, 140667517732752, -1))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x4d361cd2), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x2e46a274ff3bac36, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x2e46a274ff3bac36, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x2e46a274ff3bac36, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140670016018304, 140670014857808, 414229370136)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140670015857736, 140670015851504, 140667536472096))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x4ace2b11), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x15eee7a5682c049b, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x15eee7a5682c049b, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x15eee7a5682c049b, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754209040, 140667128794560, 416145247364)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667128794688, 140667128794704, 5))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x0588d017), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x395d6805b5deae65, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x395d6805b5deae65, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x395d6805b5deae65, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (4294967297, 1, -1)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (20753281981120, 0, -1))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xa0bb429a), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x4cc08f176e423a11, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x4cc08f176e423a11, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x4cc08f176e423a11, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672606088176, 140666644589968, 140672754042624)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672753981248, 140672753981696, 4))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xf512872e), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5cbf7eab6832a98d, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5cbf7eab6832a98d, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x5cbf7eab6832a98d, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140668175505472, 140668175505520, -1)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140669000807440, 140666594393856, -1))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xca3a5850), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xa441e8836412f484, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xa441e8836412f484, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xa441e8836412f484, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (1, 0, 0)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667714165648, 140667714165712, 140672753982144))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x9b09253f), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x1cc3ff158a90af99, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x1cc3ff158a90af99, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x1cc3ff158a90af99, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 0)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 0))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xb03dbdfb), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xdb0fbea577a07248, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xdb0fbea577a07248, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xdb0fbea577a07248, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140667147088688, 140667147088720, 142998533470)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672553650528, 140672553650480, -281062659850240))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xcc9daaf2), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x98f57d9f5b81224f, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x98f57d9f5b81224f, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x98f57d9f5b81224f, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754244224, 140672754272448, 431765662189)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (140672754267072, 140672668971024, 140672586388624))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0xb46e1de3), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xa2208844737f8760, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xa2208844737f8760, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0xa2208844737f8760, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (4294967297, 1, 412789603482)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 141932873368))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x5c707734), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x44c5159722c92f48, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x44c5159722c92f48, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x44c5159722c92f48, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 145193074045)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 143331987590))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x84aa2031), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, ((show_progress = false, threading = true, catch_interrupt = true), HomotopyContinuation.monodromy_solve, HomotopyContinuation.MonodromySolver{HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9c55951baa8a8027, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}, Vector{ComplexF64}, HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing}, HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}}(HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9c55951baa8a8027, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}[HomotopyContinuation.EndgameTracker{HomotopyContinuation.ParameterHomotopy{HomotopyContinuation.ModelKit.CompiledSystem{(0x9c55951baa8a8027, 1)}}, StructArrays.StructArray{ComplexF64, 2, @NamedTuple{re::Matrix{Float64}, im::Matrix{Float64}}, Int64}}()], HomotopyContinuation.MonodromyLoop{Vector{ComplexF64}}[], HomotopyContinuation.UniquePoints{ComplexF64, Int64, HomotopyContinuation.EuclideanNorm, Nothing} with 0 points, ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 0, 431625200564)), HomotopyContinuation.MonodromyOptions{HomotopyContinuation.EuclideanNorm, Nothing}(true, nothing, HomotopyContinuation.always_false, HomotopyContinuation.independent_normal, false, 1.0e-10, true, 10000, 300.0, 100000, 100, :all, false, HomotopyContinuation.EuclideanNorm(), true, 1.0e-6, 1.0e-6, false), MonodromyStatistics
 • tracked_loops → Base.Threads.Atomic{Int64}(0)
 • tracking_failures → Base.Threads.Atomic{Int64}(0)
 • solutions → Int64[]
, ComplexF64[0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im; 0.0 + 0.0im 0.0 + 0.0im 0.0 + 0.0im], ReentrantLock(nothing, 0x00000000, 0x00, Base.GenericCondition{Base.Threads.SpinLock}(Base.IntrusiveLinkedList{Task}(nothing, nothing), Base.Threads.SpinLock(0)), (0, 140669132905360, 210719514911))), Any[], [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 0x5fe2a1ea), 0x0000000000006a7e)
Attempting to reduce dimension by adding a random linear equation.
Caught error: MethodError(Core.kwcall, 